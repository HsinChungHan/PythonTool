476
00:17:37,200 --> 00:17:40,766
繼續，讓我們製作HTTPSession

477
00:17:40,766 --> 00:17:45,266
返回任務

478
00:17:45,266 --> 00:17:47,100
所以我們可以用協議

479
00:17:47,100 --> 00:17:52,633
在每個地方替換資料任務

480
00:17:52,633 --> 00:17:55,733
並且不再需要重寫

481
00:17:55,733 --> 00:18:00,766
只需要實施它

482
00:18:00,766 --> 00:18:03,333
所以現在我們只需要在

483
00:18:03,333 --> 00:18:05,266
測試中使用間諜

484
00:18:05,266 --> 00:18:08,300
對，我認為這樣應該就可以了

485
00:18:08,300 --> 00:18:11,433
簡單，所以我們更換了子類

486
00:18:11,433 --> 00:18:12,233
策略

487
00:18:12,233 --> 00:18:14,633
以一個基於協議的策略來

488
00:18:14,633 --> 00:18:16,700
模擬URLSession

489
00:18:16,700 --> 00:18:18,700
你對此感覺如何？我認為這是

490
00:18:18,700 --> 00:18:20,633
一種改進，原因是

491
00:18:20,633 --> 00:18:22,633
隱藏了我們不關心的所有URL

492
00:18:22,633 --> 00:18:24,000
Session的細節

493
00:18:24,000 --> 00:18:26,700
現在我們可以限制我們擁有的API

494
00:18:26,700 --> 00:18:27,600
進入點

495
00:18:27,600 --> 00:18:30,233
但我們對產品代碼增添了一些瑣碎之處

496
00:18:30,233 --> 00:18:31,100
我們有這些額外的協議，

497
00:18:31,100 --> 00:18:33,100
協議與原本的界面完全一致，

498
00:18:33,100 --> 00:18:35,733
在我看來這是一種麻煩的預兆，因為我們

499
00:18:35,733 --> 00:18:37,900
引進了這兩種新的類型，

500
00:18:37,900 --> 00:18:40,000
組成完全一樣的接口。