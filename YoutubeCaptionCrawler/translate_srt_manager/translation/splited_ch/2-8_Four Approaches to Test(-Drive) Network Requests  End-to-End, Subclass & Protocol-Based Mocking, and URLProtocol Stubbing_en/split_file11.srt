275
00:09:56,466 --> 00:09:58,133
以生產代碼，所以每次你

276
00:09:58,133 --> 00:09:59,900
想要重構代碼，你會破壞

277
00:09:59,900 --> 00:10:00,700
測試

278
00:10:00,700 --> 00:10:03,033
這可能會是一個問題，測試

279
00:10:03,033 --> 00:10:04,533
正在檢查

280
00:10:04,533 --> 00:10:08,633
確切地說，這些API的實現

281
00:10:08,633 --> 00:10:11,033
我們不希望這樣，正如你所說，我們

282
00:10:11,033 --> 00:10:12,000
寧願

283
00:10:12,000 --> 00:10:14,800
檢查加載

284
00:10:14,800 --> 00:10:15,833
URL的行為

285
00:10:15,833 --> 00:10:18,300
以及完成情況，如果可能的話，如果

286
00:10:18,300 --> 00:10:18,933
可能的話

287
00:10:18,933 --> 00:10:20,533
對，這是可能的，我們將

288
00:10:20,533 --> 00:10:22,533
向你展示，對，我絕對同意

289
00:10:22,533 --> 00:10:24,300
僅僅因為我們不得不

290
00:10:24,300 --> 00:10:27,033
覆寫resume方法

291
00:10:27,033 --> 00:10:30,233
在FakeURLSessionDataTask中

292
00:10:30,233 --> 00:10:32,933
這就向你展示這些API

293
00:10:32,933 --> 00:10:33,600
可能有多麼脆弱

294
00:10:33,600 --> 00:10:36,700
當用於測試目的，而且

295
00:10:36,700 --> 00:10:38,800
僅僅要用於測試的情況下

296
00:10:38,800 --> 00:10:39,733
對

297
00:10:39,733 --> 00:10:42,066
確實，那其他我們正在

298
00:10:42,066 --> 00:10:43,200
不覆寫可能會產生問題

299
00:10:43,200 --> 00:10:45,833
的方法，那可能會導致未來問題

300
00:10:45,833 --> 00:10:47,433
在未來

301
00:10:47,433 --> 00:10:49,333
所以我們需要對此保持警惕，對於