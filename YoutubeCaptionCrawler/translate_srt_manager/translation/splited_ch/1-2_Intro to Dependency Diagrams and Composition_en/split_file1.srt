28
00:00:56,700 --> 00:01:01,100
因為你可以看到哪個模塊

29
00:01:01,100 --> 00:01:03,733
與哪個模塊進行對話，例如所以它

30
00:01:03,733 --> 00:01:04,933
更容易看到

31
00:01:04,933 --> 00:01:08,066
依賴性圖，對吧

32
00:01:08,066 --> 00:01:10,400
你的對象，你的類別，甚至是

33
00:01:10,400 --> 00:01:11,600
你的功能

34
00:01:11,600 --> 00:01:13,833
如果你正在寫一些功能性的代碼庫

35
00:01:13,833 --> 00:01:15,033
絕對是的

36
00:01:15,033 --> 00:01:18,466
確實，而且它還有助於找到記憶體

37
00:01:18,466 --> 00:01:19,200
洩漏

38
00:01:19,200 --> 00:01:21,333
潛在的記憶體洩漏，對吧，並非實際的

39
00:01:21,333 --> 00:01:22,933
記憶體洩漏，因為我們可能

40
00:01:22,933 --> 00:01:23,266
需要

41
00:01:23,266 --> 00:01:25,266
Instruments 或其他東西來找到該。

42
00:01:25,266 --> 00:01:27,900
嗯，我們可以從視覺上看到一些保留週期。

43
00:01:27,900 --> 00:01:28,466
是的。

44
00:01:28,466 --> 00:01:31,200
確實，公平地說，對於

45
00:01:31,200 --> 00:01:32,400
代碼的演變來說是非常容易的。

46
00:01:32,400 --> 00:01:34,633
與圖表失序所以

47
00:01:34,633 --> 00:01:36,866
有個很好的反駁點是不保留它們。

48
00:01:36,866 --> 00:01:38,766
作為文檔，我不會將它們保存為。

49
00:01:38,766 --> 00:01:41,033
文檔，大多數時候。

50
00:01:41,033 --> 00:01:44,066
例如，我在開始寫功能時最常使用圖表

51
00:01:44,066 --> 00:01:45,733
在團隊中，我們可以配對

52
00:01:45,733 --> 00:01:48,300
以及我們可以在裡面進行對話。