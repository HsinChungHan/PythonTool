34
00:01:56,740 --> 00:01:59,700
了解建置系統的運作方式中的一個重要部分

35
00:01:59,700 --> 00:02:02,960
受兩種編譯器如何協同工作的影響。

36
00:02:04,860 --> 00:02:08,660
Clang 單獨編譯每一個 Objective-C 檔案。

37
00:02:10,860 --> 00:02:13,860
如果你想參照來自其他檔案的類別，

38
00:02:13,860 --> 00:02:18,660
你必須匯入宣告該類別的頁首。

39
00:02:18,660 --> 00:02:21,900
我們將深入探討這些頁首檔案如何運作

40
00:02:21,900 --> 00:02:23,040
在幾分鐘之內，

41
00:02:24,540 --> 00:02:27,040
但我認為你能辨認出語法結構。

42
00:02:30,480 --> 00:02:34,920
相較之下，Swift 過去單獨編譯每個檔案，

43
00:02:35,880 --> 00:02:38,320
但在 Apple 進行多次改進之後

44
00:02:38,320 --> 00:02:39,940
對建置系統，

45
00:02:39,940 --> 00:02:43,240
Swift 編譯器現在能一次編譯多個檔案。

46
00:02:44,300 --> 00:02:47,280
這並不如 Swift

47
00:02:47,280 --> 00:02:49,460
被設計成不需要頁首那麼重要。

48
00:02:50,320 --> 00:02:53,540
這是因為頁首重覆且難以管理。

49
00:02:54,360 --> 00:02:57,100
沒有頁首讓開始變得簡單