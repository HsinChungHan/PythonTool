273
00:09:47,433 --> 00:09:51,200
正在測試的系統或者說

274
00:09:51,200 --> 00:09:54,866
sut的創建到一個工廠

275
00:09:54,866 --> 00:09:58,366
方法來保護我們的測試

276
00:09:58,366 --> 00:10:01,500
免於破壞性變化

277
00:10:01,500 --> 00:10:04,533
就是這樣，不錯。好的，既然我們正在做

278
00:10:04,533 --> 00:10:05,500
這個

279
00:10:05,500 --> 00:10:07,666
我們也可以增加記憶體洩漏

280
00:10:07,666 --> 00:10:09,500
跟蹤，就像我們在其他測試中所做的那樣

281
00:10:09,500 --> 00:10:12,633
是的，聽上去不錯。跟蹤記憶體洩漏

282
00:10:12,633 --> 00:10:14,866
我們有這個方法，我們在

283
00:10:14,866 --> 00:10:16,533
其他組件中使用過

284
00:10:16,533 --> 00:10:19,600
現在讓我們只是複製到這裡好了，我喜歡

285
00:10:19,600 --> 00:10:21,200
這種做法，我們可以分兩步進行

286
00:10:21,200 --> 00:10:24,066
所以我們能夠通過傳遞sut執行跟蹤記憶體洩漏

287
00:10:24,066 --> 00:10:25,433
文件和行編號，這樣我們可以在

288
00:10:25,433 --> 00:10:28,633
正確的地方得到一個很好的斷言

289
00:10:28,633 --> 00:10:30,300
意味著我們需要在makeSUT方法中獲取最後

290
00:10:30,300 --> 00:10:32,633
的行數

291
00:10:32,633 --> 00:10:34,633
就是這樣，這應該就足夠了。

292
00:10:34,633 --> 00:10:38,066
好的，讓我們提交並添加記憶體洩漏

293
00:10:38,066 --> 00:10:41,433
跟蹤。既然我們現在已經有了這

294
00:10:41,433 --> 00:10:44,866
跟蹤，所以我們要繼續的了。