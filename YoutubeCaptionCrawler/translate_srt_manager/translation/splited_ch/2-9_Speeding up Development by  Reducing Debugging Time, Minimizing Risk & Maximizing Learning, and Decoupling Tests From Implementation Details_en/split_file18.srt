436
00:15:59,833 --> 00:16:01,033
Swift Error protocol

437
00:16:01,033 --> 00:16:03,433
好的，我們來看看它是否通過，我猜應該可以

438
00:16:03,433 --> 00:16:04,533
我猜應該可以

439
00:16:04,533 --> 00:16:07,033
好的，它通過了，很好。所以在這個

440
00:16:07,033 --> 00:16:08,700
情況下，我們選擇不進行檢查

441
00:16:08,700 --> 00:16:10,866
具體的錯誤因為這是個

442
00:16:10,866 --> 00:16:13,266
無效的情境可以表示

443
00:16:13,266 --> 00:16:15,266
但如果你真的關心這

444
00:16:15,266 --> 00:16:16,800
情況你最好在

445
00:16:16,800 --> 00:16:20,000
你的測試中增加一個類型檢查，但我對

446
00:16:20,000 --> 00:16:20,800
這個滿意

447
00:16:20,800 --> 00:16:22,366
到目前為止，我們可以在

448
00:16:22,366 --> 00:16:25,100
未來改變我們的想法，那就提交吧

449
00:16:25,100 --> 00:16:28,466
傳遞未預期的值

450
00:16:28,466 --> 00:16:32,000
當請求完成時的錯誤

451
00:16:32,000 --> 00:16:35,033
伴隨著數據，響應和錯誤

452
00:16:35,033 --> 00:16:39,033
都為nil，好的，好像我們現在有

453
00:16:39,033 --> 00:16:41,033
兩個失敗案例的一些重複現象，為何我們不提取

454
00:16:41,033 --> 00:16:43,733
重複的代碼呢？

455
00:16:43,733 --> 00:16:45,833
重複的代碼

456
00:16:45,833 --> 00:16:48,133
我們在這裡有不同的設定，但是

457
00:16:48,133 --> 00:16:50,133
算法非常相似

458
00:16:50,133 --> 00:16:52,700
好的，所以我們可以將這個移動到一個助手

459
00:16:52,700 --> 00:16:53,733
方法

460
00:16:53,733 --> 00:16:57,333
對，所以結果