127
00:16:54,000 --> 00:17:01,040
這個特別的情況下，時間分析器是完美的工具來檢查相同的應用程序轉換並理解為何

128
00:17:01,040 --> 00:17:08,560
它需要如此長的時間來執行，實際上在執行的是什麼。你可能會找到方法讓

129
00:17:08,560 --> 00:17:16,080
這些運程更快，但是有些情況下，例如进入network call，你需要

130
00:17:16,080 --> 00:17:21,280
可能只需要將耗時的工作移到後台Thread，並讓Main Thread可以

131
00:17:21,280 --> 00:17:28,880
處理UI手勢和UI更新。所以這也許就是你找的策略。

132
00:17:32,400 --> 00:17:38,640
所以，一個好的策略是從UI關鍵代理方法中盡快返回，因為

133
00:17:38,640 --> 00:17:44,160
它們在Main Thread上執行，我們希望能快速釋放Main Thread以處理這些

134
00:17:44,160 --> 00:17:51,040
UI事件和更新。這同樣適用於SceneDelegate AppDelegate方法調用，只需返回即可