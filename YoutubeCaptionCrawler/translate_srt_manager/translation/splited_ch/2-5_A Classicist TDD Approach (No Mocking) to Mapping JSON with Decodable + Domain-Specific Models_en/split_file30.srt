746
00:30:35,333 --> 00:30:37,433
對，並將那知識保留在 API

747
00:30:37,433 --> 00:30:39,100
範疇內，我認為我們能做到這一點

748
00:30:39,100 --> 00:30:40,933
而不破壞我們的測試

749
00:30:40,933 --> 00:30:42,366
因為最終我們要

750
00:30:42,366 --> 00:30:44,766
這個模塊生成 FeedItems

751
00:30:44,766 --> 00:30:47,900
但內部我們可以使用一種過渡式

752
00:30:47,900 --> 00:30:49,600
的表示法，絕對可以

753
00:30:49,600 --> 00:30:51,900
來自API的

754
00:30:51,900 --> 00:30:54,866
FeedItem表示法轉換為 FeedItems

755
00:30:54,866 --> 00:30:56,366
所以我想要

756
00:30:56,366 --> 00:30:58,766
去掉這個 Decodable 實現

757
00:30:58,766 --> 00:31:00,366
在此

758
00:31:00,366 --> 00:31:06,066
我們可以透過建立我們自己的

759
00:31:06,066 --> 00:31:09,666
私人類型來達成這個目標

760
00:31:09,666 --> 00:31:12,533
就像我們處理根元素一樣

761
00:31:12,533 --> 00:31:15,266
對

762
00:31:15,266 --> 00:31:17,833
但現在這個的名稱正確地

763
00:31:17,833 --> 00:31:18,700
對應了

764
00:31:18,700 --> 00:31:21,833
API JSON的表示法，對

765
00:31:21,833 --> 00:31:24,000
因此，這個 Item 是 FeedItem 的

766
00:31:24,000 --> 00:31:25,900
內部表示

767
00:31:25,900 --> 00:31:27,900
但對於 API 模組，這將會變成

768
00:31:27,900 --> 00:31:29,333
現在的 Decodable，對

769
00:31:29,333 --> 00:31:32,000
對，我喜歡這樣，然後 Root 會

770
00:31:32,000 --> 00:31:32,766
生成