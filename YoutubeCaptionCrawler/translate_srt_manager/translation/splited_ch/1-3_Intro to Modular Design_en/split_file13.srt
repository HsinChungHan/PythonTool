318
00:10:38,066 --> 00:10:40,933
對他們的組件以及參考

319
00:10:40,933 --> 00:10:42,000
組件

320
00:10:42,000 --> 00:10:44,366
在其他組件內部沒有好的

321
00:10:44,366 --> 00:10:45,433
分隔

322
00:10:45,433 --> 00:10:47,833
像依賴注入，初始化器

323
00:10:47,833 --> 00:10:49,333
在這種情況下你知道

324
00:10:49,333 --> 00:10:52,000
強制不可變性所以使用

325
00:10:52,000 --> 00:10:53,200
具體類型

326
00:10:53,200 --> 00:10:56,133
你會感覺更有控制力，甚至擁有

327
00:10:56,133 --> 00:10:57,433
程序碼

328
00:10:57,433 --> 00:10:58,700
感覺你更有控制力

329
00:10:58,700 --> 00:11:00,133
因為你可以逐行看到什麼

330
00:11:00,133 --> 00:11:00,700
正在發生

331
00:11:00,700 --> 00:11:02,133
但一旦你開始使用動態

332
00:11:02,133 --> 00:11:05,033
調度並開始命名界面

333
00:11:05,033 --> 00:11:07,200
和閉包，人們開始害怕

334
00:11:07,200 --> 00:11:08,366
是的，絕對是

335
00:11:08,366 --> 00:11:10,866
所以對於未受過訓練的人來說，這可能

336
00:11:10,866 --> 00:11:12,533
更難以抽象思考

337
00:11:12,533 --> 00:11:15,833
例如，在函數中調用一個閉包

338
00:11:15,833 --> 00:11:16,700
函數

339
00:11:16,700 --> 00:11:18,933
而不是擁有一個隱含的依賴性

340
00:11:18,933 --> 00:11:20,300
讓我們說一個單例

341
00:11:20,300 --> 00:11:22,800
並調用單例的函數

342
00:11:22,800 --> 00:11:24,133
直接

343
00:11:24,133 --> 00:11:26,466
這可能會讓他們

344
00:11:26,466 --> 00:11:28,700
擁有一種我們常見的架構