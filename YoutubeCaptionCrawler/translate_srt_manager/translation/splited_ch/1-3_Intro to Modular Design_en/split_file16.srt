394
00:13:05,266 --> 00:13:07,200
像這樣可能對多數的

395
00:13:07,200 --> 00:13:08,866
applications來說是有效的

396
00:13:08,866 --> 00:13:10,800
當然，這也取決於你使用的application

397
00:13:10,800 --> 00:13:12,700
我正在工作的如果是非常簡單的

398
00:13:12,700 --> 00:13:14,466
我可能會先從這樣開始

399
00:13:14,466 --> 00:13:16,466
但我知道如何從這種

400
00:13:16,466 --> 00:13:18,066
architecture

401
00:13:18,066 --> 00:13:21,033
轉變到更模塊化的方式，我會根據需要進行這種轉變

402
00:13:21,033 --> 00:13:22,633
這得由測試和compiler支持

403
00:13:22,633 --> 00:13:24,633
使用測試和compiler支持

404
00:13:24,633 --> 00:13:26,000
compiler

405
00:13:26,000 --> 00:13:27,833
所以從這樣開始並無不妥

406
00:13:27,833 --> 00:13:29,266
或者擁有一種架構

407
00:13:29,266 --> 00:13:31,033
它可能是超級monolithic的，然後根據需要分解它

408
00:13:31,033 --> 00:13:32,533
按需分解它

409
00:13:32,533 --> 00:13:34,800
您不必從一個非常

410
00:13:34,800 --> 00:13:36,300
模塊化的application開始

411
00:13:36,300 --> 00:13:38,066
另外，模塊化的application並不意味著

412
00:13:38,066 --> 00:13:40,300
它必須是复杂的

413
00:13:40,300 --> 00:13:43,100
對，這可十分重要，如果我們遵循

414
00:13:43,100 --> 00:13:43,666
好的

415
00:13:43,666 --> 00:13:45,900
原則，我們可以結束使用相當

416
00:13:45,900 --> 00:13:47,500
優秀的architecture

417
00:13:47,500 --> 00:13:48,700
我見過那些代碼庫，它們是

418
00:13:48,700 --> 00:13:50,700
monolithic的，並且非常具體