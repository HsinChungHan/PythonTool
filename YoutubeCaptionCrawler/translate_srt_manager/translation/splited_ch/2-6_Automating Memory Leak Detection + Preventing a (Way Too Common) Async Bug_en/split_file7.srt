169
00:06:05,166 --> 00:06:07,500
也是，看起來不錯，希望能夠通過

170
00:06:07,500 --> 00:06:08,866
很好，讓我們提交，但我不想

171
00:06:08,866 --> 00:06:11,600
馬上提交

172
00:06:11,600 --> 00:06:12,400
這份生產代碼

173
00:06:12,400 --> 00:06:16,066
所以加入記憶體洩漏偵測

174
00:06:16,066 --> 00:06:19,666
很好，現在回到生產代碼

175
00:06:19,666 --> 00:06:24,400
你可以把它放回去，但實際上我們

176
00:06:24,400 --> 00:06:27,100
可以讓這個函數成為靜態的

177
00:06:27,100 --> 00:06:28,633
對，所以我們不需要有一個

178
00:06:28,633 --> 00:06:31,833
實例

179
00:06:31,833 --> 00:06:32,400
來運行這份代碼，這樣就不需要 self

180
00:06:32,400 --> 00:06:35,033
而我們也不需要

181
00:06:35,033 --> 00:06:36,633
weakify self，

182
00:06:36,633 --> 00:06:39,733
很好，這甚至讓我思考，是否

183
00:06:39,733 --> 00:06:42,300
這個函數應該是一個靜態函數

184
00:06:42,300 --> 00:06:43,733
在FeedItemsMapper中，因為

185
00:06:43,733 --> 00:06:44,400
它是一個映射函數，我們已經

186
00:06:44,400 --> 00:06:47,600
在FeedItemsMapper中有一個專用的位置來進行所有Feed項目的映射

187
00:06:47,600 --> 00:06:50,000
也許我們可以把它移到那

188
00:06:50,000 --> 00:06:52,133
讓我們試試

189
00:06:52,133 --> 00:06:52,933
將它設置為內部函數，所以邏輯

190
00:06:52,933 --> 00:06:54,800
依然是一樣的

191
00:06:54,800 --> 00:06:58,066
讓我們試試看

192
00:06:58,066 --> 00:07:00,400
讓它现在為內部的，所以邏輯

193
00:07:00,400 --> 00:07:01,500
還是一樣的