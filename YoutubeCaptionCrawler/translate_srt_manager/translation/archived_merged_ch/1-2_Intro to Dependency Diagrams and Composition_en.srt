

1
00:00:01,266 --> 00:00:03,100
哈囉 Mike，嗨 Caio

2
00:00:03,100 --> 00:00:05,100
很多觀眾表示有些

3
00:00:05,100 --> 00:00:06,233
困難

4
00:00:06,233 --> 00:00:09,333
在讀解圖表上

5
00:00:09,333 --> 00:00:12,066
所以我們何不透過一個簡單的

6
00:00:12,066 --> 00:00:13,333
示範來解釋

7
00:00:13,333 --> 00:00:16,233
所有我們從一個

8
00:00:16,233 --> 00:00:17,733
元件拉出的箭頭到另一個

9
00:00:17,733 --> 00:00:20,800
以及介面，協定等等所有這些

10
00:00:20,800 --> 00:00:21,500
事物

11
00:00:21,500 --> 00:00:23,266
對，我們可以寫程式碼並顯示

12
00:00:23,266 --> 00:00:24,800
圖表的演變

13
00:00:24,800 --> 00:00:28,000
當我們進行時，我喜歡這樣，但在我們開始之前

14
00:00:28,000 --> 00:00:29,266
開始

15
00:00:29,266 --> 00:00:32,766
為什麼我們寫圖表，當我們

16
00:00:32,766 --> 00:00:34,233
繪製它們

17
00:00:34,233 --> 00:00:36,700
為何？嗯，它是一種溝通工具

18
00:00:36,700 --> 00:00:38,233
對我們自己來說

19
00:00:38,233 --> 00:00:40,933
也為團隊中的其他開發人員，而且

20
00:00:40,933 --> 00:00:42,866
當我說我們自己的時候，我指的是我們未來的

21
00:00:42,866 --> 00:00:44,700
自己，你知道

22
00:00:44,700 --> 00:00:47,033
理解當時的思考

23
00:00:47,033 --> 00:00:48,533
過程並

24
00:00:48,533 --> 00:00:51,500
以某種方式記錄下來，我喜歡圖表的另一個事情是

25
00:00:51,500 --> 00:00:53,600
你可以驗證你的設計

26
00:00:53,600 --> 00:00:55,833
決策

27
00:00:55,833 --> 00:00:56,700
決策.

28
00:00:56,700 --> 00:01:01,100
因為你可以看到哪個模塊

29
00:01:01,100 --> 00:01:03,733
與哪個模塊進行對話，例如所以它

30
00:01:03,733 --> 00:01:04,933
更容易看到

31
00:01:04,933 --> 00:01:08,066
依賴性圖，對吧

32
00:01:08,066 --> 00:01:10,400
你的對象，你的類別，甚至是

33
00:01:10,400 --> 00:01:11,600
你的功能

34
00:01:11,600 --> 00:01:13,833
如果你正在寫一些功能性的代碼庫

35
00:01:13,833 --> 00:01:15,033
絕對是的

36
00:01:15,033 --> 00:01:18,466
確實，而且它還有助於找到記憶體

37
00:01:18,466 --> 00:01:19,200
洩漏

38
00:01:19,200 --> 00:01:21,333
潛在的記憶體洩漏，對吧，並非實際的

39
00:01:21,333 --> 00:01:22,933
記憶體洩漏，因為我們可能

40
00:01:22,933 --> 00:01:23,266
需要

41
00:01:23,266 --> 00:01:25,266
Instruments 或其他東西來找到該。

42
00:01:25,266 --> 00:01:27,900
嗯，我們可以從視覺上看到一些保留週期。

43
00:01:27,900 --> 00:01:28,466
是的。

44
00:01:28,466 --> 00:01:31,200
確實，公平地說，對於

45
00:01:31,200 --> 00:01:32,400
代碼的演變來說是非常容易的。

46
00:01:32,400 --> 00:01:34,633
與圖表失序所以

47
00:01:34,633 --> 00:01:36,866
有個很好的反駁點是不保留它們。

48
00:01:36,866 --> 00:01:38,766
作為文檔，我不會將它們保存為。

49
00:01:38,766 --> 00:01:41,033
文檔，大多數時候。

50
00:01:41,033 --> 00:01:44,066
例如，我在開始寫功能時最常使用圖表

51
00:01:44,066 --> 00:01:45,733
在團隊中，我們可以配對

52
00:01:45,733 --> 00:01:48,300
以及我們可以在裡面進行對話。

53
00:01:48,300 --> 00:01:50,133
開始我們就畫了一些圖表

54
00:01:50,133 --> 00:01:50,533
來

55
00:01:50,533 --> 00:01:53,600
將我們的想法放在紙上可能需要

56
00:01:53,600 --> 00:01:54,000
我們像

57
00:01:54,000 --> 00:01:55,900
五分鐘，十分鐘來擬定出一個 

58
00:01:55,900 --> 00:01:57,433
初步的計劃

59
00:01:57,433 --> 00:01:59,666
這只是一個框架來想事情的 

60
00:01:59,666 --> 00:02:01,200
並不總是文檔

61
00:02:01,200 --> 00:02:04,300
如你所說，它是一種溝通工具

62
00:02:04,300 --> 00:02:06,300
是的，我認為你非常對

63
00:02:06,300 --> 00:02:07,333
在這裡因為

64
00:02:07,333 --> 00:02:09,666
這實際上是壞的投資因為在

65
00:02:09,666 --> 00:02:11,166
一些種類的 

66
00:02:11,166 --> 00:02:13,266
複雜性被引入到系統中後

67
00:02:13,266 --> 00:02:14,533
則

68
00:02:14,533 --> 00:02:17,033
追蹤所有變化只是太昂貴了 

69
00:02:17,033 --> 00:02:18,000
並且如果您沒有工具會

70
00:02:18,000 --> 00:02:20,400
繪製這些圖表來

71
00:02:20,400 --> 00:02:21,733
針對這些情境

72
00:02:21,733 --> 00:02:24,000
轉換原始碼到圖表中我是說 

73
00:02:24,000 --> 00:02:25,666
然後我百分之百同意您，我從沒

74
00:02:25,666 --> 00:02:28,300
見過一個好的工具

75
00:02:28,300 --> 00:02:29,433
可以為我做到這一點所以確切來說  

76
00:02:29,433 --> 00:02:32,133
也許有

77
00:02:32,133 --> 00:02:32,933
可能有這樣的工具

78
00:02:32,933 --> 00:02:35,266
也許這裡有點不公平，但我們的一個

79
00:02:35,266 --> 00:02:36,700
觀眾可能會做到

80
00:02:36,700 --> 00:02:40,000
好的，請

81
00:02:40,000 --> 00:02:41,833
好，那我們開始寫一些

82
00:02:41,833 --> 00:02:43,033
代碼，很好

83
00:02:43,033 --> 00:02:45,200
我們為何不先從上次的例子開始

84
00:02:45,200 --> 00:02:46,133
時間的

85
00:02:46,133 --> 00:02:48,800
FeedViewController，所以我們有一個類別

86
00:02:48,800 --> 00:02:51,500
就是一個 FeedViewController

87
00:02:51,500 --> 00:02:54,000
對，這就是我們的起點，對，那麼

88
00:02:54,000 --> 00:02:54,800
是的

89
00:02:54,800 --> 00:02:56,300
我們現在手邊這一段確切的代碼

90
00:02:56,300 --> 00:02:58,233
如何轉換成圖表，對嗎

91
00:02:58,233 --> 00:03:00,533
所以這只是一個類別，一個單獨的

92
00:03:00,533 --> 00:03:01,333
組件

93
00:03:01,333 --> 00:03:05,033
並且它沒有任何參照、依賴

94
00:03:05,033 --> 00:03:07,266
行為什麼的，所以我們可以用

95
00:03:07,266 --> 00:03:08,133
它的

96
00:03:08,133 --> 00:03:11,200
這個方框和它的名字來表示

97
00:03:11,200 --> 00:03:12,800
但在我們上一次的例子中，

98
00:03:12,800 --> 00:03:14,633
這個類別繼承

99
00:03:14,633 --> 00:03:20,633
自 UIViewController，對吧

100
00:03:20,633 --> 00:03:24,000
所以僅僅透過這樣做，通過導入

101
00:03:24,000 --> 00:03:24,633
UIKit

102
00:03:24,633 --> 00:03:26,866
並從 UIViewController 中繼承

103
00:03:26,866 --> 00:03:28,866
那就是一個模組依賴

104
00:03:28,866 --> 00:03:30,833
所以我們需要在圖表中加入這個

105
00:03:30,833 --> 00:03:33,266
現在它看起來像這樣

106
00:03:33,266 --> 00:03:34,933
我們繼承自 ViewController，並且

107
00:03:34,933 --> 00:03:36,633
因為它是另一個模塊

108
00:03:36,633 --> 00:03:38,300
我們用不同的顏色來表示它

109
00:03:38,300 --> 00:03:39,566
我喜歡這樣，所以

110
00:03:39,566 --> 00:03:40,233
FeedViewController

111
00:03:40,233 --> 00:03:43,033
源自於 UIViewController，這意味著

112
00:03:43,033 --> 00:03:44,133
我們現在依賴

113
00:03:44,133 --> 00:03:46,133
不僅僅是 UIViewController，而且是 UIKit

114
00:03:46,133 --> 00:03:47,733
確實，因為這就是

115
00:03:47,733 --> 00:03:49,733
UIViewController 所在的模塊

116
00:03:49,733 --> 00:03:51,333
定義的地方

117
00:03:51,333 --> 00:03:53,566
因此我們必需在此引入 UIKit，且

118
00:03:53,566 --> 00:03:54,700
這是一種來源

119
00:03:54,700 --> 00:03:57,433
從我們的專案對 UIKit 的代碼依賴

120
00:03:57,433 --> 00:03:58,000
專案

121
00:03:58,000 --> 00:04:00,233
以及最強的結合方式

122
00:04:00,233 --> 00:04:02,066
繼承

123
00:04:02,066 --> 00:04:04,700
這是對的，但我們有更多的

124
00:04:04,700 --> 00:04:05,666
依賴在這裡

125
00:04:05,666 --> 00:04:08,866
在上一集我們有個

126
00:04:08,866 --> 00:04:09,333
loadFeed

127
00:04:09,333 --> 00:04:12,633
封閉的方式，所以讓我

128
00:04:12,633 --> 00:04:14,700
迅速地貼這段代碼在這裡，就這樣

129
00:04:14,700 --> 00:04:16,766
非常好，所以我們有一個封閉的

130
00:04:16,766 --> 00:04:18,233
可以加載feed的方法，並在這個

131
00:04:18,233 --> 00:04:19,600
情況下，假設它是一個字符串的數組

132
00:04:19,600 --> 00:04:21,333
所以我們可以在表視圖中顯示它

133
00:04:21,333 --> 00:04:23,033
對，或者是 collection view，它非常簡單

134
00:04:23,033 --> 00:04:24,933
並且在 viewDidLoad 上

135
00:04:24,933 --> 00:04:26,866
我們調用了 loadFeed 的 closure，然後

136
00:04:26,866 --> 00:04:28,633
期望得到一些項目

137
00:04:28,633 --> 00:04:30,366
對，這種情況很常見且我們更新

138
00:04:30,366 --> 00:04:31,833
UI，對

139
00:04:31,833 --> 00:04:33,600
但現在我們有了新的依賴，它是一個

140
00:04:33,600 --> 00:04:35,433
closure 對，但即使它是一個

141
00:04:35,433 --> 00:04:36,000
函數

142
00:04:36,000 --> 00:04:38,533
它仍然是一個依賴，我們絕對有

143
00:04:38,533 --> 00:04:40,833
依賴這個簽名的

144
00:04:40,833 --> 00:04:42,866
類型和簽名

145
00:04:42,866 --> 00:04:45,266
就是這種，對，沒錯，它是一個 closure，所以我們

146
00:04:45,266 --> 00:04:46,700
甚至可以命名它

147
00:04:46,700 --> 00:04:48,933
只是為了讓這個更清楚，我們將它稱為

148
00:04:48,933 --> 00:04:50,133
Feed

149
00:04:50,133 --> 00:04:53,900
Loader

150
00:04:53,900 --> 00:04:56,233
現在我們可以在這裡替換它，那就是

151
00:04:56,233 --> 00:04:58,000
它的情況，它仍然是一個依賴

152
00:04:58,000 --> 00:04:59,666
我可以傳遞任何有相同簽名的 closure，這意味著即使

153
00:04:59,666 --> 00:05:01,100
我們傳遞一個

154
00:05:01,100 --> 00:05:02,466
closure，我們還是要改變我們的圖表，對，所以我們

155
00:05:02,466 --> 00:05:05,333
現在有

156
00:05:05,333 --> 00:05:05,833
一個

157
00:05:05,833 --> 00:05:08,133
從 FeedViewController 的箭頭

158
00:05:08,133 --> 00:05:10,133
朝向FeedLoader，這是一個閉包

159
00:05:10,133 --> 00:05:10,633
但

160
00:05:10,633 --> 00:05:13,266
這是一個介面，它是一個簽名

161
00:05:13,266 --> 00:05:13,900
確實

162
00:05:13,900 --> 00:05:16,066
並且因為它是一個介面，我們加了前綴和後綴

163
00:05:16,066 --> 00:05:17,900
並用這些大於和小於的符號來表示

164
00:05:17,900 --> 00:05:20,800
這是一個引用，這是一個依賴關係

165
00:05:20,800 --> 00:05:22,466
作為從

166
00:05:22,466 --> 00:05:23,833
FeedViewController到FeedLoader的引用，這就是為什麼

167
00:05:23,833 --> 00:05:25,833
我們選擇帶有封閉頭部的箭頭

168
00:05:25,833 --> 00:05:26,466
我們

169
00:05:26,466 --> 00:05:28,700
選擇了帶有封閉頭部的箭頭

170
00:05:28,700 --> 00:05:29,500
基本上

171
00:05:29,500 --> 00:05:31,500
嗯，這是一個強引用實際上

172
00:05:31,500 --> 00:05:33,600
是的，我們知道在Swift中的閉包

173
00:05:33,600 --> 00:05:35,600
它們就像類一樣，是引用型別

174
00:05:35,600 --> 00:05:37,500
可能就是一個協議

175
00:05:37,500 --> 00:05:39,733
我們有那裡的typealias

176
00:05:39,733 --> 00:05:40,866
FeedLoader

177
00:05:40,866 --> 00:05:43,666
並且FeedLoader看起來像是一個很好的名字

178
00:05:43,666 --> 00:05:45,333
對於一個協議來說

179
00:05:45,333 --> 00:05:47,600
基本上它是完全一樣的

180
00:05:47,600 --> 00:05:48,700
它是一個簽名

181
00:05:48,700 --> 00:05:50,933
對，好的那麼為什麼我們不把它

182
00:05:50,933 --> 00:05:52,233
變成一個協議呢

183
00:05:52,233 --> 00:05:54,000
我們來做這個，所需要的並不多 

184
00:05:54,000 --> 00:05:55,900
我們可以僅僅 

185
00:05:55,900 --> 00:05:59,033
將這個改成協議，現在具有

186
00:05:59,033 --> 00:06:00,866
一個功能 

187
00:06:00,866 --> 00:06:04,233
例如 loadFeed

188
00:06:04,233 --> 00:06:05,900
對，我們需要那裡的完成作為一個命名的參數 

189
00:06:05,900 --> 00:06:07,666
作為一個命名參數 

190
00:06:07,666 --> 00:06:11,033
並且我們可以省略void的返回類型 

191
00:06:11,033 --> 00:06:13,500
因為它默認返回void，對但是 

192
00:06:13,500 --> 00:06:15,433
現在我們沒有逃逸的

193
00:06:15,433 --> 00:06:19,100
協議，對，我們甚至可以改變 

194
00:06:19,100 --> 00:06:22,133
loadFeed的名稱，讓我們為它命名為 

195
00:06:22,133 --> 00:06:25,733
loader，對，我喜歡loader，現在它是 

196
00:06:25,733 --> 00:06:26,633
loader 

197
00:06:26,633 --> 00:06:28,800
.loadFeed，由於這是一個協議 

198
00:06:28,800 --> 00:06:29,666
我們需要在 

199
00:06:29,666 --> 00:06:31,600
協議上調用一個函數，這裡 

200
00:06:31,600 --> 00:06:33,833
我們之前只需要調用一個閉包 

201
00:06:33,833 --> 00:06:35,333
而且圖表也一樣 

202
00:06:35,333 --> 00:06:36,700
對，我不會改變圖表中的任何東西

203
00:06:36,700 --> 00:06:39,266
我同意你的看法

204
00:06:39,266 --> 00:06:41,900
他們在概念上非常相似，他們 

205
00:06:41,900 --> 00:06:42,933
實質上 

206
00:06:42,933 --> 00:06:44,533
FeedViewController只知道

207
00:06:44,533 --> 00:06:46,000
基本上關於這個

208
00:06:46,000 --> 00:06:49,666
在第一個範例中的loadFeed功能

209
00:06:49,666 --> 00:06:51,500
它是通過這裡的閉包來瞭解的

210
00:06:51,500 --> 00:06:53,033
現在它透過這個protocol來瞭解

211
00:06:53,033 --> 00:06:55,033
但除此之外，對於

212
00:06:55,033 --> 00:06:56,466
這個 FeedLoader類型

213
00:06:56,466 --> 00:06:58,466
它無法做其他的事情

214
00:06:58,466 --> 00:06:59,666
一個只有一個方法的protocol

215
00:06:59,666 --> 00:07:01,100
可以被替換成閉包

216
00:07:01,100 --> 00:07:03,100
我認為這是公平的說法 

217
00:07:03,100 --> 00:07:04,533
有些人偏好閉包有些人偏好

218
00:07:04,533 --> 00:07:06,400
protocol，這很大程度上是

219
00:07:06,400 --> 00:07:07,833
個人選擇的問題

220
00:07:07,833 --> 00:07:09,833
雖然我們現在依賴於這個命名的

221
00:07:09,833 --> 00:07:11,900
FeedLoader類型，但以前它

222
00:07:11,900 --> 00:07:13,666
可能是任何符合類型簽名的匿名閉包對吧？

224
00:07:16,633 --> 00:07:20,300
命名是困難的，這是一個比較大的問題

225
00:07:20,300 --> 00:07:22,133
但有時你需要命名事物以

226
00:07:22,133 --> 00:07:24,300
實施一些類型的合約

227
00:07:24,300 --> 00:07:25,333
所以 protocol定義了更好的合約，我

228
00:07:25,333 --> 00:07:27,900
的建議是

229
00:07:27,900 --> 00:07:28,466
根據你的舒適程度

230
00:07:28,466 --> 00:07:31,900
使用你感到舒服的技術

231
00:07:31,900 --> 00:07:32,300
就好

232
00:07:32,300 --> 00:07:34,133
如果你對協議相當熟悉，就繼續用它

233
00:07:34,133 --> 00:07:35,666
使用協議，但不要害怕走出舒適區

234
00:07:35,666 --> 00:07:37,333
嘗試一些新思路

235
00:07:37,333 --> 00:07:38,233
非常重要的新思想

236
00:07:38,233 --> 00:07:41,433
好的，那麼我們有

237
00:07:41,433 --> 00:07:42,233
一個

238
00:07:42,233 --> 00:07:43,433
FeedViewController，我們有一個

239
00:07:43,433 --> 00:07:45,566
FeedLoader，但我們不能做太多

240
00:07:45,566 --> 00:07:47,833
有關這個的事情，我們需要有人來實現

241
00:07:47,833 --> 00:07:50,000
對，確實如此，

242
00:07:50,000 --> 00:07:51,666
假設我們有一個RemoteFeedLoader

243
00:07:51,666 --> 00:07:54,300
實現了FeedLoader

244
00:07:54,300 --> 00:07:56,633
介面，當你呼叫loadFeed

245
00:07:56,633 --> 00:07:58,000
它會與API層對話

246
00:07:58,000 --> 00:08:00,866
URLSession, AFNetwork並呼叫

247
00:08:00,866 --> 00:08:01,733
完成時

248
00:08:01,733 --> 00:08:03,900
現在它完成了，那麼這個

249
00:08:03,900 --> 00:08:05,100
圖表是怎麼樣的

250
00:08:05,100 --> 00:08:07,433
所以現在我們有這個虛線與

251
00:08:07,433 --> 00:08:08,400
開放的頭

252
00:08:08,400 --> 00:08:10,800
從RemoteFeedLoader到

253
00:08:10,800 --> 00:08:11,566
FeedLoader

254
00:08:11,566 --> 00:08:13,733
這意味著RemoteFeedLoader

255
00:08:13,733 --> 00:08:14,800
符合

256
00:08:14,800 --> 00:08:16,633
FeedLoader協議，我

257
00:08:16,633 --> 00:08:19,033
決定在這裡使用一些顏色來顯示

258
00:08:19,033 --> 00:08:21,166
我們如何將那些類型綁定到

259
00:08:21,166 --> 00:08:22,233
模塊中

260
00:08:22,233 --> 00:08:23,900
例如，FeedLoader可以

261
00:08:23,900 --> 00:08:26,133
存在於FeedViewController模塊中

262
00:08:26,133 --> 00:08:27,266
但是RemoteFeedLoader 

263
00:08:27,266 --> 00:08:28,700
實現可以存在於其他

264
00:08:28,700 --> 00:08:29,900
模塊中，這就是為什麼它有不同的

265
00:08:29,900 --> 00:08:30,533
顏色

266
00:08:30,533 --> 00:08:32,233
比如說它是藍色的模塊，它可以

267
00:08:32,233 --> 00:08:34,000
是一個API模塊

268
00:08:34,000 --> 00:08:36,633
例如，或者是一個服務模塊，但是它們

269
00:08:36,633 --> 00:08:37,433
也可以

270
00:08:37,433 --> 00:08:39,266
全部在同一個模塊中，但是它們

271
00:08:39,266 --> 00:08:40,700
不應該是固定的

272
00:08:40,700 --> 00:08:42,933
正因為如此，我們創建這些

273
00:08:42,933 --> 00:08:44,766
將關注點分離

274
00:08:44,766 --> 00:08:46,300
所以，如果到了要在某個地方分享這些的時候

275
00:08:46,300 --> 00:08:48,933
或有不同的實現

276
00:08:48,933 --> 00:08:50,133
我們可以替換

277
00:08:50,133 --> 00:08:52,000
我們可以做到，我們有選擇，或者

278
00:08:52,000 --> 00:08:53,266
方便測試

279
00:08:53,266 --> 00:08:56,300
這很重要，沒錯

280
00:08:56,300 --> 00:08:57,733
所以我們可以有一個不同的

281
00:08:57,733 --> 00:09:00,000
FeedLoader的實現

282
00:09:00,000 --> 00:09:02,133
對，例如一個LocalFeedLoader，是對的

283
00:09:02,133 --> 00:09:04,000
例如這個LocalFeedLoader

284
00:09:04,000 --> 00:09:07,100
只是從緩存中獲取一些數據

285
00:09:07,100 --> 00:09:10,866
系統或甚至預定義的JSON文件

286
00:09:10,866 --> 00:09:12,866
在你運輸時包裹在應用裡面

287
00:09:12,866 --> 00:09:14,300
如果你沒有互聯網連接

288
00:09:14,300 --> 00:09:15,433
你仍然可以在屏幕上看到一些東西

289
00:09:15,433 --> 00:09:16,000
屏幕

290
00:09:16,000 --> 00:09:18,800
確實，你可以有一個持久儲存庫

291
00:09:18,800 --> 00:09:20,300
你可以有一個緩存

292
00:09:20,300 --> 00:09:22,800
機制，一個JSON文件，這不 

293
00:09:22,800 --> 00:09:23,433
重要

294
00:09:23,433 --> 00:09:24,866
這就是抽象的美麗之處

295
00:09:24,866 --> 00:09:26,466
FeedLoader在這裡你可以有一個

296
00:09:26,466 --> 00:09:28,000
一堆實現

297
00:09:28,000 --> 00:09:30,933
符合FeedLoader協議，而且

298
00:09:30,933 --> 00:09:32,366
被傳遞周圍

299
00:09:32,366 --> 00:09:34,300
作為FeedLoader，現在我們有一種新的

300
00:09:34,300 --> 00:09:36,300
類型在我們的圖表中，好的

301
00:09:36,300 --> 00:09:38,800
它就在那裡，那個LocalFeedLoader就是那樣

302
00:09:38,800 --> 00:09:39,900
也實現了

303
00:09:39,900 --> 00:09:42,700
FeedLoader介面，它符合了

304
00:09:42,700 --> 00:09:44,066
FeedLoader介面


305
00:09:44,066 --> 00:09:45,666
而且它可以在一個單獨的模塊中

306
00:09:45,666 --> 00:09:47,200
這就是為什麼它有不同的顏色

307
00:09:47,200 --> 00:09:48,866
但你可以將所有事物捆綁在一起

308
00:09:48,866 --> 00:09:51,200
在同一個模塊中，但我們有選擇

309
00:09:51,200 --> 00:09:53,333
絕對的，現在想像你的老闆

310
00:09:53,333 --> 00:09:54,633
來找你說

311
00:09:54,633 --> 00:09:56,466
我希望你總是嘗試去獲得

312
00:09:56,466 --> 00:09:58,133
最新版本來自遠程，但如果

313
00:09:58,133 --> 00:09:59,033
你沒有

314
00:09:59,033 --> 00:10:01,033
網絡連接，我希望你從

315
00:10:01,033 --> 00:10:03,333
緩存中獲取數據

316
00:10:03,333 --> 00:10:05,433
對，所以我認為那很合理的需求

317
00:10:05,433 --> 00:10:06,466
經常在iOS上這樣是個

318
00:10:06,466 --> 00:10:09,500
好的
320
00:10:09,900 --> 00:10:11,833
用戶體驗, 我們有很多方式可以做到這點

321
00:10:11,833 --> 00:10:13,033
例如有些人可能

322
00:10:13,033 --> 00:10:15,666
在RemoteFeedLoader中有一些邏輯，說

323
00:10:15,666 --> 00:10:17,200
你知道我應該只有一種

324
00:10:17,200 --> 00:10:19,500
類型
325
00:10:19,500 --> 00:10:21,100
它應該能做所有的事情，然後你就破壞了

326
00:10:21,100 --> 00:10:21,666
單一職責原則, 最

327
00:10:21,666 --> 00:10:23,900
可能的情況下

328
00:10:23,900 --> 00:10:25,333
單一責任原則最

329
00:10:25,333 --> 00:10:26,933
可能的會破壞掉

330
00:10:26,933 --> 00:10:29,266
是的，也許這對你來說就很好

331
00:10:29,266 --> 00:10:30,933
對，但是

332
00:10:30,933 --> 00:10:33,100
我們經常看到的情況是

333
00:10:33,100 --> 00:10:34,366
有各種不同的方法

334
00:10:34,366 --> 00:10:37,333
去處理問題，這會讓事情變得更簡單

335
00:10:37,333 --> 00:10:38,300
不是簡單些，是對吧？

336
00:10:38,300 --> 00:10:40,533
是的，我喜歡這比較簡單與容易的比對

337
00:10:40,533 --> 00:10:41,333
例如

338
00:10:41,333 --> 00:10:43,900
一種簡單而常用的

339
00:10:43,900 --> 00:10:44,466
方法

340
00:10:44,466 --> 00:10:47,200
就是現在我們要變更我們的

341
00:10:47,200 --> 00:10:48,000
ViewController

342
00:10:48,000 --> 00:10:50,633
讓它依賴於具體的類型，例如

343
00:10:50,633 --> 00:10:51,833
而不是只對一個介面進行談話，

344
00:10:51,833 --> 00:10:54,533
我們現在要依賴於具體的類型

345
00:10:54,533 --> 00:10:56,633
然後我們必須引入某種

346
00:10:56,633 --> 00:10:59,100
邏輯

347
00:10:59,100 --> 00:11:00,000
在ViewController中，

348
00:11:00,000 --> 00:11:02,633
以知道我們應當呼叫哪一個

349
00:11:02,633 --> 00:11:03,333
及何時呼叫。

350
00:11:03,333 --> 00:11:06,533
比如說，

351
00:11:06,533 --> 00:11:08,800
如果網路可用，我們就使用

352
00:11:08,800 --> 00:11:10,066
遠程的一個，

353
00:11:10,066 --> 00:11:12,366
否則我們就使用本地快取。所以現在，

354
00:11:12,366 --> 00:11:13,666
我們把這段程式碼變得

355
00:11:13,666 --> 00:11:16,800
更複雜了，而不是更簡單。但是

356
00:11:16,800 --> 00:11:17,266
那只是

357
00:11:17,266 --> 00:11:20,300
一個簡單的修改，正確，那只是

358
00:11:20,300 --> 00:11:21,100
一個簡單的修改。

359
00:11:21,100 --> 00:11:23,666
滿足需求，現在我們繼續

360
00:11:23,666 --> 00:11:25,033
我們有兩個依賴性，它們都是

361
00:11:25,033 --> 00:11:26,000
具體的

362
00:11:26,000 --> 00:11:27,733
程式碼開始變得更

363
00:11:27,733 --> 00:11:30,000
難以移動，因為每次有

364
00:11:30,000 --> 00:11:31,733
新需求，我們都會來這裡

365
00:11:31,733 --> 00:11:33,433
並增加更多的if語句

366
00:11:33,433 --> 00:11:36,133
更多的邏輯，很容易就會讓這個視圖

367
00:11:36,133 --> 00:11:37,266
控制器變成一千

368
00:11:37,266 --> 00:11:38,300
行長

369
00:11:38,300 --> 00:11:40,233
所有人都會對

370
00:11:40,233 --> 00:11:41,333
改變它感到害怕

371
00:11:41,333 --> 00:11:44,366
我們的示意圖現在看起來像這樣

372
00:11:44,366 --> 00:11:47,200
看上去更簡單，我們有更少的東西

373
00:11:47,200 --> 00:11:48,633
但我並不認為這更簡單

374
00:11:48,633 --> 00:11:50,366
因為改變這一點並不簡單

375
00:11:50,366 --> 00:11:52,233
我不能更改

376
00:11:52,233 --> 00:11:53,900
ViewController的行為，而不

377
00:11:53,900 --> 00:11:54,533
改變

378
00:11:54,533 --> 00:11:56,700
內部的程式碼，這意味著它不

379
00:11:56,700 --> 00:11:58,533
對擴展開放

380
00:11:58,533 --> 00:12:02,466
是的，我們正向僵化鎮走去

381
00:12:02,466 --> 00:12:05,833
所以我們如何才能回去

382
00:12:05,833 --> 00:12:06,866
並讓FeedViewController

383
00:12:06,866 --> 00:12:09,666
依賴那個介面，但它仍然

384
00:12:09,666 --> 00:12:11,500
有這種新的行為，對吧，所以我們可以

385
00:12:11,500 --> 00:12:12,800
使用組成

386
00:12:12,800 --> 00:12:16,133
我們可以將這個邏輯封裝為

387
00:12:16,133 --> 00:12:18,466
一個類型，用來檢查網路是否

388
00:12:18,466 --> 00:12:19,200
可用

389
00:12:19,200 --> 00:12:21,333
如果可用就會獲取遠程數據，否則就會

390
00:12:21,333 --> 00:12:22,866
依賴於

391
00:12:22,866 --> 00:12:25,200
本地版本的 Feed，那我們來做

392
00:12:25,200 --> 00:12:26,633
吧，我會撤銷這裡的

393
00:12:26,633 --> 00:12:28,366
變更，所以我們又回到只有

394
00:12:28,366 --> 00:12:30,000
Loader

395
00:12:30,000 --> 00:12:31,666
介面，但是現在我們要添加一個

396
00:12:31,666 --> 00:12:34,066
新的類型，對吧

397
00:12:34,066 --> 00:12:36,933
所以我們移動了我們在

398
00:12:36,933 --> 00:12:38,066
ViewController 添加的同樣的邏輯，但現在

399
00:12:38,066 --> 00:12:40,466
移到了一個服務，但如何再次使

400
00:12:40,466 --> 00:12:41,733
ViewController

401
00:12:41,733 --> 00:12:43,500
與這個服務對話呢，我們必須去到

402
00:12:43,500 --> 00:12:45,266
ViewController 並改變它

403
00:12:45,266 --> 00:12:47,200
如果它是個像這樣的具體類型，那麼

404
00:12:47,200 --> 00:12:48,700
ViewController 就會和一個

405
00:12:48,700 --> 00:12:49,433
FeedLoader

406
00:12:49,433 --> 00:12:51,500
交談，所以如果我們把這個定義為RemoteWithLocal

407
00:12:51,500 --> 00:12:53,200
FallbackFeedService

408
00:12:53,200 --> 00:12:55,900
符合 FeedLoader 協議，

409
00:12:55,900 --> 00:12:57,900
我們就能將它接入 ViewController

410
00:12:57,900 --> 00:13:00,000
而 ViewController 對此保持中立

411
00:13:00,000 --> 00:13:01,433
不關心資料來源

412
00:13:01,433 --> 00:13:03,900
同樣的，RemoteFeedLoader

413
00:13:03,900 --> 00:13:05,900
對此也保持中立而

414
00:13:05,900 --> 00:13:07,500
LocalFeedLoader 也對這些保持中立

415
00:13:07,500 --> 00:13:08,000
類型

416
00:13:08,000 --> 00:13:11,733
絕對的，這些類型都是獨立的

417
00:13:11,733 --> 00:13:14,866
而且他們可以獨立測試，但在這裡

418
00:13:14,866 --> 00:13:17,666
我們可以將他們組合成這個新類型

419
00:13:17,666 --> 00:13:19,666
分離了關注點

420
00:13:19,666 --> 00:13:24,233
在整個系統中，所以，為了做到這一點，我們可以

421
00:13:24,233 --> 00:13:26,466
將此服務實際轉變為一個 loader

422
00:13:26,466 --> 00:13:27,266
同時也實現 FeedLoader

423
00:13:27,266 --> 00:13:30,700
接口，我喜歡這種變化，因為它反映了

424
00:13:30,700 --> 00:13:33,833
基於 FeedLoader 的類型的意圖

425
00:13:33,833 --> 00:13:34,700
意圖

426
00:13:34,700 --> 00:13:36,300
根據 FeedLoader 協議。所以我們做的是它組成

427
00:13:36,300 --> 00:13:38,300
這兩種

428
00:13:38,300 --> 00:13:38,866
具體類型

429
00:13:38,866 --> 00:13:40,800
如你所見，我們是在

430
00:13:40,800 --> 00:13:42,300
使用這邊的具體類型

431
00:13:42,300 --> 00:13:44,800
那麼現在在圖表中這個看起來如何呢？

432
00:13:44,800 --> 00:13:47,500
看起來很可怕

433
00:13:47,500 --> 00:13:50,233
如你所見，這個 RemoteWithLocal

434
00:13:50,233 --> 00:13:51,500
FallbackFeedLoader

435
00:13:51,500 --> 00:13:52,866
實現了 FeedLoader，並且它

436
00:13:52,866 --> 00:13:54,700
依賴於一個 RemoteFeedLoader 和一個 

437
00:13:54,700 --> 00:13:55,266
Local

438
00:13:55,266 --> 00:13:57,100
FeedLoader，其餘的都沒有

439
00:13:57,100 --> 00:13:58,133
改變，對的，這意味著

440
00:13:58,133 --> 00:14:00,066
ViewController不知道這些

441
00:14:00,066 --> 00:14:02,133
邏輯，這意味著我們改變了

442
00:14:02,133 --> 00:14:04,233
程式碼的行為卻沒有改變

443
00:14:04,233 --> 00:14:06,700
ViewController，我們添加了一種新的

444
00:14:06,700 --> 00:14:08,300
組合這些東西的方法，我真的

445
00:14:08,300 --> 00:14:09,033
喜歡這一點

446
00:14:09,033 --> 00:14:11,433
因為 FeedViewController它

447
00:14:11,433 --> 00:14:12,066
不知道

448
00:14:12,066 --> 00:14:14,300
feed是從何處來的，並且它

449
00:14:14,300 --> 00:14:15,166
不在乎

450
00:14:15,166 --> 00:14:17,433
現在我們可以多麼輕易地測試 Feed

451
00:14:17,433 --> 00:14:18,466
ViewController了

452
00:14:18,466 --> 00:14:20,000
對，我們可以在這裡測試一切

453
00:14:20,000 --> 00:14:21,900
以獨立的方式，這真好

454
00:14:21,900 --> 00:14:23,333
並且我們可以使用類型系統來幫助

455
00:14:23,333 --> 00:14:25,500
我們將這些類型組合起來

456
00:14:25,500 --> 00:14:27,900
如果你認為這樣是一種性質的話

457
00:14:27,900 --> 00:14:29,600
協定嗎？不，你同樣可以用closures來完成。

458
00:14:29,600 --> 00:14:31,033
對，我對這設計非常滿意，我們甚至可以

459
00:14:31,033 --> 00:14:33,600
簡化這裡的代碼，我們可以

460
00:14:33,600 --> 00:14:35,500
直接轉發

461
00:14:35,500 --> 00:14:37,666
這個完成區塊

462
00:14:37,666 --> 00:14:41,166
例如，我們可以不斷更改其

463
00:14:41,166 --> 00:14:42,933
實施直到我們滿意，假設我們

464
00:14:42,933 --> 00:14:44,233
有一個

465
00:14:44,233 --> 00:14:46,133
加載功能，它會根據

466
00:14:46,133 --> 00:14:47,500
網絡狀態

467
00:14:47,500 --> 00:14:49,600
做這個或做那個

468
00:14:49,600 --> 00:14:51,033
我們

469
00:14:51,033 --> 00:14:59,266
有自由決定。

470
00:14:59,266 --> 00:15:00,700
是的，這沒關係，只要你

471
00:15:00,700 --> 00:15:02,700
遵循介面就好

472
00:15:02,700 --> 00:15:05,500
你可以測試這行為，並重構

473
00:15:05,500 --> 00:15:07,266
直到你對代碼感到滿意

474
00:15:07,266 --> 00:15:09,333
例如，不只有一種

475
00:15:09,333 --> 00:15:10,466
本地可能，你可能會有

476
00:15:10,466 --> 00:15:11,833
不同類型的

477
00:15:11,833 --> 00:15:13,433
備用方案，然後你可以有一系列的

478
00:15:13,433 --> 00:15:14,466
備用方案

479
00:15:14,466 --> 00:15:16,700
這取決於你，隨著需求的

480
00:15:16,700 --> 00:15:17,900
變更，你不必


481
00:15:17,900 --> 00:15:19,666
為了

482
00:15:19,666 --> 00:15:21,166
增加新的行為，這就是開放 -

483
00:15:21,166 --> 00:15:21,666
封閉

484
00:15:21,666 --> 00:15:24,066
原則，再加上依賴版本，只要

485
00:15:24,066 --> 00:15:25,900
你有清晰的分隔線，

486
00:15:25,900 --> 00:15:27,433
你就有選擇

487
00:15:27,433 --> 00:15:30,800
這很簡單，我認為這很

488
00:15:30,800 --> 00:15:31,166
容易

489
00:15:31,166 --> 00:15:33,033
只要你知道如何做，它

490
00:15:33,033 --> 00:15:34,466
並不需要更多的時間

491
00:15:34,466 --> 00:15:35,900
所以我想說的一件事是

492
00:15:35,900 --> 00:15:38,700
這個圖表或許看起來有些可怕，有這麼多

493
00:15:38,700 --> 00:15:41,166
顏色和塊

494
00:15:41,166 --> 00:15:42,800
但是當我們實例化所有這些

495
00:15:42,800 --> 00:15:46,066
類型時，

496
00:15:46,066 --> 00:15:46,933
我認為它實際上可能會更簡單，它可能只是個

497
00:15:46,933 --> 00:15:49,266
一行代碼

498
00:15:49,266 --> 00:15:52,866
例如，你可以創建你的

499
00:15:52,866 --> 00:15:54,366
ViewController

500
00:15:54,366 --> 00:15:56,233
它是一個FeedViewController，我們傳遞一個

501
00:15:56,233 --> 00:15:58,933
loader

502
00:15:58,933 --> 00:15:59,600
任何符合loader

503
00:15:59,600 --> 00:16:01,333
介面的東西，例如我們可以

504
00:16:01,333 --> 00:16:03,433
用RemoteFeedLoader創建它，或者我們

505
00:16:03,433 --> 00:16:06,533
可以創建另一個

506
00:16:06,533 --> 00:16:08,133
可以再創建一個

507
00:16:08,133 --> 00:16:11,833
與LocalFeedLoader一起，或者我們可以創建

508
00:16:11,833 --> 00:16:12,866
另一個

509
00:16:12,866 --> 00:16:16,300
使用RemoteWithLocalFallback的

510
00:16:16,300 --> 00:16:19,900
FeeLoader，對吧，然後我們傳適

511
00:16:19,900 --> 00:16:21,500
RemoteFeedLoader

512
00:16:21,500 --> 00:16:23,666
和LocalFeedLoader例如

513
00:16:23,666 --> 00:16:25,100
這就是我這裡要說的

514
00:16:25,100 --> 00:16:27,833
程式碼並沒有反映出複雜性

515
00:16:27,833 --> 00:16:28,933
的圖表

516
00:16:28,933 --> 00:16:31,100
因為這張圖表並不

517
00:16:31,100 --> 00:16:32,533
複雜

518
00:16:32,533 --> 00:16:34,233
對，是的，如果你能

519
00:16:34,233 --> 00:16:36,233
閱讀這個，那就有道理

520
00:16:36,233 --> 00:16:39,600
對，但在一開始我認為它可以

521
00:16:39,600 --> 00:16:39,900
是

522
00:16:39,900 --> 00:16:43,266
對新來者來說可能有些嚇人

523
00:16:43,266 --> 00:16:46,700
對，有些人可能會說，好吧

524
00:16:46,700 --> 00:16:47,733
那麼你正在創建FeedViewController

525
00:16:47,733 --> 00:16:49,666
帶有那些依賴性，這

526
00:16:49,666 --> 00:16:50,233
意味著

527
00:16:50,233 --> 00:16:52,300
我無法使用storyboards，對吧

528
00:16:52,300 --> 00:16:54,533
因為我無法控制

529
00:16:54,533 --> 00:16:57,833
我ViewController的實例化，好吧

530
00:16:57,833 --> 00:17:00,366
這是一種誤解嗎？我認為是

531
00:17:00,366 --> 00:17:02,000
對，因為我可以做的是

532
00:17:02,000 --> 00:17:05,333
例如我可以設置我的 loader

533
00:17:05,333 --> 00:17:07,666
創建完之後，我們將從

534
00:17:07,666 --> 00:17:09,333
初始化器注入轉向

535
00:17:09,333 --> 00:17:12,000
屬性注入，在這裡我們現在可以

536
00:17:12,000 --> 00:17:14,233
注入這些依賴

537
00:17:14,233 --> 00:17:18,233
你可以使用自定義 segways，也可以在你的 storyboard 或是 nib

538
00:17:18,233 --> 00:17:21,100
檔案中使用自定義物件

539
00:17:21,100 --> 00:17:21,900
檔案

540
00:17:21,900 --> 00:17:23,500
我們有一個影片展示這些

541
00:17:23,500 --> 00:17:25,266
技術，您可以在

542
00:17:25,266 --> 00:17:26,133
簡介中找到連結

543
00:17:26,133 --> 00:17:28,000
所以如果你想要

544
00:17:28,000 --> 00:17:29,266
有組合的類型

545
00:17:29,266 --> 00:17:32,400
這只是一個選擇，只是一個選擇，沒有什麼神奇之處

546
00:17:32,400 --> 00:17:34,233
對，你不必這麼做，但如果你想

547
00:17:34,233 --> 00:17:36,700
你可以這麼做

548
00:17:36,700 --> 00:17:38,000
你可以選擇這麼做

549
00:17:38,000 --> 00:17:39,833
好的，我想今天的內容就到此為止，

550
00:17:39,833 --> 00:17:52,300
我們下次再見
