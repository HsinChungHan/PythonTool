

1
00:00:00,000 --> 00:00:12,000
大家好，歡迎大家。我們將繼續我們的工具系列，對iOS的code signing主題進行深入探討。

2
00:00:12,000 --> 00:00:20,000
今天的計劃是解釋什麼是code signing以及其如何運作。

3
00:00:20,000 --> 00:00:32,000
我們會經過code signing的主要元素，所以有證書和鑰匙，應用識別碼，能力和entitlements, 提供profiles。

4
00:00:32,000 --> 00:00:43,000
我們將示範code signing如何運作，並探索最常見的code signing問題，並看看我們如何解決它們。

5
00:00:43,000 --> 00:00:53,000
Code signing是從iOS和iOS AppStore的第一個版本就引入的，所以它將會持續存在。

6
00:00:53,000 --> 00:01:05,000
這可能是一個複雜的主題，並且在某些時候可能會令所有開發者感到困惑，但是有了適當的知識，這是可以管理的。

7
00:01:05,000 --> 00:01:19,000
在過去幾年裡，Apple已經注意到code signing對app開發者來說是一個問題，所以他們已經建立了一種自動處理code signing的方式，這種方式對於大多數的專案來說，基本上都能運作良好。

8
00:01:19,000 --> 00:01:27,000
但是，當它不適用時，這種情況偶爾也會發生，我們就會陷入一種未知的領域。

9
00:01:27,000 --> 00:01:40,000
這就是為什麼值得學習code signing，了解它的工作原理，所有的個別組件，這樣我們就能驗證並找出解決特定問題的方法。

10
00:01:40,000 --> 00:01:55,000
但首先，讓我們看看code signing是什麼。首先，這是一種安全技術，你用它來證明一個app確實是由列出的開發人員創建的，在這種情況下，可能是你自己或你的公司。

11
00:01:55,000 --> 00:02:07,000
一旦應用程式被簽署，系統就能偵測到該應用程式的任何變化，無論該變化是偶然引入的還是由惡意代碼引入的。

12
00:02:07,000 --> 00:02:15,000
當你獲取一個簽名身份並將你的簽名應用到你發布的應用程式上時，你就作為開發人員參與了代碼簽名。

13
00:02:15,000 --> 00:02:22,000
在這種情況下，證書權威，也就是Apple，為你的簽名身份作擔保。

14
00:02:22,000 --> 00:02:27,000
代碼簽名允許操作系統執行以下操作。

15
00:02:27,000 --> 00:02:32,000
首先，確保一段代碼自簽名以來沒有被修改。

16
00:02:32,000 --> 00:02:44,000
系統可以檢測到即使是最小的變化，無論是惡意攻擊者有意為之，或者是文件發生意外損壞。

17
00:02:44,000 --> 00:02:53,000
當代碼簽名完整無缺時，系統可以確定該代碼是簽名者希望的那樣。

18
00:02:53,000 --> 00:03:01,000
接著，作業系統可以識別某段代碼來自於特定來源，可能是開發者或簽名者。

19
00:03:01,000 --> 00:03:10,000
代碼簽名包含了無法曖昧的指向特定作者的加密資訊，所以非常具體。

20
00:03:10,000 --> 00:03:16,000
作業系統也能決定該代碼是否可以信任，以達到特定目的。

21
00:03:16,000 --> 00:03:26,000
除了其他事項，開發者可以使用代碼簽名來表明應用的更新版本應該被系統視為與先前版本相同的應用。

22
00:03:26,000 --> 00:03:35,000
Apple的代碼簽名建立於X509標準之上，這個標準描述了公開密鑰憑證的格式。

23
00:03:35,000 --> 00:03:43,000
所以如果你想研究的話，就研究這個標準或我將在課程頁面中提供一個鏈接。

24
00:03:43,000 --> 00:03:53,000
一個X509證書將一個身份與公鑰綁定，並通過使用數位簽名來實現這一點。

25
00:03:53,000 --> 00:04:07,000
證書包含一個身份，主機名或組織或個人以及公鑰，公鑰可以是多種類型，如RSA、DSA、SCDSA等等。

26
00:04:07,000 --> 00:04:11,000
有多種類型的公鑰。

27
00:04:11,000 --> 00:04:19,000
並且這個證書可以由像Apple這樣的憑證授權機構簽署，或者可以自我簽署。

28
00:04:19,000 --> 00:04:39,000
當一個證書被信任的證書授權機構簽署或透過其他方式驗證後，持有該證書的人可以使用其內含的公共密鑰而與另一方建立安全通訊，或驗證由對應私鑰電子簽名的文件。

29
00:04:39,000 --> 00:04:53,000
所以，Apple的代碼簽名是基於擁有一組密鑰，一個與證書授權機構（在此情況下是Apple）共享的公鑰，以及一個對應的私鑰。

30
00:04:53,000 --> 00:05:06,000
代碼簽名只能使用私鑰完成，並只能用公鑰來驗證成品的代碼簽名。

31
00:05:06,000 --> 00:05:12,000
讓我們來看看如何創建這樣的私鑰和公鑰配對。

32
00:05:12,000 --> 00:05:16,000
或許你已經聽說過證書簽名請求。

33
00:05:16,000 --> 00:05:29,000
證書簽名請求是從申請者（我們）發送到證書權威（在此情況下是Apple）以申請數字身份證書的訊息。

34
00:05:29,000 --> 00:05:36,000
這個CSR是使用來自Keychain Access Mac app的Certificate Assistant來創建的。

35
00:05:36,000 --> 00:05:41,000
那麼讓我們看看實際操作。

36
00:05:41,000 --> 00:05:51,000
如果我們開啟Keychain Access app並使用其菜單，在Certificate Assistant下面有一些選項。

37
00:05:51,000 --> 00:05:59,000
我們要使用的是這個Request a Certificate from a Certificate Authority。

38
00:05:59,000 --> 00:06:03,000
這就是Certificate Assistant的樣子。

39
00:06:03,000 --> 00:06:23,000
它將會請求一些有關未來證書所有者的信息，如電子郵件地址，常用名稱，我們可以直接將其電郵到證書權威部門或儲存到磁碟中，我們也可以指定一個鍵資訊，也就是鍵類型。

40
00:06:23,000 --> 00:06:36,000
如果我們不核取這個選項，那麼鍵類型就會預設為 RSA 2048 位，這是標即且很好的選擇，所以我們無需改變它。

41
00:06:36,000 --> 00:06:42,000
例如，我將設置一個鍵稱為 john@email.com。

42
00:06:42,000 --> 00:06:52,000
常用名稱，我們使用 John McClain，因為我們是 Die Hard 系列電影的粉絲，我會將其儲存到磁盤中。

43
00:06:52,000 --> 00:06:55,000
點擊 繼續。

44
00:06:55,000 --> 00:06:59,000
選擇桌面並保存。

45
00:06:59,000 --> 00:07:07,000
現在我可以使用 Show in Finder 來查看這個檔案。

46
00:07:07,000 --> 00:07:13,000
所以，被創建的那個檔案叫做 Certificate Signing Request.Cert Signing Request。

47
00:07:13,000 --> 00:07:22,000
這就是我們將要上傳到 Apple Developers 平台，並向他們要求簽證的檔案。

48
00:07:22,000 --> 00:07:28,000
這是一個簽證簽名請求，所以我們還沒有簽證。

49
00:07:28,000 --> 00:07:40,000
在這個 Certificate Assistant 流程中發生的一個重要事情是，Certificate Assistant 也產生了一對公鑰和私鑰，現在已經存儲在我們的鑰匙鏈中。

50
00:07:40,000 --> 00:07:48,000
到目前為止，在我的機器上進行的所有操作都是在本地進行的。我們還沒有與 Apple 的服務進行通信。

51
00:07:48,000 --> 00:07:55,000
所以，如果我回到鑰匙鏈中，這裡並沒有新的鑰匙。

52
00:07:55,000 --> 00:08:01,000
我們可以依照到期日期進行排序，並且我們看到這裡並未添加任何鍵。

53
00:08:01,000 --> 00:08:16,000
但是如果我們使用頂部的這個過濾器並選擇鍵，你會看到我們有一個新的鍵組，這是一對公開和John McClain的私人鍵，來自我剛剛運行的Certificate Assistant。

54
00:08:16,000 --> 00:08:23,000
所以這點非常重要。一旦你產生了Certificate Signing Request，你就會產生一對鍵。

55
00:08:23,000 --> 00:08:35,000
而最重要的是我現在正在選擇的這個私鑰。所以你看到只有在產生CSR的機器上才會有John McClain的私鑰。

56
00:08:35,000 --> 00:08:42,000
但如我之前提到的，當我們想要使用證書進行代碼簽名時，需要這個鍵。

57
00:08:42,000 --> 00:08:45,000
所以我們需要非常小心這把鑰匙。

58
00:08:45,000 --> 00:08:55,000
CSR包含了您剛剛輸入到助手的信息。所以像是名稱和電郵，以及所產生的公鑰的值。

59
00:08:55,000 --> 00:08:58,000
所以這是John McClain的公鑰。

60
00:08:58,000 --> 00:09:05,000
一旦我們有了CSR，我們可以將它上傳到Apple的開發者平台並生成一個證書。

61
00:09:05,000 --> 00:09:10,000
證書是一個證明身份的電子文件。

62
00:09:10,000 --> 00:09:24,000
在使用於Apple代碼簽名的證書中，證書包括一個公鑰和一些額外的信息，如姓名，電郵，您看到我輸入到證書助手的信息。

63
00:09:24,000 --> 00:09:32,000
該證書由Apple簽名是很重要的，所以它聲明證書中的信息是正確的。

64
00:09:32,000 --> 00:09:39,000
這個證書將保證您，開發者，建立了代碼，並且您是開發者計劃的一員。

65
00:09:39,000 --> 00:09:48,000
要看到這個過程，我已經登錄到Apple開發者平台。

66
00:09:48,000 --> 00:10:00,000
到賬戶，然後在這裡有一個名為證書，標識符和配置文件的入口，這裡如果我們打開，有所有參與 code signing 的實體。

67
00:10:00,000 --> 00:10:04,000
第一個標籤就是證書。

68
00:10:04,000 --> 00:10:12,000
由於我生成了CSR，讓我們來看看CSR如何變為真正的證書。

69
00:10:12,000 --> 00:10:17,000
所以流程其實非常簡單。我們這裡有一個加號按鈕。

70
00:10:17,000 --> 00:10:30,000
現在，我們有幾個選擇。我們可以創建一個可以用於簽署所有平台的Apple開發證書，例如iOS，macOS，tvOS，watchOS。

71
00:10:30,000 --> 00:10:34,000
這個是在Xcode 11中介紹的，所以它相當新。

72
00:10:34,000 --> 00:10:41,000
或者是只能用來簽名iOS應用程式的 iOS專用開發證書。

73
00:10:41,000 --> 00:10:47,000
為了符合蘋果的最新技術，我們將使用 Apple 開發選項。

74
00:10:47,000 --> 00:10:53,000
我們將點繼續，然後我們只需要上傳 CSR。

75
00:10:53,000 --> 00:11:02,000
所以我們點擊選擇File，我們選擇我們剛生成的File，我們將其存儲在桌面上，上傳，繼續。

76
00:11:02,000 --> 00:11:07,000
現在我們有了一個證書。

77
00:11:07,000 --> 00:11:11,000
接下來，我們將使用下載按鈕下載此證書。

78
00:11:11,000 --> 00:11:17,000
這將在我們的下載文件夾中下載一個證書。

79
00:11:17,000 --> 00:11:24,000
名稱是development.sr，因為它是一個開發證書。

80
00:11:24,000 --> 00:11:30,000
為了在本地安裝這個證書，我需要雙擊證書File。


81
00:11:30,000 --> 00:11:37,000
所以如果我們這麼做，然後切換回Keychain。

82
00:11:37,000 --> 00:11:42,000
我會切換到我的證書，因為這是一個更好的過濾器。

83
00:11:42,000 --> 00:11:48,000
這是我的新證書，名為Apple development Bogdan。

84
00:11:48,000 --> 00:11:55,000
因為當Apple生成證書時，它使用的是我開發者平台帳戶的名稱。

85
00:11:55,000 --> 00:11:58,000
所以我的全名是Bogdan。

86
00:11:58,000 --> 00:12:04,000
即使在系統中我使用的是John McClain的名字，這只是鑰匙的名稱。

87
00:12:04,000 --> 00:12:09,000
證書名稱仍然是我的官方Apple名字。

88
00:12:09,000 --> 00:12:19,000
而且非常重要的是使用此擴展按鈕，我們立即看到對應此證書的私鑰。

89
00:12:19,000 --> 00:12:25,000
透過這個流程，我現在有一個在本地安裝的開發證書。

90
00:12:25,000 --> 00:12:32,000
如果我再切換回Apple證書平台。

91
00:12:32,000 --> 00:12:38,000
並且前往所有憑證處，我們會注意到這裡有不同的類型。

92
00:12:38,000 --> 00:12:44,000
所以這是因為Apple支持多種類型的憑證。

93
00:12:44,000 --> 00:12:49,000
其中有兩種主要的類型，我想要提及。

94
00:12:49,000 --> 00:12:53,000
首先，有像我們剛剛建立的開發憑證。

95
00:12:53,000 --> 00:13:00,000
這些在開發期間用來將應用程式安裝在我們的設備上，並我們可以進行調試。

96
00:13:00,000 --> 00:13:03,000
還有分發憑證。

97
00:13:03,000 --> 00:13:11,000
如你所見，這裡有兩種類型，分發和iOS分發。之唯一的區別是像這樣的較舊憑證只適用於iOS。

98
00:13:11,000 --> 00:13:17,000
而這個較新的憑證則用於在所有平台上分發。這就是唯一的區別。

99
00:13:17,000 --> 00:13:22,000
你使用分發憑證來與其他人分享構建。

100
00:13:22,000 --> 00:13:25,000
你可以通過以下選項來實現這一點。

101
00:13:25,000 --> 00:13:37,000
您可以創建一個臨時建構並直接通過發送IPA檔案來共享，或您可以通過第三方分發服務如Firebase分發來發送。

102
00:13:37,000 --> 00:13:46,000
如果您有企業帳戶，您可以創建企業建構，並且它們將被完全像臨時建構一樣共享。

103
00:13:46,000 --> 00:13:51,000
或者您可以創建AppStore建構並通過TestFlight或至AppStore來共享。

104
00:13:51,000 --> 00:13:56,000
所有這些都可以使用分發證書來實現。

105
00:13:56,000 --> 00:14:07,000
回到我們的Keychain，我將再次強調，除非您有其對應的私鑰，否則您不能使用證書進行簽名。

106
00:14:07,000 --> 00:14:15,000
我已經顯示過，您可以使用這個擴展按鈕以確保在您的證書下面有私鑰。

107
00:14:15,000 --> 00:14:23,000
要備份金鑰或證書，或兩者都要，您可以從Keychain中將它們導出為P2L文件。

108
00:14:23,000 --> 00:14:31,000
該文件已加密並受密碼保護，所以請確保您記住密碼，因為無法繞過它。

109
00:14:31,000 --> 00:14:36,000
而且，您可以使用這些P2L文件與您的團隊共享金鑰和證書。

110
00:14:36,000 --> 00:14:49,000
舉例來說，我會選擇我的新證書和私密金鑰。我將右鍵單擊並使用導出兩個項目的選項。

111
00:14:49,000 --> 00:14:59,000
我會稱其為my。我將它存儲在桌面上，並使用我剛剛提到的P2L格式，即個人信息交換格式。


112
00:14:59,000 --> 00:15:08,000
我將點擊儲存，並且在匯出時，Keychain助手會要求我為它增加一個密碼，所以我會添加一個密碼。

113
00:15:08,000 --> 00:15:13,000
如您所見，這並不是一個很好的密碼，但它適用於示範並點擊確認。

114
00:15:13,000 --> 00:15:29,000
現在我被要求提供我的Keychain存取密碼，這是我的帳戶密碼，以確保進行此操作的人有權這麼做。這是我的檔案。

115
00:15:29,000 --> 00:15:44,000
這是我的.p12，它包含證書和私鑰，諸事被加密。因此要導入它，你需要雙擊它並需要輸入密碼。

116
00:15:44,000 --> 00:15:50,000
我將點擊取消，很可能會從Keychain得到一個錯誤。對。

117
00:15:50,000 --> 00:15:58,000
因為導入是不成功的。好的。

118
00:15:58,000 --> 00:16:05,000
正如我顯示的，如果您需要與團隊中的任何人共享密鑰或證書，P2L文件是一種好方法。

119
00:16:05,000 --> 00:16:11,000
然後您可以通過其他媒介分享密碼，例如可能在電話上告訴他們。

120
00:16:11,000 --> 00:16:20,000
所以使用雙重標準的安全性。您不會在同一封電郵或其他選項中分享檔案和密碼。

121
00:16:20,000 --> 00:16:29,000
既然我提到了Apple開發者帳戶，您應該知道有幾種類型的帳戶，因為這是有用的信息。

122
00:16:29,000 --> 00:16:38,000
首先，有一個個人開發者帳戶，你只需要將你的Apple ID註冊到Apple即可。

123
00:16:38,000 --> 00:16:44,000
這是一種便利。所以Apple只允許你在你的設備上安裝構建。

124
00:16:44,000 --> 00:16:50,000
這是一個免費帳戶，所以你無法用此帳戶與他人分享構建或上傳到AppStore。

125
00:16:50,000 --> 00:16:57,000
但你可以使用Xcode和一台裝置玩玩看。所以這是個初學者相當有用的開始。

126
00:16:57,000 --> 00:17:07,000
然後有公司或個人開發者帳戶，需註冊至蘋果的開發者計劃，每年費用為100美元。

127
00:17:07,000 --> 00:17:19,000
這是標準帳戶，您可以添加多個開發者成員。您可以透過ad hoc TestFlight或AppStore內部分享應用程式。

128
00:17:19,000 --> 00:17:28,000
並且有企業開發者帳戶。只有擁有100名或以上員工的公司才能註冊此計劃。

129
00:17:28,000 --> 00:17:39,000
它每年的費用為300美元。而蘋果開發者企業計劃只為內部使用和分發專屬應用程式。

130
00:17:39,000 --> 00:17:44,000
在特定的使用情況下，我們不能通過剛剛描述的其他分享選項實現。

131
00:17:44,000 --> 00:17:53,000
所以你只能在為需要實時分發應用的大公司工作時看到此帳戶。

132
00:17:53,000 --> 00:17:58,000
你必須記住的是，企業帳戶只能用於內部分發。

133
00:17:58,000 --> 00:18:05,000
這裡沒有上傳到AppStore的選項。

134
00:18:05,000 --> 00:18:12,000
我看到聊天中的一個問題。每個帳戶每年300美元，但您的可能性較少。

135
00:18:12,000 --> 00:18:22,000
嗯，你的可能性並沒有減少。當你需要分享真正的應用，如內部應用時，企業帳戶很有用。

136
00:18:22,000 --> 00:18:29,000
而且它們是無限的，因為使用標準帳戶，你只能向內部的100個設備分發。

137
00:18:29,000 --> 00:18:34,000
使用企業帳戶，你可以向無限數量的帳戶分發。

138
00:18:34,000 --> 00:18:45,000
你也可以進行多設備和人員的自動管理，像是專為大型企業設計的。

139
00:18:45,000 --> 00:18:53,000
我之所以提到它是因為它很有用。有時候你可能同時擁有公司和企業賬戶。

140
00:18:53,000 --> 00:19:03,000
然後，你需要知道如何充分利用每一個賬戶的特點。

141
00:19:03,000 --> 00:19:07,000
接下來，每個開發者賬戶都有一個唯一的識別符。

142
00:19:07,000 --> 00:19:13,000
例如，主要的開發者團隊有這個唯一識別符。

143
00:19:13,000 --> 00:19:21,000
每個開發者賬戶都有其自己的碼簽名實體，證書，識別符，配置文件，設備等等。

144
00:19:21,000 --> 00:19:27,000
這個團隊ID將在你的開發隊伍下的建構設定中設定。

145
00:19:27,000 --> 00:19:30,000
讓我們在Xcode中看看這個。

146
00:19:30,000 --> 00:19:39,000
因此，如果我們使用簽名和功能表，我們可以設定這相同的團隊。

147
00:19:39,000 --> 00:19:50,000
如果我們到建構設定並前往簽署選項。

148
00:19:50,000 --> 00:19:54,000
再次提到，開發團隊和 Essential Developer LTD。

149
00:19:54,000 --> 00:19:59,000
如果我將鼠標懸停在這裡，您將看到我剛剛提到的確切ID。

150
00:19:59,000 --> 00:20:06,000
所以VRJ2等等。所以他們需要匹配。

151
00:20:06,000 --> 00:20:10,000
那就是團隊ID。

152
00:20:10,000 --> 00:20:18,000
除了團隊ID，我們還使用 Bundle identifiers，我們將立即看到這兩者如何連接。

153
00:20:18,000 --> 00:20:31,000
所以在這種情況下的BundleIdentifier，即com.essentialdeveloper.essentialappcase study，是一種用反向DNS格式表示的能夠唯一識別Bundle的ID。

154
00:20:31,000 --> 00:20:36,000
所有的 Bundle都有它。在應用程式的情況下，它們識別的是應用程式的 Bundle。

155
00:20:36,000 --> 00:20:41,000
您可以為您應用程式的不同變種使用不同的 Bundle identifiers。

156
00:20:41,000 --> 00:20:48,000
這只是您設定給Xcode建置設定的一個字串，所以您幾乎可以在此設定任何事物。

157
00:20:48,000 --> 00:20:59,000
現在，如果我們回到Apple開發者門戶網站，在識別碼下面有另一個實體叫做應用程式識別碼。

158
00:20:59,000 --> 00:21:11,000
所以應用程式識別碼是存在於這個開發者門戶上的一個實體，表示著一個團隊識別碼和一個Bundle ID的獨特結合。

159
00:21:11,000 --> 00:21:18,000
所以先前我展示的com.essentialdeveloper.essentialappcase學習案例。

160
00:21:18,000 --> 00:21:24,000
需要知道的重要事情是，應用程式識別碼在Apple系統中是獨一無二的。

161
00:21:24,000 --> 00:21:30,000
所以你不能創建一個已經存在於任何其他帳戶下的應用程式ID。

162
00:21:30,000 --> 00:21:42,000
而且，如果你有多個開發者帳戶，比如說一個公司開發者帳戶和一個企業帳戶，就像我剛才提到的情況，你不能在兩個帳戶上使用相同的app ID。

163
00:21:42,000 --> 00:21:48,000
所以如果別人已經註冊了一個app ID，你就不能再創建它。

164
00:21:48,000 --> 00:21:55,000
一個app ID也被用來指定那個app支援的平台。

165
00:21:55,000 --> 00:22:18,000
所以在我們的情況下，iOS、tvOS、watchOS，以及它允許的功能或服務。所以像是GameCenter、應用內購買、推送通知、與Apple簽名等等。

166
00:22:18,000 --> 00:22:30,000
儘管大部分的app ID都是明確的，像在這種情況下有一個非常明確的Bundle ID，也有可能創建一個帶有萬用字元的app ID。

167
00:22:30,000 --> 00:22:41,000
這是一個帶有萬用字元的 app ID。所以它並不使用明確的 Bundle ID，而是使用這種星號，基本上可以匹配任何 Bundle ID。

168
00:22:41,000 --> 00:22:51,000
而你在這裡可以發揮創意。因此，你可以做類似 com.essentialdeveloper.star 這樣的操作，它會匹配符合正則表達式的任何字符串。

169
00:22:51,000 --> 00:22:55,000
這就是其背後的邏輯。

170
00:22:55,000 --> 00:23:06,000
如果你有許多需要在本地部署的應用程序，像是小的概念驗證或是具有不同 Bundle ID 的同一應用的多種變體，這些萬用字元就很有用。

171
00:23:06,000 --> 00:23:11,000
因此，你可以為所有程序使用相同的萬用字元 app ID。

172
00:23:11,000 --> 00:23:17,000
但是，萬用字元 app ID 不能被用於透過 AppStore 部署應用程序。

173
00:23:17,000 --> 00:23:27,000
他們也不支援啟用像是推送通知等功能，這些都是非常明確，並需要明確的 Bundle ID。

174
00:23:27,000 --> 00:23:36,000
因此，他們的使用範疇有限，但對於內部建立和玩耍來說，有一個萬用的 app ID 是有用的。

175
00:23:36,000 --> 00:23:44,000
否則，基於任何 Bundle ID, 你需要在你的平台上建立一個 App ID, 這可能會很繁瑣。

176
00:23:44,000 --> 00:23:48,000
現在讓我們來談談設備識別碼。

177
00:23:48,000 --> 00:23:53,000
每部設備都有一個唯一的識別碼來識別該設備。

178
00:23:53,000 --> 00:24:07,000
為了要在一個設備上安裝開發或臨時構建，該設備必須列於Apple開發者門戶設備下，並加入用於簽署應用程式建立的證書檔案中。

179
00:24:07,000 --> 00:24:12,000
讓我們看看我們可以如何獲得這個設備識別碼。

180
00:24:12,000 --> 00:24:17,000
因此我們使用Xcode以及設備與模擬器視窗。

181
00:24:17,000 --> 00:24:29,000
你可以看到我的設備已連接，我在這看到我的設備識別碼，因此我可以複製並貼上到開發者入口網站。

182
00:24:29,000 --> 00:24:41,000
但如果你需要從不使用Xcode的同事那裡獲取設備ID，你可以在iOS裝置上安裝一些小應用程式，然後它們會顯示設備ID。

183
00:24:41,000 --> 00:24:45,000
你可以要求同事將其傳送給你。

184
00:24:45,000 --> 00:24:56,000
另外，如果你使用Firebase Distribution，他們會為你收集設備ID並通過郵件發送，這可能相當方便。

185
00:24:56,000 --> 00:25:01,000
现在让我们谈谈能力和权益。

186
00:25:01,000 --> 00:25:16,000
我們也有可能去開啟我們將要授予我們應用程式的能力。像是像來自蘋果的所有服務，例如CloudKit，GameCenter，推送通知，應用內購買等。

187
00:25:16,000 --> 00:25:31,000
為了讓這些服務能在我們的應用程式中啟用，我們需要確保他們在應用程式ID(App ID)中都已被啟用。就像我之前在蘋果開發者門戶網站以及應用程式ID和Xcode中顯示的。

188
00:25:31,000 --> 00:25:46,000
在Xcode的簽名與能力下，你會看到這個能力按鈕。如果我們點擊它，我們會再次看到我之前提到的所有服務，像是使用蘋果登錄，推送通知，iCloud等等。

189
00:25:46,000 --> 00:25:53,000
所以你需要新增每一個你將要使用的服務，否則他們預設會被禁用。

190
00:25:53,000 --> 00:26:09,000
如果我們作為練習添加一個，比如說我們添加推送通知，Xcode立即為我們創建了一個entitlements.plist檔案，就是這個檔案。

191
00:26:09,000 --> 00:26:17,000
並且其中包含一個APNS環境，這就是設置為開發模式的Apple Push Services環境。

192
00:26:17,000 --> 00:26:24,000
每當你添加一個新的功能，它將自動被添加到這個entitlements.plist檔案中。

193
00:26:24,000 --> 00:26:35,000
正如你所見，現在我在簽名和功能下面有推送通知作為一種功能。 如果有任何配置，它將在這裡顯示。

194
00:26:35,000 --> 00:26:48,000
所以在建構時，將比較這個entitlements檔案的內容和為app ID啟用的能力和服務。 如果它們不匹配，則建構將失敗。

195
00:26:48,000 --> 00:26:57,000
現在，將所有其他部分連接在一起的最後一塊拼圖是provisioning profile。

196
00:26:57,000 --> 00:27:15,000
Provisioning profile是一個關係實體，將一個app identifier、一個支援的設備清單、一組app能力與服務，以及一個或多個簽名證書組合在一起。

197
00:27:15,000 --> 00:27:30,000
這基本上就是provisioning profile的意義。它僅僅是將所有這些點連接在一起。因此，當您選擇要用於簽名的provisioning profile時，您會指定，好的，這是app identifier。

198
00:27:30,000 --> 00:27:41,000
這些是我將使用的能力。那些是可以用於簽名的證書。而這些則是可以用來安裝app的設備。

199
00:27:41,000 --> 00:27:54,000
如果我們切換回開發人員門戶，並前往檔案（profiles），我們可以看到這裡有一些類型。讓我們看看它們是什麼。

200
00:27:54,000 --> 00:28:00,000
Apple 支持以下類型的供應檔案（provision profiles）。首先，開發（development）。

201
00:28:00,000 --> 00:28:10,000
再次說明，就像開發證書一樣，開發檔案（development profile）被用於開發和調試，並且它支援多個開發證書。

202
00:28:10,000 --> 00:28:17,000
然後有 ad hoc 類型，它被用於限制人數和設備，內部分發應用程式。

203
00:28:17,000 --> 00:28:25,000
而這個數字是100個設備。所以你在 ad hoc 檔案中不能啟用超過100個設備。

204
00:28:25,000 --> 00:28:31,000
Ad hoc 供應檔案只能使用分發證書。

205
00:28:31,000 --> 00:28:43,000
然後有企業用的配置文件，這與點對點(ad hoc)非常相似。所以它也用來內部分發應用程式，但沒有對支援的設備數量有任何限制。

206
00:28:43,000 --> 00:28:49,000
實際上，你甚至不需要提及任何設備ID，它可以安裝在任何設備上。

207
00:28:49,000 --> 00:28:55,000
而且企業配置文件也需要使用分發證書。

208
00:28:55,000 --> 00:29:10,000
最後，用於TestFlight和AppStore的AppStore配置文件並未包含支援裝置的清單，而且它們也使用分發證書。

209
00:29:10,000 --> 00:29:20,000
所以，如果所有的鑰匙和證書都存在鑰匙鏈中，那麼配置文件就是存放在磁碟上的簡單的文件。

210
00:29:20,000 --> 00:29:31,000
如果你去到圖書館，你會找到這些，所以當前用戶的圖書館文件夾，移動設備，你將會看到一個供應檔案夾。

211
00:29:31,000 --> 00:29:39,000
這個包含所有在本地安裝的供應檔案，Xcode可以使用。

212
00:29:39,000 --> 00:29:47,000
如果在其中一個上我們點擊空間鍵，我們可以通過查找器快速檢視。

213
00:29:47,000 --> 00:29:56,000
首先，你會看到名字，EssentialAppCaseStudy，iOS配發，然後有效期資料，因為它們會過期。

214
00:29:56,000 --> 00:30:01,000
而且在這裡，方便起見，你會看到它在11個月內過期。

215
00:30:01,000 --> 00:30:11,000
然後有一個應用程式ID，就像這個案例，列Essential Developer EssentialAppCaseStudy，一個隊伍ID，一個平台等等。

216
00:30:11,000 --> 00:30:14,000
所以這是關於應用程式ID的所有信息。

217
00:30:14,000 --> 00:30:18,000
然後是一份權限和能力的列表。

218
00:30:18,000 --> 00:30:21,000
所以在我們的情況下，是APNS環境。

219
00:30:21,000 --> 00:30:30,000
這是Apple Push Services 的推送通知，鑰匙鏈，和所有其他啟用的服務。

220
00:30:30,000 --> 00:30:32,000
以及一個或多個證書。

221
00:30:32,000 --> 00:30:40,000
在這種情況下，只有一個證書，這就是為Essential Developer的iPhone分發。

222
00:30:40,000 --> 00:30:53,000
如果我們看看我本地安裝的另一個設定檔，你會看到這個也有專用設備部分，每個設備都有其ID規定。

223
00:30:53,000 --> 00:30:58,000
它也有多個開發證書。

224
00:30:58,000 --> 00:31:01,000
所以他們是有區別的。

225
00:31:01,000 --> 00:31:14,000
要記住的是，每次我們對設定檔進行更改，比如改變證書的列表或改變支援設備的列表，設定檔就會被更新和重生成。

226
00:31:14,000 --> 00:31:19,000
所以它將擁有一個不同的ID，就像這裡的唯一識別碼將會改變。

227
00:31:19,000 --> 00:31:27,000
所以基本上我們有了不同版本的那個配置檔案，即使名字仍然相同。

228
00:31:27,000 --> 00:31:39,000
這很重要，因為在幾分鐘內，我們將確實看到擁有同一配置檔案的多個版本可能導致一些問題。

229
00:31:39,000 --> 00:31:43,000
首先，讓我們來看看code signing是如何工作的。

230
00:31:43,000 --> 00:31:47,000
所以我們已經涵蓋所有我們需要進行code signing的不同部分。

231
00:31:47,000 --> 00:31:58,000
我們談論過金鑰，證書，app識別碼，團隊識別碼，設備識別碼，能力和權限，最後是provision profile。

232
00:31:58,000 --> 00:32:06,000
現在讓我們看看如何將所有這些概念混合在一起以及code signing如何工作。

233
00:32:06,000 --> 00:32:15,000
我們每次為裝置建構，因為我們不需要簽署模擬器的建構檔，所以需要一個有效的簽署證書。

234
00:32:15,000 --> 00:32:20,000
而且也需要一個有效的Provisioning Profiles。

235
00:32:20,000 --> 00:32:24,000
Code signing是在建構完成後進行。

236
00:32:24,000 --> 00:32:27,000
並且它有幾個前提條件。

237
00:32:27,000 --> 00:32:39,000
Provisioning Profiles必須安裝在焚庫行動裝置的Provisioing Profiles上，如我之前所示，並且Proivoisioning Profiles必須是有效的，所以不能過期或被撤銷。

238
00:32:39,000 --> 00:32:50,000
至少在Provisioning Profiles中特定的一個證書必須安裝在Keychain中，並且這個證書必須有其相對應的私鑰也安裝在Keychain中。

239
00:32:50,000 --> 00:32:56,000
同樣，證書必須是有效的，所以不能過期或被撤銷。

240
00:32:56,000 --> 00:33:04,000
應用程序的BundleIdentifier必須與Provisioning Profiles中的app ID相符。

241
00:33:04,000 --> 00:33:09,000
即使是萬用字元的 app ID，它們仍然需要匹配。

242
00:33:09,000 --> 00:33:17,000
而且來自Xcode的 entitlements File 必須與我們在app ID上選擇的功能和服務匹配。

243
00:33:17,000 --> 00:33:27,000
請記住，app的所有單獨組件都是簽名的，所以這意味著代碼塊，庫和框架，資源，billis等都是如此。

244
00:33:27,000 --> 00:33:32,000
在所有情況下，代碼簽名都由三部分組成。

245
00:33:32,000 --> 00:33:34,000
首先，一個封印。

246
00:33:34,000 --> 00:33:41,000
這是一個由代碼簽名軟體創建的各種代碼部分的校驗總和或哈希的集合。

247
00:33:41,000 --> 00:33:47,000
這個封印可以在驗證時用來檢測修改。

248
00:33:47,000 --> 00:33:51,000
因此，每個簽名的組件都將具有一個相應的封印。

249
00:33:51,000 --> 00:33:58,000
然後，程式簽章的軟體會使用簽署者的身份來加密該封印，以創建數位簽章。

250
00:33:58,000 --> 00:34:01,000
這保證了封印的完整性。

251
00:34:01,000 --> 00:34:07,000
數位簽章其實就是我們用於簽署的密鑰。

252
00:34:07,000 --> 00:34:09,000
然後最後是程式碼的要求。

253
00:34:09,000 --> 00:34:14,000
這些是關於驗證簽名的規則。

254
00:34:14,000 --> 00:34:18,000
有些是驗證者本身的，具體取決於其目標。

255
00:34:18,000 --> 00:34:23,000
其他的則由簽署者指定和附帶在程式碼的其餘部分。

256
00:34:23,000 --> 00:34:34,000
一個好例子是當Mac的門衛（Gatekeeper）在我們試圖運行一個剛下載且首次運行的應用程式時，就會詢問我們是否允許執行。

257
00:34:34,000 --> 00:34:39,000
這就是一個程式碼要求的好例子。

258
00:34:39,000 --> 00:34:48,000
現在，我們來看看我們的EssentialFeed案例研究專案，作為一個程式碼簽署設定完成的例子。

259
00:34:48,000 --> 00:34:57,000
所以首先對於除錯設定，你可以看到我們已經啟動了自動管理簽名。

260
00:34:57,000 --> 00:35:05,000
這讓Xcode可以生成、更新和刪除證書和配置檔，所以我們可以一直為除錯建構應用程式。

261
00:35:05,000 --> 00:35:14,000
當我們啟用自動簽名，Xcode不會使用我們手動創建的任何配置檔，但是會創建Xcode管理的配置檔。

262
00:35:14,000 --> 00:35:22,000
如同這個情況，你可以看到配置檔是由Xcode管理的，所以他們不會衝突。

263
00:35:22,000 --> 00:35:30,000
它使用一個在本地安裝的開發證書。在這個情況下就是Apple development，Bogdan的證書。

264
00:35:30,000 --> 00:35:41,000
啟用自動程式碼簽署對於除錯非常的便利，因為我們讓Xcode去處理我們內部除錯版本的程式碼簽署。

265
00:35:41,000 --> 00:35:51,000
如你所見，它只需要一個開發證書和一個分配配置文件，這在這種情況下由Xcode管理。

266
00:35:51,000 --> 00:35:58,000
您在簽名和能力中看到的值實際上是從構建設定值中填充的。

267
00:35:58,000 --> 00:36:04,000
所以我將通過簽名篩選，這樣你就不用看那麼多的建設設定。

268
00:36:04,000 --> 00:36:12,000
首先，讓我們看看代碼簽名的方式，你會看到它設定為自動的。

269
00:36:12,000 --> 00:36:19,000
所以這個是控制代碼簽名是自動還是手動完成。

270
00:36:19,000 --> 00:36:32,000
然後在分配配置文件選擇器上，它也設定為自動，因為Xcode需要選擇它要使用的配置文件。

271
00:36:32,000 --> 00:36:36,000
所以它並不綁定到特定的配置文件名稱。

272
00:36:36,000 --> 00:36:44,000
然後這裡另一個重要的設定是code signing identity，它將指定我們用來簽名的證書。

273
00:36:44,000 --> 00:36:52,000
我們可以在這裡設定一個非常特定的證書，比如，我不知道，Apple development，Bogdan的，和一個特定的ID。

274
00:36:52,000 --> 00:37:02,000
或者我們可以用一種更通用的開發或分發指定符，像在我們的案例中。

275
00:37:02,000 --> 00:37:10,000
所以我們已經設定了debug configuration來使用Apple development，這意味著它將匹配任何本地安裝的開發證書。

276
00:37:10,000 --> 00:37:14,000
所以這給你一點靈活性。

277
00:37:14,000 --> 00:37:26,000
如果你想要設定這個，我不知道，你有一個開發證書，而你的同事在另一台機器上有另一個開發證書，那麼你就不需要改變設定來進行建構。

278
00:37:26,000 --> 00:37:31,000
所有人的開發證書都會相符。

279
00:37:31,000 --> 00:37:37,000
當然，這些證書必須包含在許可檔案中，就像我們說過的。

280
00:37:37,000 --> 00:37:43,000
對於要與團隊外部共享的List建立，我們的要求更嚴格些。

281
00:37:43,000 --> 00:37:46,000
所以我們已經停用了自動簽名。

282
00:37:46,000 --> 00:37:50,000
所以實際上像你在這裡看到的那樣使用手動程式碼簽名。

283
00:37:50,000 --> 00:37:56,000
並且我們依賴手動指定使用哪個許可檔案。

284
00:37:56,000 --> 00:38:05,000
因此，我們特別為List配置和EssentialAppCaseStudy iOS分發檔案使用這種方式。

285
00:38:05,000 --> 00:38:11,000
這是一個AppStore許可檔案，所以需要一個分發證書才能使用。

286
00:38:11,000 --> 00:38:21,000
在這種情況下，Xcode將依照指示使用已安裝的分發證書作為程式碼簽名身份，該身份被設定為iOS分發。

287
00:38:21,000 --> 00:38:30,000
所以，為了上傳構建到AppStoreConnect，Xcode需要一個分佈證書和一個AppStore規定檔案。 

288
00:38:30,000 --> 00:38:34,000
讓我們對該項目進行一次簡單的構建。

289
00:38:34,000 --> 00:38:38,000
所以我將執行一條命令B。 

290
00:38:38,000 --> 00:38:41,000
這將構建調試版本。 

291
00:38:41,000 --> 00:38:55,000
由於我剛創建了一個新的開發證書，Xcode自動將其添加到我們的開發規定檔案，我需要允許代碼簽名使用我的新密鑰。

292
00:38:55,000 --> 00:38:57,000
所以這是第一次發生的。

293
00:38:57,000 --> 00:39:01,000
所以我將輸入我的Keychain密碼並按始終允許。

294
00:39:01,000 --> 00:39:05,000
大多數時間，您將被提示兩次這樣做。

295
00:39:05,000 --> 00:39:08,000
現在我看到構建成功了。

296
00:39:08,000 --> 00:39:16,000
如果我們使用報告導航器來檢查構建日誌，我只想關注簽名EssentialApp部分。

297
00:39:16,000 --> 00:39:19,000
所以我將擴展這個建構任務。

298
00:39:19,000 --> 00:39:34,000
我們可以看到這裡的代碼簽名工作正常，並且它使用了簽名身份，Apple development，bookdance 證書，以及這是配套的配置檔案。

299
00:39:34,000 --> 00:39:42,000
這樣我們就能準確知道哪個證書和配置檔案被用於代碼簽名。

300
00:39:42,000 --> 00:39:45,000
如果我們使用產品菜單。

301
00:39:45,000 --> 00:39:50,000
並使用在 Finder 中顯示建構文件夾。

302
00:39:50,000 --> 00:39:54,000
我們將看到最近建構的 app 的建構文件夾。

303
00:39:54,000 --> 00:39:58,000
所以如果我們右鍵點擊顯示包內容。

304
00:39:58,000 --> 00:40:04,000
我想在 app Bundle 內部提到兩點。

305
00:40:04,000 --> 00:40:11,000
首先，這裡有一個包含代碼資源的代碼簽名文件夾。

306
00:40:11,000 --> 00:40:16,000
這是一個包含所有被簽名的代碼資源的文字文件。

307
00:40:16,000 --> 00:40:29,000
所以程式碼框架、資產，它們都在這裡有一個入口，也有從程式碼簽名得到的封印，您可以在這份文件中找到。

308
00:40:29,000 --> 00:40:36,000
而另一件事是用於簽名的供應規範檔案被嵌入到 app Bundle中。

309
00:40:36,000 --> 00:40:39,000
所以它就是那個。

310
00:40:39,000 --> 00:40:43,000
我之前展示過的檔案。

311
00:40:43,000 --> 00:40:51,000
如果在某一時刻，您有一個 app Bundle 或 app 存檔，而您想知道用來簽名的是哪個檔案。

312
00:40:51,000 --> 00:41:00,000
您只需要檢視它，進入並查看嵌入的檔案。

313
00:41:00,000 --> 00:41:03,000
所以回到 Xcode。

314
00:41:03,000 --> 00:41:06,000
這次我想要。

315
00:41:06,000 --> 00:41:10,000
做一個將使用發行設定的存檔。

316
00:41:10,000 --> 00:41:20,000
所以我們來看看 hvordan det fungerer. 我將使用產品菜單裡的檔案。

317
00:41:20,000 --> 00:41:24,000
成功了。

318
00:41:24,000 --> 00:41:28,000
回到Xcode以進行相同的練習。

319
00:41:28,000 --> 00:41:33,000
那麼我們擴展了EssentialApp任務。

320
00:41:33,000 --> 00:41:42,000
我們看到這次的簽名身份是iPhone分發證書和EssentialAppCaseStudy設定檔。

321
00:41:42,000 --> 00:41:48,000
現在讓我們通過上傳到AppStore來完成這個練習。

322
00:41:48,000 --> 00:41:54,000
所以我剛創建的這個存檔，我將點擊DistributeApp。

323
00:41:54,000 --> 00:42:02,000
使用AppStoreConnect，因為我想上傳到AppStoreConnect。我有上傳或輸出的兩種選擇，所以我選擇上傳。

324
00:42:02,000 --> 00:42:07,000
Xcode正在與AppStoreConnect API溝通。

325
00:42:07,000 --> 00:42:13,000
在上傳發生之前，我在這裡有幾個選項，我想簡短提及。

326
00:42:13,000 --> 00:42:16,000
首先我們有一個包括Bitcode的選擇。

327
00:42:16,000 --> 00:42:23,000
所以如果應用程序支持Bitcode，我們需要保持這個選項打開，這樣Bitcode和AppCode就能一起上傳。

328
00:42:23,000 --> 00:42:32,000
同時，這將使AppStoreConnect能夠處理Bitcode並在上傳後生成新的D縫。

329
00:42:32,000 --> 00:42:45,000
然後下一個選項上傳你的應用程序的符號，這與是否啟用Bitcode無關，將會上傳你的應用程序的調試符號到Apple AppStoreConnect 服務。

330
00:42:45,000 --> 00:42:53,000
而如果你不上傳應用程序的符號，你將無法從Apple的報告服務中得到符號化的垃圾報告。

331
00:42:53,000 --> 00:43:05,000
最後，這個第三選項是一個工具，幫助你確保版本和構建號符合要求，即他們是逐個增加的。

332
00:43:05,000 --> 00:43:20,000
所以每個建構都有不同的版本。在我們的情況下，它已經偵測到已經有1.0 41的建構，所以它會將我的賬單號碼改為1.0 42。

333
00:43:20,000 --> 00:43:36,000
所以我會點擊下一步，我們只需要允許使用分發證書，因為它只有一個，我們需要選擇要使用哪個資訊描述檔。只有一個匹配我的 Bundle ID。

334
00:43:36,000 --> 00:43:40,000
然後我將點擊下一步，希望這不會花太久時間。

335
00:43:40,000 --> 00:43:49,000
首先，我將看到二進製檔的摘要，甚至包括內嵌的二進製檔，它們也被簽名。

336
00:43:49,000 --> 00:43:54,000
我們看到有 iOS 分發證書。

337
00:43:54,000 --> 00:44:03,000
然後上傳，你可能已經自己做過這個練習幾次。這是你如何將構建上傳到AppStoreConnect。

338
00:44:03,000 --> 00:44:11,000
在那個時候，你可以將其在TestFlight內部分發，或者直接在AppStore上發布。

339
00:44:11,000 --> 00:44:18,000
好的，所以這就是你如何上傳到AppStoreConnect。

340
00:44:18,000 --> 00:44:27,000
現在我想經過幾種程式碼簽名可能出錯的場景。

341
00:44:27,000 --> 00:44:36,000
首先，我將去配置檔案資料夾，所以在庫存手機設備配置檔案資料夾下。

342
00:44:36,000 --> 00:44:42,000
我會選擇這個EssentialAppCaseStudy作為分發配置檔，並將其移到桌面。

343
00:44:42,000 --> 00:44:51,000
非常簡單的意外可以發生。現在我將再次試图進行檔案歸檔。

344
00:44:51,000 --> 00:44:58,000
你可以立即看到Xcode偵測到配置文件丟失，並且我有下載它的選項。

345
00:44:58,000 --> 00:45:04,000
這非常酷，因為在過去的日子裡，你不會得到這樣的訊息。

346
00:45:04,000 --> 00:45:09,000
所以你對配置文件是否有效一無所知，只是它沒有安裝在你的機器上。

347
00:45:09,000 --> 00:45:13,000
所以當然如果我按取消，那我就得到這些錯誤。

348
00:45:13,000 --> 00:45:20,000
所以我可以使用Xcode提供的下載按鈕或者手動下載它。

349
00:45:20,000 --> 00:45:24,000
我只是把這個放回這裡，這樣我的構建就可以再次運作。

350
00:45:24,000 --> 00:45:30,000
但是，當機器上有同一個設定檔的多個版本時，常常會出現問題。

351
00:45:30,000 --> 00:45:38,000
正如我提到過的，對設定檔進行任何更改都將重新生成設定檔並發出新的設定檔ID。

352
00:45:38,000 --> 00:45:45,000
因此，如果你的供應配置檔建立設定正在使用一個特定的配置名稱，就像我們為分發所做的那樣

353
00:45:45,000 --> 00:45:50,000
那麼擁有該名稱的所有本地配置檔都將是符合的。

354
00:45:50,000 --> 00:45:54,000
而根據我的經驗，Xcode並不總是使用最新的那個。

355
00:45:54,000 --> 00:46:01,000
因此，你可能有不同版本的同一配置檔在本地安裝，並且你可能會看到問題。

356
00:46:01,000 --> 00:46:14,000
而一個常見的問題是，你本地安裝了 ad hoc 配置檔的一個版本，然後你的團隊獲得了一個新的裝置，並希望將其新增到配置文件中。

357
00:46:14,000 --> 00:46:25,000
所以你會去 AppStore 應用門戶添加新裝置，刷新配置檔案，然後透過 Xcode 或手動下載並安裝配置檔案。

358
00:46:25,000 --> 00:46:33,000
而現在你至少有兩個版本的相同ad hoc設定檔，其中一個包含這個新的裝置，另一個則沒有。

359
00:46:33,000 --> 00:46:39,000
就我所看到的，在許多情況下，Xcode仍將使用舊的設定檔版本。

360
00:46:39,000 --> 00:46:47,000
你會得到一個OK建構，所以該建構會成功，但你將無法在新裝置上安裝這個應用程式。

361
00:46:47,000 --> 00:46:57,000
對於某些人來說，這可能非常麻煩，就像是好吧，我剛剛加入了裝置，為什麼Xcode不允許你安裝它，因為它就在那裡。

362
00:46:57,000 --> 00:47:03,000
但其實問題是，Xcode無法知道您想使用哪一個設定檔。

363
00:47:03,000 --> 00:47:08,000
所以這裡的解決方法，以及我始終建議你做的是進行清理。

364
00:47:08,000 --> 00:47:24,000
所以這個規定的設定檔資料夾，我傾向於保持它盡可能的乾淨，所以我會定期檢查它，如果我看到同一個設定檔的多個版本，我會刪掉較舊的那一個，因為Xcode不會替你做這個事情。

365
00:47:24,000 --> 00:47:28,000
如我所說，你可能會遇到麻煩。

366
00:47:28,000 --> 00:47:35,000
另一個常見的情況是缺少私鑰。

367
00:47:35,000 --> 00:47:49,000
你可以看到憑證，但是缺少私鑰。因此對於這個練習，我將會把這個鑰匙匯出為P12，因為我現在要刪除它。

368
00:47:49,000 --> 00:47:54,000
所以我只是進去並刪除我的鑰匙。

369
00:47:54,000 --> 00:47:59,000
所以你看得到憑證，但沒有披露任何資訊，因為密鑰遺失了私鑰。

370
00:47:59,000 --> 00:48:05,000
所以我回到Xcode並嘗試再次存檔。

371
00:48:05,000 --> 00:48:08,000
固然我得到了一次建造失敗。

372
00:48:08,000 --> 00:48:16,000
這次的錯誤是沒有找到符合這支隊伍ID的簽名證書，原因是由於缺少私鑰。

373
00:48:16,000 --> 00:48:29,000
所以這是一種常見的情況，例如你可能從Apple developer portal下載證書，但你沒有私鑰，代碼簽名就會無法工作。所以你需要私鑰。

374
00:48:29,000 --> 00:48:38,000
既然我現在已經有了，或者說有人通過P12發送給我，我將進行導入。

375
00:48:38,000 --> 00:48:50,000
如果我檢查Keychain，你會看到私鑰再次可以用，我可以再次進行檔案封存。

376
00:48:50,000 --> 00:49:05,000
這還有另一個常見的問題。所以每當出現這種情況，只需確保你去檢查Keychain並在那裡檢查鑰匙，你就最可能看到問題。

377
00:49:05,000 --> 00:49:12,000
此外，你會看到這些證書有一個到期日。

378
00:49:12,000 --> 00:49:15,000
它們有效期為一年，然後就會過期。

379
00:49:15,000 --> 00:49:19,000
一旦它們過期，你就不能再用它們來進行程式碼簽名。

380
00:49:19,000 --> 00:49:28,000
另外，當證書到期時，與之關聯的供應配置文件會被Apple自動無效。

381
00:49:28,000 --> 00:49:37,000
並且用這組供應配置文件和證書簽署的任何構建也會被無效，並且無法再安裝。

382
00:49:37,000 --> 00:49:45,000
所以，即使你有IPA或者.app或者檔案庫，你也無法在設備上安裝這個。

383
00:49:45,000 --> 00:49:53,000
這裡的例外是AppStore的構建，它們永不過期。所以只有內部構建會受到影響。

384
00:49:53,000 --> 00:49:58,000
要重新生成過期的證書，你有兩種選擇。

385
00:49:58,000 --> 00:50:05,000
您可以選擇使其失效，然後如我所示，從頭開始創建一個新的證書。

386
00:50:05,000 --> 00:50:14,000
或者，您可以進行一些優化，並使用您在去年使用的相同證書簽名請求。

387
00:50:14,000 --> 00:50:16,000
所以您需要存儲這個。

388
00:50:16,000 --> 00:50:27,000
優點是，如果您使用相同的CSR，您只需重新生成證書，並且與CSR一起生成的公鑰和私鑰將保持不變。

389
00:50:27,000 --> 00:50:33,000
在這種情況下，如果您與您的團隊分享過這些私鑰，那麼您不需要再次分享它們。

390
00:50:33,000 --> 00:50:35,000
所以他們已經擁有它們。

391
00:50:35,000 --> 00:50:49,000
如果證書被重新生成，他們只需要去 Apple 開發者平台重新下載，然後就能再次構建。對我來說，這很方便。

392
00:50:49,000 --> 00:51:00,000
就像我建議管理 provisioning profiles 一樣，我真的建議保持一個乾淨的 Keychain，並定期刪除過期的證書。

393
00:51:00,000 --> 00:51:09,000
如果你看到已經過期的證書，請確保你已經刪除它們，而如果你想使用我提到的 CSR 技巧，也就是使用相同的 CSR 多於一次

394
00:51:09,000 --> 00:51:16,000
確保在刪除證書的時候只刪除證書，不要刪除私鑰，因為你將需要它。

395
00:51:16,000 --> 00:51:25,000
如你所見，你可以手動管理證書和 provisioning profiles，並且 Xcode 也可以自動化部分操作。

396
00:51:25,000 --> 00:51:31,000
我也想提到像Fastlane這樣的工具，它可以提供一些更多的自動化。

397
00:51:31,000 --> 00:51:42,000
所以請特別查看Fastlane Match。它可能會幫助您通過統一的存儲庫來管理您的證書和配置文件。

398
00:51:42,000 --> 00:51:52,000
主程式中也有一堂講座論述持續交付，我們在那裡展示如何自動化部署並安全地將證書加入到CD流程中。

399
00:51:52,000 --> 00:51:58,000
請一定要查看，我會將其連結到講座頁面。

400
00:51:58,000 --> 00:52:01,000
講完了。謝謝。

401
00:52:01,000 --> 00:52:10,000
如果有任何問題，我很樂意回答。

402
00:52:10,000 --> 00:52:18,000
當然，Vitaly。很高興你覺得它有用。

403
00:52:18,000 --> 00:52:23,000
Andreas問你是否使用過Match？使用它沒問題嗎？

404
00:52:23,000 --> 00:52:26,000
所以，我用過Match。

405
00:52:26,000 --> 00:52:35,000
我總是建議你們不要首先在你們的工作流程中增加許多額外的工具，如第三方工具。

406
00:52:35,000 --> 00:52:45,000
但是當你有一個大團隊，並且你正在處理許多證書，許多檔案，並需要確保

407
00:52:45,000 --> 00:52:51,000
每個人或開發者或CI機器都使用相同版本的證書或檔案時，Match可能會很有用。

408
00:52:51,000 --> 00:53:00,000
那麼，Match可以有幫助，因為它基本上使用一個集中的存儲庫來存儲所有這些證書和檔案的加密版本。

409
00:53:00,000 --> 00:53:04,000
並且，他們默認為此使用一個git存儲庫。

410
00:53:04,000 --> 00:53:12,000
所以它可能是有用的。我已經見過在大團隊中它非常實用。

411
00:53:12,000 --> 00:53:27,000
但當然，還需考慮新增工具可能會有時好有時壞的問題，你或許得深入研究其細節，或是試著維護它之類的。

412
00:53:27,000 --> 00:53:32,000
所以確保你權衡了利弊。

413
00:53:32,000 --> 00:53:36,000
但是，它有可能是有用的。

414
00:53:36,000 --> 00:53:39,000
還有其他問題嗎？

415
00:53:39,000 --> 00:53:45,000
Andreas表示他對使用Fastlane Match的開銷一直感到猶豫不決。

416
00:53:45,000 --> 00:53:53,000
的確，這是一個開銷，如果你以前從未使用過Fastlane，設置起來並不那麼直接。

417
00:53:53,000 --> 00:54:01,000
所以，把所有的部分放在一起需要一段時間，而且管理起來也可能會有困難。

418
00:54:01,000 --> 00:54:12,000
所以有時候我看到這種情況發生，像是一個開發者在團隊中設置 Fastlane，然後他們離開團隊，沒有其他人知道如何處理那個問題。

419
00:54:12,000 --> 00:54:23,000
所以他們基本上陷入困境，並不得不對那個設置進行猜測，並嘗試去理解它。

420
00:54:23,000 --> 00:54:37,000
所以我想說只有在需要的時候才添加它。所以如果你有一個十分正當的理由，就像使用任何其他的第三方工具或框架一樣。

421
00:54:37,000 --> 00:54:49,000
我不會從這些開始，只是自然地開發，如果我們看到一個反覆出現的問題，那麼我們可以探索一個工具來解決它。

422
00:54:49,000 --> 00:54:52,000
就這樣。

423
00:54:52,000 --> 00:54:57,000
好的。感謝你的參與並且陪伴到最後。

424
00:54:57,000 --> 00:55:24,000
祝你有美好的一天。