

1
00:00:00,933 --> 00:00:04,533
你好 Mike，大家好，嘿 Caio

2
00:00:04,533 --> 00:00:07,100
在這次的講座中，我們將要修復一個

3
00:00:07,100 --> 00:00:08,633
可能的錯誤

4
00:00:08,633 --> 00:00:12,233
在 did end displaying cell的方法中

5
00:00:12,233 --> 00:00:15,200
好的，所以問題是什麼

6
00:00:15,200 --> 00:00:16,700
表格視圖的操作方式

7
00:00:16,700 --> 00:00:18,700
當你在螢幕上渲染單元格時

8
00:00:18,700 --> 00:00:20,300
例如你正在滾動

9
00:00:20,300 --> 00:00:23,666
表格 UIKit 會調用 cell for row

10
00:00:23,666 --> 00:00:27,033
在 indexPath來創造單元格然後

11
00:00:27,033 --> 00:00:29,333
在添加到視圖層次結構之前

12
00:00:29,333 --> 00:00:30,233
它將會調用

13
00:00:30,233 --> 00:00:34,300
將在 row at indexPath顯示單元格

14
00:00:34,300 --> 00:00:36,300
並且當單元格從

15
00:00:36,300 --> 00:00:38,066
表格視圖層次結構中被移除時

16
00:00:38,066 --> 00:00:40,066
例如當你滾動，單元格

17
00:00:40,066 --> 00:00:41,833
超出範圍

18
00:00:41,833 --> 00:00:44,300
超出螢幕，它會調用 did end

19
00:00:44,300 --> 00:00:45,100
顯示

20
00:00:45,100 --> 00:00:49,100
單元格，並且在 did end displaying cell

21
00:00:49,100 --> 00:00:52,300
我們取消為那個

22
00:00:52,300 --> 00:00:52,933
單元格

23
00:00:52,933 --> 00:00:56,633
在 indexPath加載圖像，其獲得模型

24
00:00:56,633 --> 00:01:00,633
在那個 indexPath並取消載入

25
00:01:00,633 --> 00:01:02,933
所以這非常有效率，因為當這個

26
00:01:02,933 --> 00:01:04,933
cell從視圖階層中移出時

27
00:01:04,933 --> 00:01:06,766
我們停止加載圖片，因為我們

28
00:01:06,766 --> 00:01:08,000
不再需要它了

29
00:01:08,000 --> 00:01:11,333
是的，問題在於UIKit也會

30
00:01:11,333 --> 00:01:14,133
調用did end displaying cell

31
00:01:14,133 --> 00:01:18,466
當你調用reload data的時候

32
00:01:18,466 --> 00:01:20,466
比如，想像一下我們創建了一個

33
00:01:20,466 --> 00:01:21,500
view controller

34
00:01:21,500 --> 00:01:24,533
我們告訴它顯示2個cell

35
00:01:24,533 --> 00:01:25,333
所以我們傳遞

36
00:01:25,333 --> 00:01:29,033
一個帶有2個cell controllers的模型

37
00:01:29,033 --> 00:01:31,666
然後我們調用reload data並且我們將要

38
00:01:31,666 --> 00:01:32,466
渲染

39
00:01:32,466 --> 00:01:35,033
那兩個cell，但現在假設

40
00:01:35,033 --> 00:01:36,233
用戶再次要求

41
00:01:36,233 --> 00:01:39,266
重新加載feed，但現在我們得到的是

42
00:01:39,266 --> 00:01:42,366
0個cell，所以是一個空陣列

43
00:01:42,366 --> 00:01:44,866
例如，如果有人從feed中移除了圖像

44
00:01:44,866 --> 00:01:46,066
那麼當我們告訴UIKit重新加載

45
00:01:46,066 --> 00:01:48,866
數據時

46
00:01:48,866 --> 00:01:49,600
它將移除原本在螢幕上的2個cell

47
00:01:49,600 --> 00:01:51,666
並調用did end displaying cell

48
00:01:51,666 --> 00:01:53,266
結束顯示這兩個cell

49
00:01:53,266 --> 00:01:56,300
並呼叫did end displaying cell的尾聲。

50
00:01:56,300 --> 00:01:59,600
同時對兩個indexPaths，但是現在

51
00:01:59,600 --> 00:02:02,766
如果我們嘗試取消特定單元格控制器的加載請求

52
00:02:02,766 --> 00:02:06,000
對於那個特定的 cell controller，這

53
00:02:06,000 --> 00:02:06,633
會導致崩潰

54
00:02:06,633 --> 00:02:09,733
因為我們的 table model array 中沒有任何的 cell controllers

55
00:02:09,733 --> 00:02:12,533
這就結束了 UI

56
00:02:12,533 --> 00:02:14,466
Kit 將呼叫 ddn displaying cell

57
00:02:14,466 --> 00:02:17,733
在模型更新後並且

58
00:02:17,733 --> 00:02:19,200
現在是空的

59
00:02:19,200 --> 00:02:21,333
我們從兩個項目過渡到

60
00:02:21,333 --> 00:02:22,233
0

61
00:02:22,233 --> 00:02:25,833
這意味著我們將嘗試獲得一個值

62
00:02:25,833 --> 00:02:28,633
對於一個不再存在的索引

63
00:02:28,633 --> 00:02:30,066
這將導致崩潰

64
00:02:30,066 --> 00:02:33,733
帶有一個索引超出範圍的錯誤，是的 

65
00:02:33,733 --> 00:02:35,433
所以這現在並未崩潰

66
00:02:35,433 --> 00:02:37,100
因為我們無法刪除 feed 中的圖片，但我們不能假設

67
00:02:37,100 --> 00:02:39,100
後端將總是像

68
00:02:39,100 --> 00:02:41,033
這樣運作

69
00:02:41,033 --> 00:02:42,066
這

70
00:02:42,066 --> 00:02:45,266
好吧，我們需要修復這個，但首先讓我們

71
00:02:45,266 --> 00:02:48,400
先證明這個 bug 確實存在

72
00:02:48,400 --> 00:02:50,933
好，這裡是我們證明的測試

73
00:02:50,933 --> 00:02:52,300
我們現在正在進行渲染

74
00:02:52,300 --> 00:02:54,933
在螢幕上成功載入資料

75
00:02:54,933 --> 00:02:57,500
我們來複製它

76
00:02:57,500 --> 00:03:00,066
並命名為成功渲染

77
00:03:00,066 --> 00:03:01,033
已載入

78
00:03:01,033 --> 00:03:04,700
非空的內容後呈現空內容

79
00:03:04,700 --> 00:03:07,833
這樣說起來有意義

80
00:03:07,833 --> 00:03:10,633
對，就是這樣，我們不在乎

81
00:03:10,633 --> 00:03:11,200
數值

82
00:03:11,200 --> 00:03:13,666
在這個測試中，我們只需要創建2個

83
00:03:13,666 --> 00:03:16,133
圖像

84
00:03:16,133 --> 00:03:19,666
讓我們在第一次載入時載入這兩個圖像

85
00:03:19,666 --> 00:03:23,200
載入

86
00:03:23,200 --> 00:03:26,533
然後，如果我們再次載入，但收到的是

87
00:03:26,533 --> 00:03:27,733
一個空的

88
00:03:27,733 --> 00:03:30,766
圖像陣列，它應該呈現一個

89
00:03:30,766 --> 00:03:31,500
空的

90
00:03:31,500 --> 00:03:35,266
資料內容，就這樣，它不應該崩潰

91
00:03:35,266 --> 00:03:40,133
讓我們來執行一個測試，它通過了

92
00:03:40,133 --> 00:03:43,200
所以我們確實有這個問題，但這個測試

93
00:03:43,200 --> 00:03:45,100
已通過

94
00:03:45,100 --> 00:03:48,300
好，那怎麼可能呢？還是需要我們

95
00:03:48,300 --> 00:03:50,866
了解UIKit是如何運作的

96
00:03:50,866 --> 00:03:53,266
當你告訴一個表格視圖需要重新載入時，為了

97
00:03:53,266 --> 00:03:54,000
效能

98
00:03:54,000 --> 00:03:58,000
的原因，它並不會立即執行

99
00:03:58,000 --> 00:04:00,066
所以當你在進行測試而你

100
00:04:00,066 --> 00:04:01,200
想確保的是

101
00:04:01,200 --> 00:04:02,866
你實際上呈現的是

102
00:04:02,866 --> 00:04:04,466
表格視圖的單元格

103
00:04:04,466 --> 00:04:07,566
我們需要迫使表格視圖去

104
00:04:07,566 --> 00:04:08,633
進行佈局

105
00:04:08,633 --> 00:04:12,400
透過調用 layoutIfNeeded

106
00:04:12,400 --> 00:04:17,600
並讓我們運行主要的 RunLoop

107
00:04:17,600 --> 00:04:21,900
好，讓我們再次運行測試

108
00:04:21,900 --> 00:04:24,700
砰，現在它確實在我們

109
00:04:24,700 --> 00:04:25,333
想要的地方崩潰了

110
00:04:25,333 --> 00:04:28,633
看那個，對，致命錯誤

111
00:04:28,633 --> 00:04:31,733
索引超出範圍，那麼現在透過測試我們

112
00:04:31,733 --> 00:04:33,433
能夠複製

113
00:04:33,433 --> 00:04:35,666
我們在

114
00:04:35,666 --> 00:04:36,633
生產中會出現的問題

115
00:04:36,633 --> 00:04:39,433
如果伺服器返回的答覆

116
00:04:39,433 --> 00:04:41,033
有少於物品

117
00:04:41,033 --> 00:04:45,600
然後我們之前在螢幕上看到的，就是這樣

118
00:04:45,600 --> 00:04:48,000
解決它的簡單方式是加上一個

119
00:04:48,000 --> 00:04:48,700
警衛條件

120
00:04:48,700 --> 00:04:54,700
來檢查邊界

121
00:04:54,700 --> 00:04:57,266
好的，測試現在通過了，但是這不是

122
00:04:57,266 --> 00:04:59,500
我們真正想要的

123
00:04:59,500 --> 00:05:01,266
因為 UIKit 在我們改變模型後會調用 did end display

124
00:05:01,266 --> 00:05:03,733
in cell

125
00:05:03,733 --> 00:05:07,333
這意味著我們將會呼叫取消

126
00:05:07,333 --> 00:05:10,066
在新的模型上取消，而不是舊的模型上

127
00:05:10,066 --> 00:05:10,466
對

128
00:05:10,466 --> 00:05:13,433
確實，我們不希望這樣子

129
00:05:13,433 --> 00:05:14,466
這解決了問題

130
00:05:14,466 --> 00:05:16,466
但或許最好有個參考

131
00:05:16,466 --> 00:05:18,133
指向正在加載的視圖

132
00:05:18,133 --> 00:05:20,000
控制器

133
00:05:20,000 --> 00:05:23,100
好，那我們建立一個新的屬性

134
00:05:23,100 --> 00:05:27,100
私有變量 loading controllers

135
00:05:27,100 --> 00:05:29,600
可以是一個 indexPath 的字典

136
00:05:29,600 --> 00:05:30,233
作為鍵值

137
00:05:30,233 --> 00:05:34,700
和 FeedImageCellController 為值

138
00:05:34,700 --> 00:05:37,600
每次我們得到一個新的模型去

139
00:05:37,600 --> 00:05:38,400
顯示

140
00:05:38,400 --> 00:05:42,466
我們重置它

141
00:05:42,466 --> 00:05:45,433
而「現在取消」將是加載

142
00:05:45,433 --> 00:05:46,133
的控制器

143
00:05:46,133 --> 00:05:49,900
如果在 indexPath 有任何的話

144
00:05:49,900 --> 00:05:52,633
我們可以將它設為nil，因為在

145
00:05:52,633 --> 00:05:53,266
您取消後

146
00:05:53,266 --> 00:05:54,800
您不希望再參照它

147
00:05:54,800 --> 00:05:56,633
好的，很好

148
00:05:56,633 --> 00:05:58,133
現在我們也需要持有一個參考

149
00:05:58,133 --> 00:06:00,133
對 cell controller 的參照，我們可以這麼做

150
00:06:00,133 --> 00:06:01,600
在這裡

151
00:06:01,600 --> 00:06:04,066
controller 就是在

152
00:06:04,066 --> 00:06:05,333
indexPath 的 cell controller


153
00:06:05,333 --> 00:06:11,333
在加載控制器中

154
00:06:11,333 --> 00:06:14,400
好的，讓我們執行測試

155
00:06:14,400 --> 00:06:18,466
通過了，好的，讓我們提交

156
00:06:18,466 --> 00:06:21,500
好的，因此修復了一個潛在的錯誤

157
00:06:21,500 --> 00:06:24,233
在取消did end時的請求

158
00:06:24,233 --> 00:06:26,133
顯示單元格方法

159
00:06:26,133 --> 00:06:28,800
此方法在調用之後被調用

160
00:06:28,800 --> 00:06:30,300
重新加載數據

161
00:06:30,300 --> 00:06:32,800
所以我們將取消請求

162
00:06:32,800 --> 00:06:34,233
在錯誤的模型中

163
00:06:34,233 --> 00:06:36,633
或者在模型有較少情況下崩潰

164
00:06:36,633 --> 00:06:37,600
項目

165
00:06:37,600 --> 00:06:40,300
比先前的模型，是的你需要

166
00:06:40,300 --> 00:06:41,033
小心

167
00:06:41,033 --> 00:06:43,900
在取消did end時的請求

168
00:06:43,900 --> 00:06:45,100
顯示單元格

169
00:06:45,100 --> 00:06:48,300
表視圖的方法

170
00:06:48,300 --> 00:06:50,800
這就是修復漏洞的過程

171
00:06:50,800 --> 00:06:52,800
在你的代碼庫中

172
00:06:52,800 --> 00:06:55,266
用失敗的測試證明錯誤存在

173
00:06:55,266 --> 00:06:56,800
通過測試

174
00:06:56,800 --> 00:06:59,666
並在沒有失敗測試的情況下重構

175
00:06:59,666 --> 00:07:00,633
你不能證明

176
00:07:00,633 --> 00:07:03,166
錯誤存在，你不能證明你

177
00:07:03,166 --> 00:07:04,533
實際上已經修復它

178
00:07:04,533 --> 00:07:08,300
精確地說，這正是TDD過程

179
00:07:08,300 --> 00:07:10,533
好的，這堂課就到這裡了

180
00:07:10,533 --> 00:07:11,833
我們下次再見

181
00:07:11,833 --> 00:07:21,800
下次再見，大家再會