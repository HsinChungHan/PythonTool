

1
00:00:00,960 --> 00:00:08,720
大家好，歡迎大家。我們將繼續我們的系列，深入研究

2
00:00:08,720 --> 00:00:18,640
Xcode的建置設定和它們隱藏的秘密。讓我們開始吧。我們將解釋為何項目

3
00:00:18,640 --> 00:00:27,840
和目標可以設定相同的設定，並依照情況選擇使用哪一個。我們將探索

4
00:00:27,840 --> 00:00:35,360
可用的建置設定查看器樣式。我們將通過建置設定

5
00:00:35,360 --> 00:00:43,120
編輯器使用的慣例。我們將回顧上次如何解析Xcode的建置設定，並會看到一些

6
00:00:43,680 --> 00:00:51,680
具體的範例。我們將通過建置設定的接受值和特性。

7
00:00:51,680 --> 00:00:56,960
我們將設法解釋如何使用使用者定義的建置設定。

8
00:01:00,640 --> 00:01:03,840
我們會看到如何從CommandLine訪問建置設定

9
00:01:05,440 --> 00:01:10,480
我們將建立一些利用構建設置的例子。

10
00:01:12,320 --> 00:01:14,640
我們將以問答環節結束。

11
00:01:14,640 --> 00:01:22,000
那麼，什麼是建置設定呢? 如我們上次記住的，那是您可以應用於您的

12
00:01:22,000 --> 00:01:26,080
Xcode 目標以配置它們如何被建置的屬性。

13
00:01:30,000 --> 00:01:37,200
Xcode 內有許多建置設定。許多都來自較老的版本如 Xcode 4 

14
00:01:37,200 --> 00:01:44,080
但是每個版本都會新增設定，而其他設定則被標為棄用或移除。

15
00:01:44,560 --> 00:01:50,080
您總是可以在我提供的連接中找到一份完整的 Apple Docs 清單。

16
00:01:56,640 --> 00:02:01,360
其中一些設定也可以通過更簡化的使用者定義建置設定來使用，

17
00:02:01,360 --> 00:02:07,600
但最終，它們仍然可以通過建置設定編輯器來控制。

18
00:02:08,400 --> 00:02:14,960
所以，當更改一個的時候，也會因為他們存儲並從同一個

19
00:02:14,960 --> 00:02:19,600
地方載入，也就是PBX配置文件或某些配置文件而改變。

20
00:02:19,600 --> 00:02:27,600
關於這的一些例子是項目和目標部署目標。

21
00:02:29,040 --> 00:02:38,080
所以，項目部署目標。目標部署目標。

22
00:02:38,080 --> 00:02:48,560
目標身份，像BundleIdentifier版本，目標開發資源，

23
00:02:50,800 --> 00:02:57,920
或者目標簽名。不是通過entitlements.py List File處理的能力。

24
00:02:57,920 --> 00:03:05,920
有兩種方式來管理構建設置。一種是通過Xcode構建設置編輯器

25
00:03:06,960 --> 00:03:11,920
以及其他通過配置設置文件，也被稱為xcconfig。

26
00:03:12,800 --> 00:03:19,920
Xcode構建設置編輯器是可以用來管理構建設置的工具。

27
00:03:19,920 --> 00:03:27,040
Xcode的構建設置編輯器和其他通過配置設置文件，也就是所謂的xcconfig。

28
00:03:28,160 --> 00:03:30,800
我們將在另一個講座中介紹這個主題。

29
00:03:32,960 --> 00:03:38,000
那麼，為什麼項目和目標都可以設置相同的設置呢？

30
00:03:39,520 --> 00:03:46,160
一般來說，項目級設置被用來在目標之間共享設置並避免

31
00:03:46,160 --> 00:03:52,960
應用。它們並未直接使用，只有在解析器無法找到明確的目標級別

32
00:03:52,960 --> 00:03:59,520
設置，從而回退到項目級設置。另一方面，目標級別

33
00:03:59,520 --> 00:04:05,280
設置是設置的最明確形式，供我們自定義每個目標

34
00:04:05,280 --> 00:04:13,520
我們需要的任何方式。我們的建議是避免同一個值設置兩者，

35
00:04:13,520 --> 00:04:19,280
因為這是無必要且令人困惑的。所以，如果一個設置適用於所有目標，

36
00:04:19,280 --> 00:04:24,640
在專案層級設定那個設定，並或許只在需要的目標上覆蓋它

37
00:04:24,640 --> 00:04:30,960
不同的值。如果設定只適用於一個目標，那麼，當然，你將設定它

38
00:04:30,960 --> 00:04:40,720
在目標層級。在Xcode建構設定視圖中，有一些選項可以改變它

39
00:04:40,720 --> 00:04:56,320
的顯示方式看看它們是什麼。所以，預設模式是基本設定，

40
00:04:59,680 --> 00:05:07,120
這表示僅顯示基本設定和結合視圖，它顯示

41
00:05:07,120 --> 00:05:13,440
目標或專案的建構設定的有效值。

42
00:05:17,520 --> 00:05:22,400
在我看來，組合風格並未清楚顯示結果值

43
00:05:22,400 --> 00:05:29,840
每個設定來自於哪裡，但它有一個大優點。它讓我們可以檢查非常長的

44
00:05:29,840 --> 00:05:39,200
設定的值，比如，例如運行路徑搜索路徑，這有點長。

45
00:05:43,040 --> 00:05:49,120
一種清晰的方式是使用all filter並配合level setting。

46
00:05:52,400 --> 00:05:59,600
這種方式，我認為，我們可以查看所有的設定，我知道這可能有點令人生畏，

47
00:05:59,600 --> 00:06:05,680
並且我們看到確實所有其他層都有為設置設定的值，

48
00:06:05,680 --> 00:06:10,480
所以我們理解了這個Result column是如何計算的。

49
00:06:16,320 --> 00:06:22,640
我想提醒的是還有一種濾器叫做customized，這將

50
00:06:22,640 --> 00:06:30,000
只過濾在當前層級上有明確值的設定，但我會使用

51
00:06:30,000 --> 00:06:32,000
all for now。

52
00:06:37,520 --> 00:06:43,040
無論我們使用哪種View style，Xcode都有一些慣例反映

53
00:06:43,040 --> 00:06:51,440
設置的狀態和我們如何編輯它們。首先，粗體的設置名稱和

54
00:06:51,440 --> 00:07:00,160
加粗設置旁邊的方框，加粗的值表示有一個明確的值。

55
00:07:02,160 --> 00:07:06,160
這裡有個截圖。我們也可以在Xcode中看到，

56
00:07:10,560 --> 00:07:12,560
像這些支持的平台。

57
00:07:12,560 --> 00:07:20,800
另一個慣例是在String或路徑列表中使用空格來界定項目。例如，

58
00:07:23,280 --> 00:07:32,480
我們的運行路徑搜索路徑使用空格來區分各個項目。我們將看看這個繼承

59
00:07:32,480 --> 00:07:34,480
在一會兒具體意味著什麼。

60
00:07:34,480 --> 00:07:40,720
要指定一個包含空白的項目，您必須用問號包圍它。所以，

61
00:07:40,720 --> 00:07:48,720
如果我想要一個APP名稱中包含空格，我需要使用問號。抱歉，應該是引號。

62
00:07:53,520 --> 00:08:00,720
要檢查一個長的數值，我們可以將鼠標懸停在上面，我們可以看到這是一個長的數值。

63
00:08:00,720 --> 00:08:07,920
要檢查一個長的數值，我們可以將鼠標懸停在它上面。因此，我們看到了完整的定義。

64
00:08:11,840 --> 00:08:14,480
就像在這個情況下。

65
00:08:14,480 --> 00:08:30,640
在這種情況下，無論我們使用哪種查看器，每個設置都會有一個可折疊的

66
00:08:30,640 --> 00:08:36,880
胡蘿蔔，顯示每個配置的額外行。默認情況下，如果所有的

67
00:08:36,880 --> 00:08:42,480
配置使用相同的值，這些行會被折疊起來。如果有差異，

68
00:08:42,480 --> 00:08:52,720
它們將被展開。在我們的示例項目中，buildActiveArchitectureOnly有一個

69
00:08:52,720 --> 00:08:57,680
對於調試和發布配置的解析值不同。所以，您默認看到的是

70
00:08:58,320 --> 00:09:05,520
這兩行內容被展開。另一方面，對於基礎SDK，既然兩種配置

71
00:09:05,520 --> 00:09:14,400
使用了相同的值，所以這些行被壓縮了。但我們總能回到基礎SDK，我們會看見

72
00:09:15,040 --> 00:09:26,960
這裡的小扭轉，我們可以擴展它。要刪除設定，明確的設定，

73
00:09:26,960 --> 00:09:38,480
我們可以使用刪除鍵。這會移除當前層級的設定。所以,如果我們正在看

74
00:09:38,480 --> 00:09:44,720
目標建立設定，它會移除目標明確的設定。如果我們看的是項目

75
00:09:44,720 --> 00:09:52,400
建立設定，當然它會刪除項目級別的設定。讓我們回顧一下Xcode

76
00:09:52,400 --> 00:10:00,000
如何解析建立設定。所以，在每次建构或任何其他動作之前，系統必須解析

77
00:10:00,000 --> 00:10:05,760
所有建構目標的建構設定都是這麼解決的。建構設定是使用

78
00:10:05,760 --> 00:10:12,560
這種備用系統，其中解析器從高到低的優先級尋找值

79
00:10:12,560 --> 00:10:19,360
直到找到一個或是以平台預設為結束。在這個圖形表示中，

80
00:10:19,360 --> 00:10:24,960
以及在Xcode建構設定的標籤中，優先級從左向右遞減。

81
00:10:26,320 --> 00:10:31,920
首先，我們有的是目標明確設定，這會覆蓋任何其他設定。

82
00:10:34,640 --> 00:10:41,600
如果我們設置了一個目標配置文件，它將覆蓋所有設定，

83
00:10:41,600 --> 00:10:51,440
除了我們在目標上明確設定的。最右邊的是項目明確

84
00:10:51,440 --> 00:10:56,480
設定，當目標設定缺失時使用。否則，它們會被覆蓋。

85
00:10:56,480 --> 00:11:03,200
目標設定。再次，如果我們有一個項目配置文件，它將只覆蓋

86
00:11:03,200 --> 00:11:11,280
平台默認。並且最低優先順序的是平台默認。因此，如果所有其他

87
00:11:11,280 --> 00:11:17,440
級別都丟失，解析器將會是用這些值。現在，回到Xcode。

88
00:11:19,760 --> 00:11:25,360
並查看EssentialFeed目標使用層級視圖器的構建設定，

89
00:11:26,240 --> 00:11:32,480
我們可以看見以下由左至右的欄目。首先，有設定欄。

90
00:11:32,480 --> 00:11:39,920
這是每一個設定將會顯示的地方，通常與相似的設定被放在一起

91
00:11:41,440 --> 00:11:47,920
一個統一的組。因此，在這種情況，基本SDK放在architecture組裡與

92
00:11:47,920 --> 00:11:54,400
architecture和支援的平台一起。接下來，我們有解析的欄位，

93
00:11:55,120 --> 00:11:59,680
這展示了被Xcode為所選定的目標解決的設置的值。

94
00:11:59,680 --> 00:12:04,400
所有的設置在這一欄中都會有一個值，即使這個值是空的。

95
00:12:05,840 --> 00:12:09,280
就像在這種情況下，被排除的架構。

96
00:12:13,280 --> 00:12:19,600
接下來，我們有EssentialFeed項目級別，該級別顯示了已經明確設定的設置

97
00:12:19,600 --> 00:12:26,320
為當前項目。最後一欄是作為默認的宏。這是

98
00:12:26,320 --> 00:12:34,560
目前為所選定目標設置的平台。該欄包含默認設置

99
00:12:34,560 --> 00:12:46,640
值。請記住，解析器將從左到右查找，直到找到明確的值或者

100
00:12:46,640 --> 00:12:52,240
回退到平台默認值。讓我們來看幾個例子。

101
00:12:52,240 --> 00:12:58,640
讓我們來看幾個例子。首先，基礎的SDK。

102
00:13:04,640 --> 00:13:13,920
解析出的值是macOS。但是我們可以看到EssentialFeed目標

103
00:13:14,800 --> 00:13:22,000
沒有設定值。所以，解析器轉移到專案層級設定，在那裡找到macOS。

104
00:13:22,000 --> 00:13:28,720
並且在方框中加粗。所以，這是一個明確的值。這就是解析出的值

105
00:13:28,720 --> 00:13:38,160
為何是macOS。在這種情況下，平台的預設值，也就是未設定SDK，從未使用過。

106
00:13:41,520 --> 00:13:46,160
接下來，讓我們看看buildActiveArchitectureOnly的設定。

107
00:13:46,160 --> 00:13:50,880
我們可以看到對於debug和release配置，它有不同的值。

108
00:13:53,360 --> 00:14:01,360
這就是為什麼行會擴展。debug的解析值是yes，而解析的值

109
00:14:01,360 --> 00:14:12,800
釋出是no。沒有目標明確的值。所以，解析器移動到專案。

110
00:14:12,800 --> 00:14:22,080
層級，我們可以看到debug configuration的設置值為yes。没有設置

111
00:14:22,080 --> 00:14:28,800
為釋出版本的設定。因此，對於釋出版本，解析器將移動至

112
00:14:28,800 --> 00:14:36,960
平台默認值，即no。所以，這就是我們獲得debug和

113
00:14:36,960 --> 00:14:53,040
釋出版本的解析值為yes和no的方式。讓我們也來看看支援的平台。我們可以看到解析出來的值是iOS和

114
00:14:53,040 --> 00:15:00,320
macOS，這是我們在EssentialFeed目標上明確設定的值。

115
00:15:00,320 --> 00:15:06,560
這個值覆蓋了平台默認值，即macOS。

116
00:15:08,880 --> 00:15:13,920
一個值可以有多個元素，原因是支援的平台

117
00:15:13,920 --> 00:15:18,880
設定使用了字符串列表值。因此，我們可以添加多於一個的平台。

118
00:15:18,880 --> 00:15:26,640
現在，讓我們做一些實時編輯。讓我們編輯支援的平台。

119
00:15:30,640 --> 00:15:40,160
顯示的值是iOS和macOS，但是當我們試圖編輯它們並使用其他的時候，我們看到

120
00:15:40,160 --> 00:15:50,080
一個包含macOSX、iPhoneOS和iPhone模擬器的列表。這些是Xcode使用的值，並且

121
00:15:50,080 --> 00:15:56,160
寫在專案文件中，而iOS和macOS僅僅是Xcode界面顯示的預定義值。

122
00:15:56,160 --> 00:16:14,400
UI。讓我們加入watchOS和watch模擬器。你現在可以看到解析後的值，有iOS、macOS以及watchOS。

123
00:16:14,400 --> 00:16:22,320
想要理解專案級別上實際的改變是什麼，讓我們來檢查git diff。

124
00:16:23,760 --> 00:16:31,200
所以，我們看見支援平台欄位有兩個改變。你可能還記得上次的，


125
00:16:31,200 --> 00:16:37,840
一個用於支援平台，另一個用於支援平台，另一個用於支援

126
00:16:37,840 --> 00:16:45,200
對支援平台欄位的更動。您可能記得上次，一個是用於調試

127
00:16:45,200 --> 00:16:51,360
目標的設定，另一個是用於列表的設定，我們添加的兩個值

128
00:16:52,800 --> 00:16:56,080
都已經被改變。

129
00:17:02,080 --> 00:17:05,280
我已經撤回了這個更動，我們可以做另一個。

130
00:17:05,280 --> 00:17:09,600
讓我們編輯部署目標。

131
00:17:15,760 --> 00:17:24,480
目前，我們看到項目級別的設定是 iOS 14。我想要明確的

132
00:17:24,480 --> 00:17:33,440
目標級別設定是 iOS 13。然後我們立刻注意到解析的值現在是 iOS 13，

133
00:17:33,440 --> 00:17:39,840
覆蓋了項目級別的設定，甚至是平台的默認設定，也就是 iOS 15.2。

134
00:17:41,680 --> 00:17:42,880
再一次，我要檢查

135
00:17:45,760 --> 00:17:57,360
git diff。我注意到有兩個值被添加了，因為我們從未設置過明確的目標層級

136
00:17:57,360 --> 00:18:07,600
設定。它們被添加到了 debug 和 release 配置。現在，回到 Xcode，

137
00:18:08,240 --> 00:18:14,880
我提到過我們可以用刪除鍵來刪除明確的目標或項目級設定。所以，

138
00:18:14,880 --> 00:18:22,720
如果我現在按下刪除，我看到解決後的值又返回到了 iOS 14. 當我檢查 git diff，

139
00:18:22,720 --> 00:18:35,440
沒有變更。接下來，我想玩玩 Swift treat warning as Error 設定，

140
00:18:36,640 --> 00:18:38,640
這可以非常有用。

141
00:18:38,640 --> 00:18:54,480
非常有用。讓我們設置一個明確的項目級別設定為 yes。

142
00:18:59,360 --> 00:19:06,320
現在，我想確保所有的目標都使用這個新值。因此，我可以使用一個隱藏的 

143
00:19:06,320 --> 00:19:16,640
Xcode 功能，如果我按住 command 並點擊多個目標，我將會看到一個視圖，其中 

144
00:19:17,360 --> 00:19:22,560
我可以看到每個被選擇的目標的解決值。所以，在這種情況下，

145
00:19:22,560 --> 00:19:27,840
把警告視為錯誤對於我計畫中的所有目標都是肯定的，這正是我想要的。

146
00:19:27,840 --> 00:19:40,320
更多的是，我想檢查 git diff。我看到，和通常一樣，因為他們 

147
00:19:40,320 --> 00:19:54,800
從來沒有設定，所以新增了兩個新的數值。現在，回到 Xcode，如果我點擊刪除，

148
00:19:54,800 --> 00:20:05,280
就什麼都不會發生，因為我有一個明確的項目層級設定，並且我正在使用目標構建設定。所以，其實我正在刪除的是任何可能的


149
00:20:05,280 --> 00:20:11,280
設定在目標層級上，但不存在。若要刪除這個明確的專案層級設定，

150
00:20:11,280 --> 00:20:18,720
我需要去專案建置設定。現在，我按刪除然後我看見該值消失了。

151
00:20:18,720 --> 00:20:27,280
如果我回到我的目標，我看見該值恢復到預設。如果我檢查 git diff，

152
00:20:27,280 --> 00:20:37,600
那裡沒有差異。所以，我在原始狀態。另一個例子可能是

153
00:20:37,600 --> 00:20:47,280
使用 EssentialFeed iOS Tests 並且使用代碼簽名。

154
00:20:50,320 --> 00:20:56,320
所以，我可以看到代碼身分驗證被明確設定為 iOS developer。

155
00:20:56,320 --> 00:21:06,720
就像你可能會在你的專案中做的，我想要設定我的釋出配置使用 iOS 區分。

156
00:21:08,720 --> 00:21:17,040
所以，我可以做到這一點。而現在，讓我們注意一些事情。首先，Result值

157
00:21:17,040 --> 00:21:23,200
對於debug仍然是iOS開發者。但對於釋放，我們有一個新的價值，這就是iOS的分發，

158
00:21:23,200 --> 00:21:33,520
正如我剛剛明確表示的那樣。整體設置顯示多個值，這表明那裡

159
00:21:33,520 --> 00:21:46,320
有不同的值解析。再次，我將使用git diff。我只看到一個改變，

160
00:21:46,320 --> 00:21:54,080
因為我實際上只是改變了發布配置的值。所以，我只

161
00:21:54,080 --> 00:21:58,560
影響了PBX文件中的設置集中的一種。

162
00:21:58,560 --> 00:22:14,240
那麼，我們再做一個。所以，我仍將使用Swift將警告視為錯誤。

163
00:22:20,400 --> 00:22:26,560
我將要將專案階級設定設為是。現在，讓我們假設一個有趣的案例，

164
00:22:26,560 --> 00:22:32,800
當在舊的Intel架構上建構時，基本適應目標出現了警告，

165
00:22:32,800 --> 00:22:40,000
也就是I386。所以，這導致了建構失敗。解決這個問題的一種方式是添加一個

166
00:22:40,000 --> 00:22:48,960
專為此架構的不同設定值。因此，在此案例中，我將要用到這裡的

167
00:22:48,960 --> 00:22:57,280
小加號圖示來為兩種配置添加一個額外的過濾器。所以，調試設為是。

168
00:22:57,280 --> 00:23:05,280
我將選取Intel並將值設為否。我將對

169
00:23:06,800 --> 00:23:15,520
我的發布配置做同樣的設定。現在，再次確認已解決的值是什麼。

170
00:23:15,520 --> 00:23:21,120
所以，我仍然把debug設定為yes，但對於Intel architecture，解決的值是no。

171
00:23:21,120 --> 00:23:38,000
釋放配置也是一樣的。如果我們檢查common line，我們會看到

172
00:23:38,000 --> 00:23:54,800
值設定為yes。然後在這個明確的情況下，當architecture為I386時，值為no。

173
00:23:57,120 --> 00:23:58,800
這非常強大。

174
00:23:58,800 --> 00:24:08,640
所以，我要再次重置它並做另一個例子。

175
00:24:14,560 --> 00:24:22,800
所以，我要把project level再次設回yes。並且這次，我將假設

176
00:24:22,800 --> 00:24:33,680
出現構建Error，但只在iOS平台或iOS SDK上。我也可以為

177
00:24:33,680 --> 00:24:42,160
那裡添加特定過濾器。我們使用相同的加號按鈕。這次，而不是選擇architecture，我可以選擇

178
00:24:42,160 --> 00:24:49,920
此處的一個SDK。我將選擇任意 iOS SDK。對於此 SDK，我將

179
00:24:49,920 --> 00:25:00,240
將值設定為否。我將對發布配置做同樣的設定。再次，

180
00:25:02,320 --> 00:25:10,560
解析後的值都是肯定，除了 iOS SDK。讓我們看看差異是怎麼樣的。

181
00:25:10,560 --> 00:25:20,640
前兩者是相同的。然後我們得到這個過濾器，其中 SDK 等於

182
00:25:21,200 --> 00:25:27,840
iPhone iOS 和一個通配符。這是因為我選擇了任意 iOS 平台。你甚至可以

183
00:25:27,840 --> 00:25:44,320
使用特定的一個。再一次，我將重設這個。

184
00:25:44,320 --> 00:25:54,720
所以，我們顯示的每一個設定以及所有其他的，

185
00:25:55,760 --> 00:26:03,120
它們都允許不同類型的值。可能的類型如下。首先，布爾值

186
00:26:04,160 --> 00:26:12,400
針對像是建立、活躍的架構只有或者跳過安裝的設定。然後是一個字串值針對

187
00:26:12,400 --> 00:26:19,040
像Swift版本或代碼簽名樣式的設置，支援平台的字串列表，

188
00:26:19,040 --> 00:26:27,760
預處理器宏，像框架搜尋路徑、標頭搜尋路徑的設定路徑，

189
00:26:27,760 --> 00:26:35,040
庫搜尋路徑，等等。或像優化等級，Swift

190
00:26:35,040 --> 00:26:53,040
編譯模式，鏈接器模式等設定的枚舉。除了這些預設接受的值類型，

191
00:26:53,760 --> 00:27:02,800
我們可以引用其他設定。像在這個實例中，設定名稱是用

192
00:27:02,800 --> 00:27:09,040
其他設定一和其他設定二的值計算得出的，中間有一個空格。所以，這就是為什麼

193
00:27:09,040 --> 00:27:17,520
它們在引號內。一個實際的使用情境是針對安裝路徑設置


194
00:27:17,520 --> 00:27:34,800
計算的來源是本地庫目錄的設置，並且使用了框架的子文件夾。

195
00:27:36,800 --> 00:27:43,360
我們能夠做的另一件事就是在各級之間重用值。所以，這就是這個繼承的

196
00:27:43,360 --> 00:27:52,720
變量發揮作用的地方。所有設定都支持這個繼承變量，該變量可以被解析為任何

197
00:27:52,720 --> 00:28:02,720
被低級別設置采用的值，包括平台預設。所以，這個被用來增添，而不是

198
00:28:02,720 --> 00:28:11,200
替換現有定義。例如，我們可以設置 setting name 等於 inherited 加上某些

199
00:28:11,200 --> 00:28:24,080
附加值。一個有趣的例子可能是我們有一個設置，其中平台預設為 default value，並在專案級別我們設置 inherited 然後是 project value，然後在

200
00:28:24,080 --> 00:28:31,760
目標級別我們也使用 inherited 並在旁邊設置 target value。結果值將會是原本的

201
00:28:31,760 --> 00:28:39,520
合併值。


202
00:28:39,520 --> 00:28:49,600
所有三個值都是相當有用的。再說，一個具體的使用情況是對於框架搜索路徑

203
00:28:49,600 --> 00:28:56,080
我們不是覆蓋原有的值，而是將我們的項目目錄附加到它上面。

204
00:28:56,080 --> 00:29:13,600
參照這些值也可以在參照不存在的情況下提供默認值。所以，在這個情況下

205
00:29:13,600 --> 00:29:19,120
我的設定名稱等於構建設定名稱，如果那個

206
00:29:19,120 --> 00:29:28,480
構建設定不存在，就會有一個默認值。一個具體的，可能復雜的例子是向一些長的

207
00:29:28,480 --> 00:29:38,560
表達式類型檢查傳遞警告到Swift flags。這是我們可以傳遞以允許編譯器的設定

208
00:29:38,560 --> 00:29:49,200
允許編譯器突出顯示任何需要超過設定的值

209
00:29:49,200 --> 00:29:59,680
（這個值以毫秒計）來編譯的表達式。在這種情況下，我們設定了默認值為200毫秒，但我們可以

210
00:29:59,680 --> 00:30:06,560
在CI（持續整合）中覆蓋它，那裡的構建速度要慢得多。如果我們定義一個最大表達式檢查時間

211
00:30:06,560 --> 00:30:12,960
的值在一個XC設定檔中，這個檔案只會存在於CI機器上。所以，比如說，

212
00:30:12,960 --> 00:30:24,080
我們可以直接在CI上生成它。當替換或更換一個值時，我們

213
00:30:25,360 --> 00:30:33,040
可以應用一堆變換。這些是可用的變換。我們不會全部走過

214
00:30:33,040 --> 00:30:43,200
但你可以看到一些組別。首先有標識符。然後是引號。所以，包裝

215
00:30:43,200 --> 00:30:51,040
引號中的字符串。小寫或大寫。標準化路徑。還有一些路徑提取

216
00:30:51,040 --> 00:30:55,920
我們可以直接從路徑的基礎名稱獲取到檔案或後綴。

217
00:30:55,920 --> 00:31:02,320
具體的例子。首先，Xcode會預先使用產品名稱，


218
00:31:03,200 --> 00:31:13,280
使用 C99X 識別器的 targetName。所以，基本上，這個識別器的作用是創建

219
00:31:13,280 --> 00:31:18,320
一個支援擴充字符的 C 識別器表示方式。

220
00:31:18,320 --> 00:31:25,680
另一個例子是將 product BundleIdentifier 設定為 com.essentialDeveloper product name

221
00:31:25,680 --> 00:31:35,840
並使用 Intel 1034 識別器，這是一種適合在 DNS 名稱中使用的表示方式。

222
00:31:35,840 --> 00:31:48,480
並使用小寫的轉換。所以，我們可以更改那個。那是重點。

223
00:31:51,120 --> 00:31:56,320
我們已經看過一些條件語法的例子，但是為了重申他們，

224
00:31:56,320 --> 00:32:04,800
我們可以根據 SDK、架構或配置設定不同的設定。

225
00:32:06,000 --> 00:32:14,960
有趣的是，我們甚至可以將這些結合起來，並設定一些，就像是在僅活動的架構中，

226
00:32:14,960 --> 00:32:24,640
只在config中，在debug configuration裡面，我們能設置一些明確的SDK和架構過濾器。

227
00:32:28,880 --> 00:32:32,240
這將加快本地構建的速度。

228
00:32:32,240 --> 00:32:43,440
在Build Settings Editor的底部，有一組被稱為UserDefinedSettings的設定。

229
00:32:43,440 --> 00:33:03,760
讓我們看看我們可以在這裡做些什麼。所以，我們可以定義我們自己的自訂設置。一個有趣的例子

230
00:33:03,760 --> 00:33:13,520
是針對PushNotificationsEnvironment。我們可以定義一個名為PushNotificationsEnvironment的設置

231
00:33:13,520 --> 00:33:20,000
然後我們可以將其值設定為在debug configuration上的開發或者在

232
00:33:20,000 --> 00:33:26,640
release configuration上的生產。這讓我們可以做的是，而不是使用兩種權限，

233
00:33:26,640 --> 00:33:33,840
PlistFiles，設置Apple Push Services環境，我們可以只使用一種。並且在


234
00:33:33,840 --> 00:33:42,880
對於APNS環境密鑰，我們設定了一個參考到我們剛剛添加的PushNotificationsEnvironment設置。

235
00:33:43,760 --> 00:33:50,320
所以，當我們構建調試配置時，這將解析為開發環境，並且

236
00:33:50,320 --> 00:33:57,680
當我們構建發布配置時，對於生產APNS環境。

237
00:33:58,560 --> 00:34:04,320
默認情況下，當您建立一個Xcode專案時，您將會看到這兩個值，

238
00:34:05,040 --> 00:34:13,280
兩個設置，MTLEnableDebugInfo與MTLFastMath。這些是什麼? 好的，

239
00:34:13,280 --> 00:34:21,680
首先，他們是金屬設置。所以，對於金屬框架，這已經不再需要，

240
00:34:21,680 --> 00:34:28,080
但是出於某種原因，他們仍然留在Xcode模板文件中。所以，它仍然生成它們。

241
00:34:28,720 --> 00:34:30,560
移除它們是可以的。

242
00:34:30,560 --> 00:34:37,680
如果你需要使用CommandLine來存取建構設置，你可以使用一個

243
00:34:39,360 --> 00:34:45,600
減號顯示建構設置選項，將它傳遞給任何Xcode建構命令，它將輸出

244
00:34:45,600 --> 00:34:52,720
Xcode建構命令。所以，如果你需要使用CommandLine來存取建構設置，

245
00:34:52,720 --> 00:34:59,280
減號顯示建構設置選項，你可以將它傳遞給任何Xcode建構命令，並且它會列印

246
00:35:00,320 --> 00:35:09,440
所有的建構設置和已解析的值，就像在我的幻燈片中。 你可以傳遞負數

247
00:35:09,440 --> 00:35:15,200
JSON也是一樣。所以，而非這種格式化，你將得到一個正確格式化的JSON文件。

248
00:35:15,680 --> 00:35:21,040
這可能非常有用，尤其是在CI上並嘗試檢查和查看已解析的情況時。

249
00:35:21,040 --> 00:35:31,920
設定是為其中一種方案設定的。還有透過命令行設定的選項。所以，

250
00:35:31,920 --> 00:35:38,320
在這種情況下，對於我們的EssentialFeed目標，我們將設定架構為arm64和

251
00:35:38,320 --> 00:35:46,960
Bitcode啟用為否。現在，幾個我們如何使用構建設定的例子。所以，

252
00:35:46,960 --> 00:35:56,800
現在，幾個如何使用建構設定來讓我們獲得優勢的例子。首先，我想這個

253
00:35:56,800 --> 00:36:05,520
例子改變了Bundle名稱和應用圖標對於不同的構建風味。所以，大多數的項目，

254
00:36:05,520 --> 00:36:12,720
我們有一種內部發布給我們的測試人員或也許給我們群組中的其他人的構建，

255
00:36:12,720 --> 00:36:19,680
和外部發給我們AppStore用戶的不同構建。

256
00:36:21,200 --> 00:36:29,120
為了能夠區分裝置上的建設版本，我們可以做一個有趣的小技巧，

257
00:36:29,760 --> 00:36:35,200
就是為debug配置設置一個如targetName

258
00:36:35,200 --> 00:36:44,080
後接空格與dev的產品名稱。如此，我們就知道這是一個dev版本。並且我們也可以改變資源目錄的編譯器，

259
00:36:44,080 --> 00:36:52,640
也就是含有圖標的目錄。對debug配置，我們可以設置為不同

260
00:36:53,520 --> 00:36:57,760
的目錄。所以，應用程式將出現不同的圖示。真的非常方便。

261
00:36:57,760 --> 00:37:07,920
另外一個有趣的事情是我們可以根據

262
00:37:07,920 --> 00:37:15,200
配置來實現不同的程式碼行為。你可能知道，Xcode默認設置了一些建設設定來幫助我們

263
00:37:15,200 --> 00:37:23,920
區分debug與release配置。對於Swift，這是透過Swift active實現的。

264
00:37:23,920 --> 00:37:34,960
設定編譯條件為在調試配置上調試。這允許我們的Swift代碼

265
00:37:34,960 --> 00:37:45,440
進行dash if debug do this，dash else do something else。對於使用的人來說，其等價物是

266
00:37:45,440 --> 00:37:54,640
Objective-C的GCC定義，這又默認地，當你用Xcode創建一個新的專案時，

267
00:37:54,640 --> 00:38:03,920
會在調試中設置debug equals one。同樣，這允許我們進行一種輕微的變化，

268
00:38:03,920 --> 00:38:16,960
我們使用dash if debug do this，dash else do something else。這可能很有用，

269
00:38:16,960 --> 00:38:22,720
但許多項目濫用這個功能，並將這些條件語句分散在全部代碼中，

270
00:38:22,720 --> 00:38:28,960
這使得代碼難以測試和維護。我們的建議是只在其中使用它們。

271
00:38:28,960 --> 00:38:36,160
組成路線，這是最具體且最低層級的組件。讓你的所有其他

272
00:38:36,160 --> 00:38:41,920
組件抽像化這些決策，並使用我們已經擁有的其中一種機制來注入這些決策

273
00:38:41,920 --> 00:38:49,840
就像課程中已經展示的，如閉包，DependencyInversion，等等。讓我們來看看

274
00:38:49,840 --> 00:38:59,360
這兩個例子，首先我們有一個需要為動畫設置時間的ViewController，

275
00:38:59,360 --> 00:39:05,520
當然，在debug配置中，我們希望這個持續時間為零，因為我們不

276
00:39:05,520 --> 00:39:12,640
希望等待動畫。在ViewController內部進行判斷而非，

277
00:39:12,640 --> 00:39:20,080
我們通過閉包傳遞此持續時間，並從組成路線配置此閉包

278
00:39:20,080 --> 00:39:28,480
在那裡我們可以使用條件語句。在右邊的另一個例子是創建一個UI SceneConfiguration


279
00:39:28,480 --> 00:39:36,880
如果你正在進行除錯設定，我們可以將Delegate類設為另一個

280
00:39:36,880 --> 00:39:49,360
SceneDelegate。在這種情況下，就會是DebuggingSceneDelegate。另一個有趣的用例是管理

281
00:39:49,360 --> 00:39:56,400
在不同環境下的常數。如果我們的端點有不同的環境，像我

282
00:39:56,400 --> 00:40:03,040
想你們也一定會有， staging, production, QA等等，你可以使用條件語句來解析這些

283
00:40:03,040 --> 00:40:12,160
URLs。你可以通過我提供的簡單例子來實現。所以，假如在debug，使用這個URL，否則

284
00:40:12,160 --> 00:40:23,200
使用另一個URL。但是還有另一種方法是使用構建設定。所以，我們將要新增一個由用戶

285
00:40:23,200 --> 00:40:31,600
定義的構建設定，名為API Domain。對於debug設定，我們將要把它設為

286
00:40:31,600 --> 00:40:36,560
一個暫時的URL，對於列表設定，我們將設置為生產URL。

287
00:40:37,120 --> 00:40:50,880
然後在Info.plist檔案中，我們會設置一個新的鍵名稱為API基本URL，我們將使用

288
00:40:50,880 --> 00:41:03,120
剛才新增的API網域用戶定義設置。這是因為讀取這些構建設置從

289
00:41:03,120 --> 00:41:13,840
程式碼並不容易，但是正如我們記得，Info.plist已處理構建設置，例如，

290
00:41:13,840 --> 00:41:24,560
關於產品名稱或其他設置。所以，它會有達到所有構建設置的訪問權。

291
00:41:26,320 --> 00:41:35,520
而要讀取這個API基本URL的值，我們可以在Bundle類別上用for info dictionary key API。

292
00:41:35,520 --> 00:41:42,640
必須知道的是，任何應用程序捆綁包都是容易檢查的，並且捆綁包內的Info.plist並非

293
00:41:42,640 --> 00:41:51,760
加密。因此，內部設定的任何值人人都可輕易獲得。所以，切勿在 Info.plist 中儲存任何敏感數據。

294
00:41:51,760 --> 00:41:59,200
如您想更深入了解安全議題，我們有舉辦相關指導課程，
也可以在其他課程討論。

295
00:41:59,200 --> 00:42:08,240
以上就是全部內容。感謝大家。現在，我們進行問答環節。

296
00:42:12,800 --> 00:42:18,480
有任何問題的人嗎? 感謝你，Pawan。

297
00:42:18,480 --> 00:42:25,040
大家好。在優先權設定中，當你在 CommandLine 設置一個建造設定，

298
00:42:25,840 --> 00:42:33,680
你會覆蓋其他所有東西，對吧？當你設置它，是的。讓我們回到那一張幻燈片。

299
00:42:35,840 --> 00:42:38,160
讓我看看我能否運行此模擬。

300
00:42:38,160 --> 00:42:47,600
是的，這只是覆蓋了目標設定，甚至不改變專案。這就像一個獨立的。

301
00:42:47,600 --> 00:42:51,680
這只是針對那個特定的建構而已。確切地說，它並不改變任何東西。

302
00:42:51,680 --> 00:43:12,000
謝謝你讓你通過這個，現在很清楚了。來自Bartos的另一個問題。

303
00:43:12,000 --> 00:43:17,280
我希望我發音正確。積極建造的架構到底是什麼意思?

304
00:43:17,280 --> 00:43:23,440
積極建造的架構到底是什麼意思？讓我們再看一次這個設定。

305
00:43:28,240 --> 00:43:33,520
基本上，這意味著與其建立我們的目標支持的所有架構，

306
00:43:33,520 --> 00:43:41,760
我們只是將建立設定為運行的那一個。在這種情況下，對於EssentialFeed，

307
00:43:41,760 --> 00:43:53,280
該值被設定為ArchStandard，這是另一個變量，通常是ARM64和386。

308
00:43:54,480 --> 00:44:00,640
所以，這是兩種架構。如果我們啟用buildActiveArchitectureOnly

309
00:44:01,440 --> 00:44:08,160
並試圖使用模擬器，我們只會構建模擬器所需的那一種，

310
00:44:08,160 --> 00:44:15,280
即386。所以，我們不會構建我們在這種情況下不需要的ARM64。

311
00:44:15,280 --> 00:44:23,360
這是一種最優化，並且會導致建立速度更快，因為你只構建了其中一種

312
00:44:23,360 --> 00:44:32,080
架構。順便說一下，許多這些設定都是重要的，可能需要一些

313
00:44:32,080 --> 00:44:38,320
深入研究。所以，我們將進行另一場演講，討論一些這些構建設定。

314
00:44:39,120 --> 00:44:50,000
並走入每一個中去看看它們是如何運作的。還有其他問題嗎？如果沒有，我們就可以結束了。

315
00:44:50,000 --> 00:44:57,360
謝謝大家，我們很快就會再見。