

1
00:00:00,000 --> 00:00:12,000
大家好，如果你們可以聽到我，請在聊天室告訴我，嗨。

2
00:00:12,000 --> 00:00:17,120
好的，Mukesh，謝謝。

3
00:00:17,120 --> 00:00:20,120
謝謝，Dan。

4
00:00:20,120 --> 00:00:26,320
這次我們要來講一個更大的主題，那就是Crashes和Crash reports。

5
00:00:26,320 --> 00:00:31,440
這是一個非常重要且必须掌握的主題。

6
00:00:31,440 --> 00:00:37,160
首先我們會看看什麼是app terminations以及它為何會發生。

7
00:00:37,160 --> 00:00:43,120
我們會了解什麼是Crash以及什麼是Crash report。

8
00:00:43,120 --> 00:00:52,200
我們會看看Crash report的結構，並學會如何引導這種報告。

9
00:00:52,200 --> 00:00:58,760
所以今天我們講的是Crashes和Crash reports的理論部分，並留下一門

10
00:00:58,760 --> 00:01:05,280
專門用於實例的講座的開展空間。

11
00:01:05,280 --> 00:01:07,480
那麼，關於app terminations。

12
00:01:07,480 --> 00:01:14,080
嗯，我們都努力創建美觀且互動性強的應用程式，使其在

13
00:01:14,080 --> 00:01:17,280
我們用戶的設備上順暢運行。

14
00:01:17,280 --> 00:01:23,080
我們力求對它們進行測試，但因為需要支援的作業系統版本數量繁多，

15
00:01:23,080 --> 00:01:29,760
並且還有不同大小、甚至具有像Mac Catalyst這樣的奇特功能的不同設備，

16
00:01:29,760 --> 00:01:34,240
它允許在 Mac 上運行 iOS 應用程式。

17
00:01:34,240 --> 00:01:41,020
我們然後將這些應用程式釋出給我們的用戶，我們發現有時這些應用程式的表現

18
00:01:41,020 --> 00:01:46,680
與我們預期或測試的效果不同。

19
00:01:46,680 --> 00:01:54,000
其中一種主要的事件是應用程式的行為與預期不同，或以我們無法預測的方式行為表現，

20
00:01:54,000 --> 00:02:02,080
就是終止，這時作業系統會介入並停止運行

21
00:02:02,080 --> 00:02:04,440
我們的應用程式的進程。

22
00:02:04,440 --> 00:02:14,280
這種情況可以在我們的應用程式處於前景或是正在活躍狀態時發生

23
00:02:14,280 --> 00:02:19,760
並且在AppCode的執行期間可能會發生崩潰。

24
00:02:19,760 --> 00:02:27,520
從使用者的視角來看，這聽起來像是我正在做某件事X，然後應用程式突然關閉。

25
00:02:27,520 --> 00:02:31,280
這就是他們如何看待這種情況。

26
00:02:31,280 --> 00:02:36,400
當我們的應用程式處於背景時，也可能會發生終止情況。

27
00:02:36,400 --> 00:02:40,860
所以另一個應用程式會是活躍的應用程式。

28
00:02:40,860 --> 00:02:44,560
這種情況可以由多種原因導致。

29
00:02:44,560 --> 00:02:50,920
再次從使用者的觀點來看，情況會是這樣。

30
00:02:50,920 --> 00:02:56,200
我正在運行一個應用程式，我切換到另一個程式，然後當我切換回來時，所有我的輸入

31
00:02:56,200 --> 00:03:02,760
都消失了，而應用程式則重置至主畫面，或者是任何主要的畫面。

32
00:03:02,760 --> 00:03:06,500
這就是使用者所看到的。

33
00:03:06,500 --> 00:03:17,240
我們知道，在背後，操作系統剛剛終止了我們的應用程式。

34
00:03:17,240 --> 00:03:21,800
而且這更糟，尤其是，像我在這裡說的，輸入被遺失。

35
00:03:21,800 --> 00:03:30,600
所以，如果使用者正在輸入文本，或者備註，或者其他的東西，那些資料被遺失了，

36
00:03:30,600 --> 00:03:34,760
那就太糟了。

37
00:03:34,760 --> 00:03:41,480
所以這些終止是應用程式生命週期的一部分。

38
00:03:41,480 --> 00:03:48,520
當系統停止你的進程時，你可以通過修復

39
00:03:48,520 --> 00:03:54,320
錯誤並降低整體應用程式資源消耗來顯著減少終止。

40
00:03:54,320 --> 00:04:01,040
然而，終止是預期的，你不能完全消除他們。

41
00:04:01,040 --> 00:04:06,260
系統使用終止來優先考慮保持前臺

42
00:04:06,260 --> 00:04:10,960
使用者經驗流暢所需要的資源。

43
00:04:10,960 --> 00:04:19,440
當系統終止您的應用程式時，下次使用者重新啟動時，您的應用程式必須重新啟動。

44
00:04:19,440 --> 00:04:24,960
並且，由於重新啟動比僅從背景切換到前台的應用程式

45
00:04:24,960 --> 00:04:32,000
或是重新啟動它，會導致更糟糕的用戶體驗。

46
00:04:32,000 --> 00:04:39,800
這就是為何我們儘量避免終止應用程式。

47
00:04:39,800 --> 00:04:46,520
讓我們來看看終止應用程式的主要原因

48
00:04:46,520 --> 00:04:50,280
首先，中止。

49
00:04:50,280 --> 00:04:55,640
當你的程序呼叫中止函數時就會發生中止。

50
00:04:55,640 --> 00:05:05,360
這通常發生在你的應用程式遇到未切掉的例外或是無法通過斷言呼叫，

51
00:05:05,360 --> 00:05:09,080
通常是你的應用程式使用的框架。

52
00:05:09,080 --> 00:05:22,760
中止會使用SIGABORT訊號，請注意中止是崩潰。

53
00:05:22,760 --> 00:05:29,040
另一種類型的應用程式終止是記憶體限制終止。

54
00:05:29,040 --> 00:05:36,020
在iOS中，系統試圖提供前台應用程式具有儘可能多的記憶體。

55
00:05:36,020 --> 00:05:40,720
如果您的應用嘗試使用超過系統能提供的記憶體，系統將會終止

56
00:05:40,720 --> 00:05:44,200
它。

57
00:05:44,200 --> 00:05:50,080
接下來，壞的存取。

58
00:05:50,080 --> 00:05:56,200
當您的應用嘗試訪問無效的記憶體時，就會發生壞的存取終止。

59
00:05:56,200 --> 00:06:06,280
例如，就像您在這裡看到的Objective-C範例中，通過取消引用Null指標，

60
00:06:06,280 --> 00:06:16,700
我們使用的是弱連結、弱引用的屬性。

61
00:06:16,700 --> 00:06:26,020
如果我們稍後使用它，而該變數已被回收，當試圖取消引用指標時，

62
00:06:26,020 --> 00:06:32,760
指向Array的MyArray指標，我們會得到一個Crash。

63
00:06:32,760 --> 00:06:39,720
另一個範例是訪問超出範圍的Array元素的索引。

64
00:06:39,720 --> 00:06:48,360
再次，我們有一個Objective-C Array和空的Array，如果我們試著訪問元素

65
00:06:48,360 --> 00:06:55,400
使用索引一，我們也會得到一個糟糕的存取崩潰或終止。

66
00:06:55,400 --> 00:07:02,360
我提及崩潰是因為糟糕的存取終止實際上是崩潰。

67
00:07:02,360 --> 00:07:12,360
接下來，當您的應用嘗試執行一個

68
00:07:12,360 --> 00:07:17,080
系統無法解釋的指令時，就會發生非法指令。

69
00:07:17,080 --> 00:07:29,080
一個例子是在Intel CPU上，例如Intel Max, watchOS, tvOS，強制解開一個選項

70
00:07:29,080 --> 00:07:32,600
帶有一個新值。

71
00:07:32,600 --> 00:07:39,240
這是非法的，系統無法從此中恢復，因為它無法執行

72
00:07:39,240 --> 00:07:41,400
這個指令。

73
00:07:41,400 --> 00:07:50,880
因此它會崩潰，並且非法指令終止就是崩潰。

74
00:07:50,880 --> 00:08:02,040
另一個應用終止的原因來自看門狗，對於那些

75
00:08:02,040 --> 00:08:08,720
未使用或未聽說過看門狗的人來說，看門狗只是一個系統，一個部分

76
00:08:08,720 --> 00:08:15,440
監控啟動時間和應用程序響應性的操作系統，並只終止

77
00:08:15,440 --> 00:08:21,260
無回應的應用程式。

78
00:08:21,260 --> 00:08:29,160
通常，當您的應用程序啟動、暫停或恢復時間過長時，就會發生應用程序超時

79
00:08:29,160 --> 00:08:38,080
並導致您在此看到的八進制 bad foot 錯誤代碼的終止。

80
00:08:38,080 --> 00:08:43,520
這通常意味著您的應用程式在啟動時卡住。

81
00:08:43,520 --> 00:08:52,040
目前，超時限制為20秒，但可能會在未來的OS版本中改變。

82
00:08:52,040 --> 00:08:57,280
我們記得以前有幾個OS版本的超時限制是10秒。

83
00:08:57,280 --> 00:09:05,240
所以要小心這一點。

84
00:09:05,240 --> 00:09:13,080
還要注意，許多用戶不會等這20秒，所以他們只會退出你的應用程式

85
00:09:13,080 --> 00:09:17,760
在限制受到打擊之前，而你實際上不會看到應用程式超時。

86
00:09:17,760 --> 00:09:22,960
所以只需一致地測量你的app開啟時間。

87
00:09:22,960 --> 00:09:25,080
此外，請注意這在iOS上發生。

88
00:09:25,080 --> 00:09:34,080
例如，在macOS上，並沒有app啟動限制。

89
00:09:34,080 --> 00:09:38,920
另一種app終止的方式是內存壓力。

90
00:09:38,920 --> 00:09:47,860
這與內存限制終止非常相似，只是在這種情況下，它在後台發生。

91
00:09:47,860 --> 00:09:56,880
因為我們知道，在iOS和watchOS的正常app生命周期中，當系統需要的記憶體超過當前可用的記憶體時，系統會終止app。

92
00:09:56,880 --> 00:10:04,960
當前台或者
活動app需要更多記憶體時，系統最經常終止在背景運行的app。

93
00:10:04,960 --> 00:10:09,840
你可以通過減少您的記憶體占用來降低記憶體壓力終止的頻率。

94
00:10:09,840 --> 00:10:14,440
當您的app轉到背景運行或暫停時。

97
00:10:30,280 --> 00:10:36,960
因為您無法消除所有的記憶體壓力終止，所以實施

98
00:10:36,960 --> 00:10:43,240
由Apple建議的適當狀態恢復，以提供流暢的使用者體驗是非常好的主意。

99
00:10:43,240 --> 00:10:50,960
這只是因為，如果您遇到此終止，當使用者重新啟動您的應用程式時，所有他們的

100
00:10:50,960 --> 00:10:58,800
數據將被保留，理想情況下他們將被恢復在他們之前使用的相同螢幕上

101
00:10:58,800 --> 00:11:02,360
在應用程式被關閉之前。

102
00:11:02,360 --> 00:11:08,680
所以這對使用者來說非常順暢。

103
00:11:08,680 --> 00:11:15,560
另一種背景應用程式終止的類型是任務超時。

104
00:11:15,560 --> 00:11:20,640
系統允許您的應用程式在使用者將

105
00:11:20,640 --> 00:11:26,600
應用程式放到背景後，繼續使用BeginBackgroundTask API執行。

106
00:11:26,600 --> 00:11:31,880
但是如果您的應用程式在分配的時間內未完成其工作，系統將終止

107
00:11:31,880 --> 00:11:37,800
與任務超時原因相關。

108
00:11:37,800 --> 00:11:45,000
所以確保在分配的時間內完成，無論這是什麼，這取決於OS，並且

109
00:11:45,000 --> 00:11:53,880
呼叫和BackgroundTask，因為如果你不這麼做，你肯定會碰到超時。

110
00:11:53,880 --> 00:12:03,000
以及導致應用程序終止的最常見原因之一是File lock，這產生

111
00:12:03,000 --> 00:12:08,520
當您的應用程序繼續保持在您的應用組中共享的File的鎖定時。

112
00:12:08,520 --> 00:12:12,560
用戶將您的應用放到背景。

113
00:12:12,560 --> 00:12:23,560
系統執行終止以避免阻塞您的應用程序可能永遠不會釋放的鎖定。

114
00:12:23,560 --> 00:12:34,320
因此，您可以通過使用BeginBackgroundTask API來完成File的寫入，然後

115
00:12:34,320 --> 00:12:37,880
只是解鎖。

116
00:12:37,880 --> 00:12:46,000
這非常重要，因此您可以完成您開始之前的任何寫操作。

117
00:12:46,000 --> 00:12:52,720
轉至背景，因為這是解鎖該File的唯一方式。

118
00:12:52,720 --> 00:12:59,140
例如，像是在CoreData數據庫中寫作。

119
00:12:59,140 --> 00:13:04,440
所以您只是向系統請求BeginBackgroundTask和BackgroundTask的額外時間

120
00:13:04,440 --> 00:13:10,800
APIs，並結束寫作操作，就這樣。

121
00:13:10,800 --> 00:13:17,200
這就是你避免這類終止的方式。

122
00:13:17,200 --> 00:13:24,660
所以當提及這些app終止原因時，我們提到其中一些是Crashes。

123
00:13:24,660 --> 00:13:31,280
所以現在我們要聚焦在Crashes的主題，看看什麼是Crash。

124
00:13:31,280 --> 00:13:38,280
好了，Crash就是當你的應用嘗試做些不被允許的事情時突然終止。

125
00:13:38,280 --> 00:13:40,280
那是不允許的呢？

126
00:13:40,280 --> 00:13:42,560
不允許什麼呢？

127
00:13:42,560 --> 00:13:49,800
嗯，有時候CPU無法執行代碼。

128
00:13:49,800 --> 00:13:54,240
比如說CPU不能除以零，因為它就是不知道

129
00:13:54,240 --> 00:13:57,920
怎麼去做。

130
00:13:57,920 --> 00:14:06,120
或者有時候操作系統正在強制執行某些政策。

131
00:14:06,120 --> 00:14:10,680
操作系統會通過終止你的應用來保護用戶體驗，如果它需要

132
00:14:10,680 --> 00:14:18,580
太長時間啟動或者使用過多的內存。

133
00:14:18,580 --> 00:14:23,040
有時候你所使用的編程語言正試圖防止失敗並且將會

134
00:14:23,040 --> 00:14:25,760
引發崩潰。

135
00:14:25,760 --> 00:14:34,120
比如說，當一個Swift Array或一個NSArray試圖超出數組範圍，

136
00:14:34,120 --> 00:14:42,040
就像我們在之前的範例中顯示的訪問範圍以外的索引，這會

137
00:14:42,040 --> 00:14:48,200
導致崩潰並中止進程。

138
00:14:48,200 --> 00:14:55,360
或者你作為開發者可能正在嘗試防止失敗。

139
00:14:55,360 --> 00:15:01,920
例如，如果您正在設計一個如此的 API，有带參數的這做某事函式

140
00:15:01,920 --> 00:15:09,000
並且你向其中一種機制宣告，如 assert precondition 或 fatal Error，該參數

141
00:15:09,000 --> 00:15:10,920
參數不可以是 nil。

142
00:15:10,920 --> 00:15:16,520
因此，您的 API do something 不知道如何處理 nil 值。

143
00:15:16,520 --> 00:15:28,520
您可以將這標記為我提到的其中一條指令，如果有人呼叫此 API

144
00:15:28,520 --> 00:15:39,240
並使用 nil 值，它將導致 Crash，這並不壞，因為你想要

145
00:15:39,240 --> 00:15:45,960
讓您的客户明白，這個 API 無法与 nil 一起使用。

146
00:15:45,960 --> 00:15:52,200
我知道你們中的一些人可能會想，好的，如果你不支援 nil 值，那為何

147
00:15:52,200 --> 00:15:55,800
您不使用非選擇性值類型？

148
00:15:55,800 --> 00:16:02,920
好的，有時候如果您需要符合某些介面，您可能需要支持

149
00:16:02,920 --> 00:16:03,920
可選的部分。

150
00:16:03,920 --> 00:16:07,680
這只是一個例子。

151
00:16:07,680 --> 00:16:10,880
別過於字面理解。

152
00:16:10,880 --> 00:16:13,200
好的。

153
00:16:13,200 --> 00:16:22,640
所以我們已經討論過為什麼系統會讓您的應用程式崩潰，並且當

154
00:16:22,640 --> 00:16:28,280
應用程式崩潰時，系統會生成一份稱為崩潰報告的報告，描述了

155
00:16:28,280 --> 00:16:33,440
崩潰時的設備類型，操作系統和其他情況。

156
00:16:33,440 --> 00:16:38,520
他們幫助我們理解崩潰是如何發生及其原因。

157
00:16:38,520 --> 00:16:47,440
而一份崩潰報告只是一個包含 .Crash 擴展名的純文本文件，其中包含

158
00:16:47,440 --> 00:16:54,960
應用程式崩潰時的詳細日誌，這使它成為識別

159
00:16:54,960 --> 00:17:00,800
問題在嘗試修復之前的關鍵資源。

160
00:17:00,800 --> 00:17:05,000
那麼，一個崩潰報告是什麼樣子的呢？

161
00:17:05,000 --> 00:17:13,600
嗯，報告中的信息是分為幾個部分。

162
00:17:13,600 --> 00:17:22,680
所以我們將嘗試查看每一個部分並看看裡面有什麼內容。

163
00:17:22,680 --> 00:17:32,520
我這裡有一些Crashes或部分Crashes，我將在接下來的示例中使用它們。

164
00:17:32,520 --> 00:17:41,400
所以我將嘗試解釋我如何獲取每一個，以及每一個文件中有什麼內容。

165
00:17:41,400 --> 00:17:46,520
但是如果不清楚的話，請告訴我。

166
00:17:46,520 --> 00:17:53,800
所以這第一個例子是我通過對

167
00:17:53,800 --> 00:18:04,320
EssentialFeed用例庫做一些更改並在SceneDelegate連接中強制產生Crash

168
00:18:04,320 --> 00:18:15,600
的應用程式Crash。

169
00:18:15,600 --> 00:18:21,120
這就是Crash報告，我們可以看到這裡有幾個部分。

170
00:18:21,120 --> 00:18:27,640
所以這第一部分被稱為標頭，它包含了我們將要

171
00:18:27,640 --> 00:18:30,960
在一秒鐘內查看的各種信息。

172
00:18:30,960 --> 00:18:36,560
然後我們有另一部分叫做異常信息。

173
00:18:36,560 --> 00:18:39,200
此處有一些欄位描述該異常。

174
00:18:39,200 --> 00:18:45,200
順帶一提，這不是指語言異常，所以這不是一個Swift或一個Objective

175
00:18:45,200 --> 00:18:53,400
see異常，其實是一個操作系統的異常，這有所不同。

176
00:18:53,400 --> 00:18:56,860
然後我們看到了罪魁禍首。

177
00:18:56,860 --> 00:19:04,600
所以是觸發崩潰的線程或崩潰的線程，然後我們有backtraces

178
00:19:04,600 --> 00:19:09,400
我們也將進行介紹。

179
00:19:09,400 --> 00:19:16,520
CPU寄存器的狀態。

180
00:19:16,520 --> 00:19:18,520
以及二進制圖像。

181
00:19:18,520 --> 00:19:28,000
所以這是總體結構，我們將逐欄進行查看。

182
00:19:28,000 --> 00:19:32,600
所以Crash報告從描述Crash發生環境的標頭部分開始

183
00:19:32,600 --> 00:19:36,520
在標頭部分的欄位裡。

184
00:19:36,520 --> 00:19:43,520
所以，這部分可能包含以下的資訊，但沒有一份Crash報告會包含

185
00:19:43,520 --> 00:19:47,600
所有以下的欄位。

186
00:19:47,600 --> 00:19:50,520
首先，有事故識別碼。

187
00:19:50,520 --> 00:19:53,920
這是Crash報告的唯一識別符。

188
00:19:53,920 --> 00:19:59,960
所以兩份報告永遠不會有相同的識別碼。

189
00:19:59,960 --> 00:20:04,600
接下來的欄位是Crash報告的鍵。

190
00:20:04,600 --> 00:20:08,360
這是一個匿名的每台設備的識別碼。

191
00:20:08,360 --> 00:20:15,000
所以對於同一台設備的兩份報告會包含相同的值。

192
00:20:15,000 --> 00:20:25,720
請注意，當清除設備時，這個識別碼會被重置。

193
00:20:25,720 --> 00:20:36,560
不是針對於AppStore版本或者AppStore版本的Crash的Crash報告鍵，

194
00:20:36,560 --> 00:20:47,120
在TestFlight版本上，我們會有另一個ID，這被稱為是beta識別符，這是

195
00:20:47,120 --> 00:20:54,640
再次是唯一的識別碼，用於組合設備和崩潰應用程式的供應商。

196
00:20:54,640 --> 00:21:04,840
所以你可以選擇擁有其中之一。

197
00:21:04,840 --> 00:21:09,920
接下來是硬體模型，這是應用程式運行的特定設備模型

198
00:21:09,920 --> 00:21:11,600
在上面。

199
00:21:11,600 --> 00:21:18,040
如果你還沒有見過這種格式，Apple有包含幾乎

200
00:21:18,040 --> 00:21:22,640
所有設備及其對應硬體模型的資源。

201
00:21:22,640 --> 00:21:32,760
這個iPhone 12,8代表一個iPhone SE 2.

202
00:21:32,760 --> 00:21:39,320
接下來是進程，進程欄位包含該進程的可執行名稱

203
00:21:39,320 --> 00:21:48,020
而且這與應用程序信息清單中的CF Bundle可執行值匹配。

204
00:21:48,020 --> 00:21:53,380
括號中的數字是進程ID。

205
00:21:53,380 --> 00:21:58,940
然後是路徑，它是硬盤上可執行檔的位置。

206
00:21:58,940 --> 00:22:12,960
所以如果我們在這裡滾動，我們可以看到EssentialApp二進制檔在我們設備上的路徑。

207
00:22:12,960 --> 00:22:19,960
如果這是一個macOS Crash，路徑中的一些部分，一些元件

208
00:22:19,960 --> 00:22:30,040
可能會被替換為佔位符，以保護用戶的隱私。

209
00:22:30,040 --> 00:22:36,640
然後我們有識別碼，這是崩潰進程的CF BundleIdentifier。

210
00:22:36,640 --> 00:22:41,120
如果進程沒有CF BundleIdentifier，如果二進制檔沒有一個

211
00:22:41,120 --> 00:22:49,080
BundleIdentifier，這個欄位就是進程名稱或者只是一個佔位符。

212
00:22:49,080 --> 00:22:53,760
然後是版本，這是崩潰進程的版本。

213
00:22:53,760 --> 00:23:00,680
並且它是應用程式的CF Bundle版本和 CF Bundle短版本

214
00:23:00,680 --> 00:23:13,780
串聯，這兩個都設置在Info.plist裡面。


215
00:23:13,780 --> 00:23:25,680
在一些崩潰情況下，我們可以有另一個稱為AppStore工具的字段。

216
00:23:25,680 --> 00:23:32,200
這只是用於編譯你的應用的Bitcode並進行縮減的Xcode的版本

217
00:23:32,200 --> 00:23:35,320
將你的應用縮減到特定裝置的版本。

218
00:23:35,320 --> 00:23:54,000
舉例來說，對於Xcode 12, 13.1，它會看起來像這樣，建構編號。

219
00:23:54,000 --> 00:24:05,280
我們也可以有一個應用變體字段，這是你的應用產生的特定變體

220
00:24:05,280 --> 00:24:11,560
由應用縮減技術產生的。

221
00:24:11,560 --> 00:24:15,500
其中一個例子可能看起來像這樣。

222
00:24:15,500 --> 00:24:26,600
所以它包含了三個由欄位分隔的值，並且第一個值，1，是一個內部

223
00:24:26,600 --> 00:24:33,980
系統值，這在調試崩潰時並不真正有用。

224
00:24:33,980 --> 00:24:37,920
下一個值，第二個值是縮減版本的名稱。

225
00:24:37,920 --> 00:24:43,160
這個變體代表了一類具有相似特性的設備，例如屏幕

226
00:24:43,160 --> 00:24:48,000
尺寸，記憶體等級，Metal GPU，家族等等。

227
00:24:48,000 --> 00:24:52,920
所以精簡變體的名稱並不指示確切的硬體型號。

228
00:24:52,920 --> 00:24:58,920
所以你可能會在硬體型號中看到一個值，而在應用程序變體中看到另一個值，因為

229
00:24:58,920 --> 00:25:03,080
類別可能會有所不同。

230
00:25:03,080 --> 00:25:11,600
實際上，更多的設備可以組成相同的類別。

231
00:25:11,600 --> 00:25:16,720
在這個例子中，類別是iPhone 10, 6。

232
00:25:16,720 --> 00:25:23,640
這裏的第三個值是操作系統版本的變體。

233
00:25:23,640 --> 00:25:30,640
在這個例子中，這是12.2，表示這個變體針對執行

234
00:25:30,640 --> 00:25:38,280
iOS 12或更高版本的iOS設備。

235
00:25:38,280 --> 00:25:48,640
接下來我們有code type，這是當機進程的CPU架構。

236
00:25:48,640 --> 00:26:00,960
而這個價值可以是ARM64，就像這個例子一樣，ARM，或者是最新的macOS處理器，x86

237
00:26:00,960 --> 00:26:06,680
對於Intel基礎的CPU。

238
00:26:06,680 --> 00:26:12,440
接下來的Role是在終止時分配給進程的任務Role。

239
00:26:12,440 --> 00:26:17,720
同樣，當分析Crash報告時，這個字段通常不是那麼有用。

240
00:26:17,720 --> 00:26:20,900
所以我通常會忽略它。

241
00:26:20,900 --> 00:26:26,480
父進程，這是發起Crash的進程的名稱和ID

242
00:26:26,480 --> 00:26:32,680
我們的案例中，它是launchd進程。

243
00:26:32,680 --> 00:26:38,400
以及聯盟，這是包含該應用的進程聯盟的名稱。

244
00:26:38,400 --> 00:26:44,880
進程聯盟追蹤了與相關進程之間的資源使用，例如一個操作

245
00:26:44,880 --> 00:26:50,880
系統進程在應用中支援特定API功能。

246
00:26:50,880 --> 00:26:56,880
大多數的流程，包括app extensions，都形成了他們自己的聯盟。

247
00:26:56,880 --> 00:27:04,160
我們有錯誤的日期與時間，以及app啟動的日期與時間。

248
00:27:04,160 --> 00:27:05,600
app。

249
00:27:05,600 --> 00:27:12,200
因此使用這兩個值，我們就可以計算出會話的持續時間。

250
00:27:12,200 --> 00:27:21,640
在我們的案例中，持續時間非常短，只有幾毫秒。

251
00:27:21,640 --> 00:27:28,360
最後就是OS version，也就是發生錯誤的操作系統版本，包括

252
00:27:28,360 --> 00:27:35,640
發生錯誤的版本編號。

253
00:27:35,640 --> 00:27:43,840
下一部分是異常資訊部分。

254
00:27:43,840 --> 00:27:47,160
每一份錯誤報告都包含異常資訊。

255
00:27:47,160 --> 00:27:52,720
這個資訊部分會告訴你為何進程被終止，但它可能無法完全解釋

256
00:27:52,720 --> 00:27:55,040
原因。

257
00:27:55,040 --> 00:28:00,040
這些資訊很重要，但往往被忽視。

258
00:28:00,040 --> 00:28:05,600
而且再次強調，這裡指的並不是API丟出的語言異常，而是

259
00:28:05,600 --> 00:28:09,720
OS 的異常。

260
00:28:09,720 --> 00:28:15,680
所以下面的欄位提供有關異常的訊息，但並不是每一個

261
00:28:15,680 --> 00:28:19,200
崩潰報告會包含所有下列欄位。

262
00:28:19,200 --> 00:28:31,600
首先，有異常類型，它包含了 Mac 異常的名字，在

263
00:28:31,600 --> 00:28:39,040
我們的情況下，是 XCBreakpoint，導致進程終止，以及 BSD 終止

264
00:28:39,040 --> 00:28:45,360
的訊號的名字，在我們的情況下，是 SIGTRAP。

265
00:28:45,360 --> 00:28:53,400
在這裡你可以看到多個異常類型和 BSD

266
00:28:53,400 --> 00:28:59,560
訊號的值，我們將試著在未來的講座上覆蓋這個議題。

267
00:28:59,560 --> 00:29:09,920
接下來，我們有異常代碼，這是關於異常的處理器特定的訊息，編碼成

268
00:29:09,920 --> 00:29:14,560
一個或多個64位元的十六進制數字。

269
00:29:14,560 --> 00:29:19,920
通常，這個欄位不存在，因為作業系統將資訊以人類可讀的形式，

270
00:29:19,920 --> 00:29:24,960
呈現在區段的其他欄位中。

271
00:29:24,960 --> 00:29:27,720
但我們這裡有它。

272
00:29:27,720 --> 00:29:34,760
接下來，我們有例外子型別和例外訊息欄位，它們，如您所見，並不是

273
00:29:34,760 --> 00:29:40,000
我們的Crash報告的其中一部分。

274
00:29:40,000 --> 00:29:45,840
但在另一個例子中我們可以看到它們。

275
00:29:45,840 --> 00:29:54,920
這是另一個Crash的部分，我們可以看到不同的例外類型，xccrash 和

276
00:29:54,920 --> 00:30:02,200
SIGABORT信號，這次我們有一個例外子類型，它是人類可讀的

277
00:30:02,200 --> 00:30:10,640
對於例外代碼的描述，是LaunchHang，而例外訊息包含

278
00:30:10,640 --> 00:30:15,920
從異常代碼中提取的額外的人類可讀信息，並且在我們的情況下，

279
00:30:15,920 --> 00:30:20,200
擴展花了太多時間初始化。

280
00:30:20,200 --> 00:30:28,760
這實際上是一個來自花費過長時間啟動的應用程序擴展的看門狗崩潰，

281
00:30:28,760 --> 00:30:37,200
這是它的樣子。

282
00:30:37,200 --> 00:30:44,000
回到我們這裡的崩潰。

283
00:30:44,000 --> 00:30:52,960
下一個欄位是exceptionNode，這個exceptionNode包含額外的信息，

284
00:30:52,960 --> 00:30:55,880
這些信息與一種特定的異常類型無關。

285
00:30:55,880 --> 00:31:04,880
如果此欄位包含EXC_CORPSE_NOTIFY，如我們的例子所示，崩潰並非來自

286
00:31:04,880 --> 00:31:10,520
硬件陷阱，可能是因為該進程被操作系統明確終止，或者

287
00:31:10,520 --> 00:31:15,080
進程調用了Abort。

288
00:31:15,080 --> 00:31:27,720
您可能在這裡看到的另一個值是 simulated。

289
00:31:27,720 --> 00:31:32,800
exceptionNode 中包含 simulated，再次強調，這不是崩潰。

290
00:31:32,800 --> 00:31:38,020
這個過程並未崩潰，但OS可能隨後請求終止此過程。

291
00:31:38,020 --> 00:31:40,600
進程的終止。

292
00:31:40,600 --> 00:31:52,420
而你可能在這裡看到的另一個值是非致命條件。

293
00:31:52,420 --> 00:31:57,720
這也適用於那些並未因為問題而終止的非崩潰案例，

294
00:31:57,720 --> 00:32:04,560
造成崩潰報告的問題並非致命的。

295
00:32:04,560 --> 00:32:13,160
接下來，終止原因包含在OS終止一個過程時指定的退出原因信息。

296
00:32:13,160 --> 00:32:16,200
進程。

297
00:32:16,200 --> 00:32:22,200
OS的關鍵組件，無論在進程內部還是外部，遇到致命的錯誤就會終止進程，

298
00:32:22,200 --> 00:32:26,960
並在此欄位記錄原因。

299
00:32:26,960 --> 00:32:31,280
你可以在此欄位中查找的信息範例包含關於無效代碼

300
00:32:31,280 --> 00:32:38,280
簽名、缺少依賴庫，或在未含有Info.plist中的目的字串情況下存取隱私敏感信息

301
00:32:38,280 --> 00:32:42,360
的訊息。

302
00:32:42,360 --> 00:32:50,760
最後，你可以看到由Thread觸發的，就像我們的情況，或者你可以看到

303
00:32:50,760 --> 00:33:00,020
崩潰的Thread，它可以是01。

304
00:33:00,020 --> 00:33:04,360
所以要么是這個要么是那個。

305
00:33:04,360 --> 00:33:19,520
它們基本上標記了引起Crash的Thread或者導致異常的Thread。

306
00:33:19,520 --> 00:33:26,240
下一部分是診斷消息部分，然而，我們的Crash就沒有

307
00:33:26,240 --> 00:33:29,040
擁有。

308
00:33:29,040 --> 00:33:38,000
但我們可以使用另一個Crash。

309
00:33:38,000 --> 00:33:44,040
我們參考這一部分。

310
00:33:44,040 --> 00:33:49,040
所以，操作系統有時會在Crash報告中包括額外的診斷信息。

311
00:33:49,040 --> 00:33:54,140
這些信息使用各種格式，取決於Crash的原因，並且並不是

312
00:33:54,140 --> 00:33:59,160
每一個Crash報告中都有，正如你剛才看到的。

313
00:33:59,160 --> 00:34:05,440
在這個首例中，剛好在進程終止前發生的framework Error消息

314
00:34:05,440 --> 00:34:09,920
出現在了應用程序特定信息領域中。

315
00:34:09,920 --> 00:34:14,840
在我們的例子中，調度框架記錄了一個由於不正確使用DispatchQueue而產生的錯誤。

316
00:34:14,840 --> 00:34:19,740
在我們的例子中，調度框架記錄了一個由於不正確使用DispatchQueue而產生的錯誤。

317
00:34:19,740 --> 00:34:33,240
再举一个例子，应用程序特定的信息揭示了在访问时的越界错误

318
00:34:33,240 --> 00:34:38,960
一個Swift Array。

319
00:34:38,960 --> 00:34:51,080
另一個例子是監視器終止，其中終止

320
00:34:51,080 --> 00:34:56,160
描述字段包含監視器觸發的原因。

321
00:34:56,160 --> 00:35:04,040
在我們的情況下，因為我們的應用程序耗盡了我提到的20秒的實時配额，

322
00:35:04,040 --> 00:35:10,080
列得是19.97秒。

323
00:35:10,080 --> 00:35:17,640
所以如果我们回到我们原来使用的崩溃报告，我们可以看到这个崩溃

324
00:35:17,640 --> 00:35:21,480
並未有任何診斷訊息。

325
00:35:21,480 --> 00:35:31,280
這可能是因為有時操作系統可能正在保護隱私敏感的資訊。

326
00:35:31,280 --> 00:35:41,680
並且僅移除或不加入這部分至 Crash 報告。

327
00:35:41,680 --> 00:35:49,520
我們會忽略這個 kernel triage，因為它通常不會出現在 Crash 報告中

328
00:35:49,520 --> 00:35:53,400
並且也不包含任何有價值的資訊。

329
00:35:53,400 --> 00:35:57,240
接下來我們來看看 backtraces 部分。

330
00:35:57,240 --> 00:36:06,200
backtrace 部分含有在崩潰時所有運行的 Threads 的痕跡

331
00:36:06,200 --> 00:36:08,000
在 Crash 的時候。

332
00:36:08,000 --> 00:36:11,940
所以在我們的案例中，我們有八個 Threads。

333
00:36:11,940 --> 00:36:22,040
從 0 到 7，運行著八個 Threads，我們有每個 Threads 的 backtrace。

334
00:36:22,040 --> 00:36:29,520
所以基本上我們可以得到當程序終止時運行的所有代碼的文檔。

335
00:36:29,520 --> 00:36:35,680
你在這裡看到的 backtraces，與你在暫停處理過程時看到的極其相似

336
00:36:35,680 --> 00:36:37,680
使用 debugger。

337
00:36:37,680 --> 00:36:43,420
所以讓我們快速做一次以感覺一下。

338
00:36:43,420 --> 00:36:56,720
所以如果我們運行EssentialApp，我會暫停在這個將於SceneDelegate

339
00:36:56,720 --> 00:37:00,760
連接到API的入口行上的調試器。

340
00:37:00,760 --> 00:37:06,200
而在這裡，您看到第一個線程，Thread one，即主線程。

341
00:37:06,200 --> 00:37:17,680
我們看到所有的回溯，從應用程序啟動的第26條條目開始，一直到我們特定的

342
00:37:17,680 --> 00:37:18,800
一行代碼。

343
00:37:18,800 --> 00:37:24,920
所以從UIApplication Main以及所有其他參與的調用, 到所有

344
00:37:24,920 --> 00:37:32,340
特定的函數調用，一直到我們設置的斷點。

345
00:37:32,340 --> 00:37:38,060
如果你願意做比較的話，你會發現我的堆疊追蹤在此就是

346
00:37:38,060 --> 00:37:41,440
完全相同的堆疊追蹤。

347
00:37:41,440 --> 00:37:47,280
所以這就是堆疊追蹤在Crash報告中的呈現方式。

348
00:37:47,280 --> 00:37:51,980
它們包含了所有從入口點開始的函數調用。

349
00:37:51,980 --> 00:38:01,560
所以從start function開始，到每一個涉及的函數，一直到你的，你的明確

350
00:38:01,560 --> 00:38:02,560
code。

351
00:38:02,560 --> 00:38:11,980
所以你可以在這裡看到一堆系統框架，然後是我們自己的code。

352
00:38:11,980 --> 00:38:19,200
我們獲得了每個運行線程的堆疊追蹤。

353
00:38:19,200 --> 00:38:26,380
所以對，我再次提到這個入口點，像start function，然後我們調用

354
00:38:26,380 --> 00:38:29,280
從EssentialApp開始的Main。

355
00:38:29,280 --> 00:38:36,180
然後是UIApplication Main，你的應用程序運行，然後RunLoop開始。

356
00:38:36,180 --> 00:38:45,680
所以這類似於，每個iOS應用或大部分iOS

357
00:38:45,680 --> 00:38:48,860
我們擁有的應用的共同入口點。

358
00:38:48,860 --> 00:38:56,220
在這個回縮部分，我們可以有一個最後的異常回縮，但在我們的情況下再次缺失，

359
00:38:56,220 --> 00:39:03,100
不過我們在其中一次Crash中有它。

360
00:39:03,100 --> 00:39:10,980
所以在Thread zero的堆疊追蹤和其他Threads之前，我們有另一個堆疊追蹤，

361
00:39:10,980 --> 00:39:18,460
這就是最後的異常回縮。

362
00:39:18,460 --> 00:39:23,060
由語言異常引起的Crashes包括一個額外的回縮，這就是最後

363
00:39:23,060 --> 00:39:30,340
的異常回縮，如我所說，位於第一個Thread之前。

364
00:39:30,340 --> 00:39:37,860
每一個回縮的第一行有Thread的數字和Thread的名字。

365
00:39:37,860 --> 00:39:47,480
所以，如果我們回到我們最初的Crash報告，我們可以看到Thread數字為零，並且名稱

366
00:39:47,480 --> 00:39:55,740
缺失，因為出於隱私考慮，Crash報告被送到Crash organizer時，

367
00:39:55,740 --> 00:40:02,420
Xcode並未包含Thread名稱，只有Thread編號。

368
00:40:02,420 --> 00:40:10,300
因此再一次，以我們的範例來說，我們有從Thread零到七的backtraces，所以總共有八個Threads

369
00:40:10,300 --> 00:40:15,220
總共。

370
00:40:15,220 --> 00:40:22,500
而Crash Thread就是Thread零，它在MainQueue上運作並被識別

371
00:40:22,500 --> 00:40:27,140
作為應用的Main Thread。

372
00:40:27,140 --> 00:40:39,260
在Thread編號之後，每一行的backtrace都代表著其中的一個stack frame。

373
00:40:39,260 --> 00:40:45,580
每欄代表不同的資訊。

374
00:40:45,580 --> 00:40:53,020
首先，零、一、二是stack frame的編號。

375
00:40:53,020 --> 00:40:59,100
Stack frames是以呼叫的順序排列，其中frame零是在

376
00:40:59,100 --> 00:41:05,900
執行終止時正在執行的函式，而frame一則是呼叫frame零中函式的函式。

377
00:41:05,900 --> 00:41:12,940
frame zero和frame two是調用在frame one的函數的函數，依此類推。

378
00:41:12,940 --> 00:41:16,340
你知道我在說什麼。

379
00:41:16,340 --> 00:41:27,260
然後是二進制名稱，其中包含該函數來自哪個二進制。

380
00:41:27,260 --> 00:41:32,180
然後有一些地址，這是正在執行的機械指令的地址。

381
00:41:32,180 --> 00:41:38,140
對於每個backtrace中的frame zero，這是正在執行的機械指令的地址。

382
00:41:38,140 --> 00:41:41,300
在處理過程終止時的Thread上。

383
00:41:41,300 --> 00:41:49,520
對其他堆疊框架，這是開始執行的第一個機器指令的地址。

384
00:41:49,520 --> 00:41:58,580
在控制回到該堆疊框架之後。

385
00:41:58,580 --> 00:42:06,100
然後我們有函數的名稱。

386
00:42:06,100 --> 00:42:12,540
所以在我們的情況下是SceneDelegate Scene 將連接到options。

387
00:42:12,540 --> 00:42:19,220
而因為這是一個完全符號化的Crash報告，函數的名稱顯示出來。

388
00:42:19,220 --> 00:42:25,380
順帶一提，我們將在未來的課程中討論symbolication。

389
00:42:25,380 --> 00:42:32,300
但只是簡化一下，symbolication就是將記憶體地址

390
00:42:32,300 --> 00:42:43,020
轉換成人類可讀或開發者可讀的格式，其中包含了檔案名稱、行號，

391
00:42:43,020 --> 00:42:44,020
函數名稱。

392
00:42:44,020 --> 00:42:50,660
所以這是我們開發者可以理解的東西，而不只是記憶體地址那

393
00:42:50,660 --> 00:43:01,780
寫在未經symbolicate的 Crash report中，對我們來說實在是無法使用。

394
00:43:01,780 --> 00:43:10,820
接下來我們有一個位元組偏移量，這個案例是加上2288。

395
00:43:10,820 --> 00:43:15,220
這是從函數的入口點到當前指令在

396
00:43:15,220 --> 00:43:18,500
函數中的偏移量。

397
00:43:18,500 --> 00:43:30,300
最後我們有檔案名稱SceneDelegate.Swift和行號65。

398
00:43:30,300 --> 00:43:40,620
再次，這出現是因為這是一份完全符號化的崩潰報告。

399
00:43:40,620 --> 00:43:58,100
在某些情況下，檔案名稱可能會遺失並被編譯器生成的替換。

400
00:43:58,100 --> 00:44:02,340
當編譯器為該框架創建代碼，並且該代碼並非

401
00:44:02,340 --> 00:44:05,380
在你的源文件中時，就會發生這種情況。

402
00:44:05,380 --> 00:44:10,420
但是，如果這是崩潰線程中的最頂層框架，請查看前面的堆疊框架

403
00:44:10,420 --> 00:44:14,340
尋找線索。

404
00:44:14,340 --> 00:44:20,780
或者，你在這裡可以看到的另一件事是行號為零。

405
00:44:20,780 --> 00:44:24,620
如果源檔案的行號是零，這意味著回溯並未對應

406
00:44:24,620 --> 00:44:28,220
到原始檔案中特定行的代碼。

407
00:44:28,220 --> 00:44:34,500
這是因為編譯器優化了代碼，一個例子是內聯函數

408
00:44:34,500 --> 00:44:38,860
而在Crash時間執行的代碼並不對應於確切的行數

409
00:44:38,860 --> 00:44:40,060
在原始碼中。

410
00:44:40,060 --> 00:44:49,040
因此在符號化時，目前的指令並無對應的行數。

411
00:44:49,040 --> 00:44:53,620
所以你會看到一個零值。

412
00:44:53,620 --> 00:45:02,420
但是你總是可以用其他框架作為參考。

413
00:45:02,420 --> 00:45:09,300
而且你可以使用所有這些回溯以了解你的應用在Crash的時候在做什麼

414
00:45:09,300 --> 00:45:10,300
Crash。

415
00:45:10,300 --> 00:45:17,220
因此，您可以看到所有彼此調用的函數或所有线程正在做的事情。

416
00:45:17,220 --> 00:45:26,380
如果有任何Thread在做一些有趣或不尋常的事情，你都可以在這裡看到。

417
00:45:26,380 --> 00:45:29,820
然後，我們將討論一些分析這些回溯的策略。

418
00:45:29,820 --> 00:45:37,420
目前，你只需要明白這裡資訊的格式。

419
00:45:37,420 --> 00:45:43,460
我們可以看看其餘的部分。

420
00:45:43,460 --> 00:45:54,140
第一部分是這個Thread state，它包含了CP註冊器及其值

421
00:45:54,140 --> 00:45:57,780
在崩潰的時候。

422
00:45:57,780 --> 00:46:02,380
識別Thread state是一個需要理解應用程式

423
00:46:02,380 --> 00:46:06,540
二進制介面或作業系統的ABI的高階主題。

424
00:46:06,540 --> 00:46:12,780
所以現在進入這個細節並無意義，因為它非常、非常複雜，您

425
00:46:12,780 --> 00:46:18,340
有更大的機會通過查看所有其他資訊並

426
00:46:18,340 --> 00:46:26,220
開始分析每個CP註冊器中的值來修復崩潰，

427
00:46:26,220 --> 00:46:29,820
並嘗試分解

428
00:46:29,820 --> 00:46:33,060
代碼。

429
00:46:33,060 --> 00:46:40,220
最後，有一個binary Images部分。

429
00:46:33,060 --> 00:46:40,220
這包含在終止時進程中加載的所有代碼，例如您的應用程式。

430
00:46:40,220 --> 00:46:45,220
可執行，它位於第一行，即 EssentialApp，或像系統架構這樣的

431
00:46:45,220 --> 00:46:54,340
UIKit core，core Foundation，graphics services，Foundation 等等。

432
00:46:54,340 --> 00:47:03,780
這個列表包含了前面範例中的元件。

433
00:47:03,780 --> 00:47:08,420
每一行將會包含一個不同的二進位制。

434
00:47:08,420 --> 00:47:10,260
我們來看看這個格式是什麼。

435
00:47:10,260 --> 00:47:16,880
順便說一下，我們正在查看的格式對於 iOS，watchOS，和 tvOS 是相同的。

436
00:47:16,880 --> 00:47:25,700
首先，我們有一個地址範圍，它是在進程內的二進位制影像地址範圍。

437
00:47:25,700 --> 00:47:27,280
在進程中的。

438
00:47:27,280 --> 00:47:33,060
第一個地址是二進位制的載入地址。

439
00:47:33,060 --> 00:47:43,100
然後有二進位制名稱，比如 EssentialApp，CPU 架構，如 ARM64，一個建設

440
00:47:43,100 --> 00:47:51,180
UUID，像我剛選擇的那樣，可以唯一確定二進位制影像。

441
00:47:51,180 --> 00:47:56,180
我們可以用這些來定位相對應的DSYM，當我們進行符號化時。

442
00:47:56,180 --> 00:48:01,560
我們將在另一堂課上看到我們如何做到這一點，就像我之前說的。

443
00:48:01,560 --> 00:48:04,600
最后，是到二進制檔案的路徑。

444
00:48:04,600 --> 00:48:12,300
路徑相當長，但最終，我們找到了到我們EssentialApp或核心的路徑

445
00:48:12,300 --> 00:48:18,500
在系統庫框架下的基礎架構。

446
00:48:18,500 --> 00:48:22,440
所以如我們所見, 這就是用於iOS的格式。

447
00:48:22,440 --> 00:48:29,500
如果你想看到macOS格式的一些變化，我將使用另一個崩潰報告。

448
00:48:29,500 --> 00:48:33,780
然後我們將在這裡看到一個類似的部分。

449
00:48:33,780 --> 00:48:41,100
格式非常相似，也有一個地址範圍。

450
00:48:41,100 --> 00:48:54,860
在二進制名稱內，有一個星號或加號，這取決於這個二進制檔是否是一個系統


451
00:48:54,860 --> 00:49:10,220
二進制或不是，這個識別符和路徑可能被混淆或只是部分

452
00:49:10,220 --> 00:49:16,380
路徑被替換為占位符以保護隱私。

453
00:49:16,380 --> 00:49:18,300
所以非常相似。

454
00:49:18,300 --> 00:49:25,880
你可能在這裡有一個版本信息，如果可用的話，就像這種情況。

455
00:49:25,880 --> 00:49:35,660
核心基礎版本6.9。

456
00:49:35,660 --> 00:49:41,180
回到我們的崩潰。

457
00:49:41,180 --> 00:49:51,100
讓我們談談一些閱讀這些崩潰報告的一般方法。

458
00:49:51,100 --> 00:49:57,540
因此，當分析崩潰報告時，閱讀所有部分中的所有信息。

459
00:49:57,540 --> 00:50:03,740
當你構建一個關於崩潰原因的假說時，請對報告中各部分的數據提出問題

460
00:50:03,740 --> 00:50:09,860
以完善或否證假說。

461
00:50:09,860 --> 00:50:20,500
一些線索被崩潰報告中的欄位明確捕獲。

462
00:50:20,500 --> 00:50:27,220
但其他的細微之處需要透過觀察細節以發掘它們。

463
00:50:27,220 --> 00:50:33,020
進行完整的Crash報告分析並擬定假設需要時間和

464
00:50:33,020 --> 00:50:42,020
練習來發展，但這是讓您的app變得更強大的關鍵工具。

465
00:50:42,020 --> 00:50:46,460
從Crash報告的信息中找到一個起點，以便從

466
00:50:46,460 --> 00:50:51,100
用戶的角度來考慮Crash並精緻化假設。

467
00:50:51,100 --> 00:51:03,500
例如，看一下可能表明該應用程序特定功能的backtrace中的框架，

468
00:51:03,500 --> 00:51:05,300
該應用程序正在使用中。

469
00:51:05,300 --> 00:51:14,260
而你可以考慮一下Crash報告中的其他信息與該功能有什麼關聯。

470
00:51:14,260 --> 00:51:19,900
另外，如果您有很多Crash報告，可嘗試將它們組織成群組以釐清Crash的來源，

471
00:51:19,900 --> 00:51:23,660
這是Crash的來源。

472
00:51:23,660 --> 00:51:29,020
如果許多Crash報告包含完全相同的資訊，那麼問題很可能是持續存在的。

473
00:51:29,020 --> 00:51:35,960
Crash報告中的公共詳細資訊可以幫助您找出問題的所在。

474
00:51:35,960 --> 00:51:40,620
如果你有所有Crash報告看起來都不同，但你懷疑其根本原因是相同的，

475
00:51:40,620 --> 00:51:46,740
請注意看起來不尋常的任何細節。

476
00:51:46,740 --> 00:51:50,980
將所有包含不尋常細節的Crash報告放入他們自己的組別中。

477
00:51:50,980 --> 00:51:56,420
透過根據相當和不相似的細節來分組Crash報告，你有時會找到

478
00:51:56,420 --> 00:52:09,620
導致Crash的原因，這在個別查看Crash報告時是看不出來的。

479
00:52:09,620 --> 00:52:16,540
如果你有多個相似的Crash報告，使用頭部資訊來幫助

480
00:52:16,540 --> 00:52:20,940
理解問題的範圍和針對特定的操作系統版本

481
00:52:20,940 --> 00:52:24,180
與設備，你需要再現該問題。

482
00:52:24,180 --> 00:52:30,740
有些問題可以幫助您精煉對於Crashes的假設，例如，Crash是否發生在

483
00:52:30,740 --> 00:52:34,820
多個版本的應用程式，或只有一個？

484
00:52:34,820 --> 00:52:41,060
所以您會查看多個Crash報告，看看版本是什麼。

485
00:52:41,060 --> 00:52:46,580
Crash是否發生在多個版本的操作系統上？

486
00:52:46,580 --> 00:52:52,860
所以你要查看在多個Crashes中的操作系統，然後得出結論。

487
00:52:52,860 --> 00:53:01,140
如果它僅限於iOS 15，或者如果跨越多個OS版本，那就是

488
00:53:01,140 --> 00:53:04,900
有用的訊息。

489
00:53:04,900 --> 00:53:14,060
其他資訊是，Crash是否來自您的主要應用程式，或者來自您的其中一個應用程式

490
00:53:14,060 --> 00:53:17,240
擴展？

491
00:53:17,240 --> 00:53:29,660
所以對於這點，您可以使用process和path字段來查看Crash發生的位置。

492
00:53:29,660 --> 00:53:35,100
這個錯誤只來自一種設備，比如說是 iPad 而不是 iPhone 嗎？

493
00:53:35,100 --> 00:53:41,900
對於這種情況，你可以檢查硬件 Model 然後看看它在設備之間的分佈

494
00:53:41,900 --> 00:53:45,540
是什麼。

495
00:53:45,540 --> 00:53:51,820
這個錯誤是來自你的應用 TestFlight BETA 版還是來自 AppStore 的版本？

496
00:53:51,820 --> 00:54:00,160
然後你可以看一下 Crash reporter key 或 beta identifier key 並馬上

497
00:54:00,160 --> 00:54:07,120
遇見這是哪種類型的錯誤。

498
00:54:07,120 --> 00:54:10,100
該應用在什麼設備 Model 上崩潰了？

499
00:54:10,100 --> 00:54:14,940
你在有著相同能力的設備上做了多少測試？

500
00:54:14,940 --> 00:54:22,660
對於這個，你可以用應用變體或硬件 Model。

501
00:54:22,660 --> 00:54:28,180
是有多個用戶遭遇了崩潰還是只有少數幾個獨特的用戶？

502
00:54:28,180 --> 00:54:36,100
對此，你可以使用 Crash reporter key 或是 beta identifier 來查看是否有一些用戶

503
00:54:36,100 --> 00:54:45,580
如果用戶不只一次Crash，或者這只是偶爾發生一兩次的情況。

504
00:54:45,580 --> 00:54:49,780
另一個重要的問題是，應用運行多久才會崩潰？

505
00:54:49,780 --> 00:55:02,580
所以你可以使用Crash的日期和啟動時間來計算會話的持續時間。

506
00:55:02,580 --> 00:55:09,980
如果你發現一個很長的會話，比如幾個小時或者幾天，那麼你可能會有一個假設

507
00:55:09,980 --> 00:55:13,540
關於為什麼Crash會發生。

508
00:55:13,540 --> 00:55:19,380
或者，如果你看到一個很短的持續時間，你可以得出結論說有些事情

509
00:55:19,380 --> 00:55:25,520
正在你的應用啟動期間發生。

510
00:55:25,520 --> 00:55:31,020
那就是我們如何看待標題信息的方式。

511
00:55:31,020 --> 00:55:36,620
我們也希望看一下異常信息，因為每個Crash報告都會記錄

512
00:55:36,620 --> 00:55:43,060
顯示應用進程終止的確切機制的異常信息。

513
00:55:43,060 --> 00:55:48,140
終止總是錯誤處理的最後一步，但它從無法恢復的

514
00:55:48,140 --> 00:55:52,180
應用程式或我們使用的框架出現問題時就開始了。

515
00:55:52,180 --> 00:55:57,800
例如，應用程式可能直接要求終止，如調用abort，所以你可能

516
00:55:57,800 --> 00:56:01,880
在Crash Thread的frame 0上看到一個abort。

517
00:56:01,880 --> 00:56:08,540
但那不是原因，那只是最後一步。

518
00:56:08,540 --> 00:56:13,260
作為一個不同的例子，作業系統可能會終止進程以實施某種系統策略，

519
00:56:13,260 --> 00:56:20,740
例如看門狗，以確保應用程式的反應能力。

520
00:56:20,740 --> 00:56:25,100
例外信息可縮窄你正在分析的Crash的來源，並幫助

521
00:56:25,100 --> 00:56:31,420
識別你在Crash報告的其他部分尋找的線索。

522
00:56:31,420 --> 00:56:38,740
所以試著回答以下問題。

523
00:56:38,740 --> 00:56:42,580
例外類型是什麼？

524
00:56:42,580 --> 00:56:49,100
哪個Thread觸發了Crash？

525
00:56:49,100 --> 00:57:05,100
Crash Thread的frames與exception type之間的關係是什麼？

526
00:57:05,100 --> 00:57:10,020
對於某些類型的問題，Crash報告可能包含額外的診斷信息

527
00:57:10,020 --> 00:57:14,940
在exception information部分和backtracing部分之間。

528
00:57:14,940 --> 00:57:19,540
此信息與exception type直接相關。

529
00:57:19,540 --> 00:57:28,520
基於exception type，Crash是由於像uncut language exception這樣的原因造成的，

530
00:57:28,520 --> 00:57:31,380
在我們此處的情況下？

531
00:57:31,380 --> 00:57:37,580
我們可以看到一個未切割的NSUnknownKeyException。

532
00:57:37,580 --> 00:57:42,540
如果是這樣，關於拋出該異常的API的額外信息在Message中嗎？

533
00:57:42,540 --> 00:57:51,100
好的，我們可以看到在我的class setValueForUndefinedKey，

534
00:57:51,100 --> 00:57:57,100
這個class不符合keyValueCodingCompliant。

535
00:57:57,100 --> 00:58:12,860
再次,依據異常的類型，這次Crash是否因為記憶體存取問題所導致？

536
00:58:12,860 --> 00:58:16,220
這又是一個重要的問題需要提出。

537
00:58:16,220 --> 00:58:23,780
而如果有一個針對應用程式的特定信息字段，它包含了什麼內容？

538
00:58:23,780 --> 00:58:30,020
該訊息中是否命名了特定的API，就像我們剛才看到的那樣？

539
00:58:30,020 --> 00:58:36,740
以及在你的程式碼中該如何使用那個API？

540
00:58:36,740 --> 00:58:44,180
或者如果你收到了一個終止描述，是否有一個終止描述字段並且

541
00:58:44,180 --> 00:58:52,920
該字段指示了一些東西？

542
00:58:52,920 --> 00:58:57,140
在Crash報告的反向追蹤中顯示了在Crash之時正在執行的確切方法。

543
00:58:57,140 --> 00:58:58,760
Crash。

544
00:58:58,760 --> 00:59:07,120
作為一個開始的點，查看Crash Thread以及如果有的話最後一個異常反向追蹤。

545
00:59:07,120 --> 00:59:12,540
如果我們有一個。

546
00:59:12,540 --> 00:59:16,180
並試著回答以下的問題。

547
00:59:16,180 --> 00:59:21,700
對於 Crash Thread，這個 Thread 在應用程序中執行的是什麼功能？

548
00:59:21,700 --> 00:59:27,580
它是 Main Thread，還是另一個具有特定目的的 Thread？

549
00:59:27,580 --> 00:59:34,140
有語言異常被拋出嗎？

550
00:59:34,140 --> 00:59:39,420
最後的異常追蹤顯示的是什麼？

551
00:59:39,420 --> 00:59:43,740
你看看這些追蹤。

552
00:59:43,740 --> 00:59:55,860
應用程序的哪些部分使用這個 Thread 和在追蹤中出現的功能？

553
00:59:55,860 --> 01:00:16,980
你的應用程序和系統框架中的哪些混合二進制在追蹤中？

554
01:00:16,980 --> 01:00:23,260
即使追蹤中的功能不是您直接呼叫的，它們也包含了關鍵的線索。

555
01:00:23,260 --> 01:00:35,500
所以像這個例子中，你在入門層級上只看到 EssentialApp 的條目

556
01:00:35,500 --> 01:00:37,980
在 AppDelegate 上面，就是這樣。

557
01:00:37,980 --> 01:00:47,880
從那裡開始，只有對系統二進制檔的呼叫，但仍然有重要的資訊。

558
01:00:47,880 --> 01:00:55,940
一個例子是在另一次崩潰中發生，我們只獲得了最後的異常反跟蹤

559
01:00:55,940 --> 01:01:00,460
在這裡。

560
01:01:00,460 --> 01:01:12,020
再一次，我們可以看到除了與migrate app相關的堆棧框架14，所有其他的二進制檔

561
01:01:12,020 --> 01:01:22,140
和函數都是系統函數。

562
01:01:22,140 --> 01:01:27,740
但崩潰是由於錯誤的popover配置所導致。

563
01:01:27,740 --> 01:01:40,420
框架3和4提供了這次崩潰與呈現一個ViewController，UI

564
01:01:40,420 --> 01:01:42,900
Presentation controller相關的線索。

565
01:01:42,900 --> 01:01:52,660
如果我們查看框架2，我們可以看到它實際上是一個UI popover Presentation controller。

566
01:01:52,660 --> 01:01:57,660
這個資訊助你縮小了需要重點處理的應用程式代碼部分。

567
01:01:57,660 --> 01:02:07,080
所以我們只需尋找使用UI popover Controllers的部分。

568
01:02:07,080 --> 01:02:15,100
即使在最後的異常追蹤中沒有特定的AppCode，我們依然可以

569
01:02:15,100 --> 01:02:20,860
有些想法知道去哪裡尋找。

570
01:02:20,860 --> 01:02:29,460
回到我們展示過的原始Crash報告。

571
01:02:29,460 --> 01:02:33,460
我想提一下，你通常可以基於

572
01:02:33,460 --> 01:02:37,740
Thread背景追蹤的底部框架來判定其功能。

573
01:02:37,740 --> 01:02:52,700
所以一個應用的主Thread在底部框架中有NSApplication或是UIApplication Main。

574
01:02:52,700 --> 01:03:05,580
而其他由dispatch framework建立的Threads在底部框架中有start_wqthread。

575
01:03:05,580 --> 01:03:12,180
當我們仔細觀察Crash Thread的背景追蹤時，思考一下你的應用是否以一種連貫的

576
01:03:12,180 --> 01:03:22,780
狀態出現，這符合你對應用功能的期待。

577
01:03:22,780 --> 01:03:29,380
所以再一次，看看 Thread 0，應該是否應從這個特定的

578
01:03:29,380 --> 01:03:30,380
Thread上執行應用程式的代碼？

579
01:03:30,380 --> 01:03:35,100
Crash Thread 是背景 Thread 還是 Main Thread？

580
01:03:35,100 --> 01:03:40,000
一個重要的問題是，有沒有任何的 backtraces 顯示應用程式在操作 UI 元素

581
01:03:40,000 --> 01:03:42,740
除了在 Main Thread上的任何其他 Thread？

582
01:03:42,740 --> 01:03:53,100
因為我們都知道，UIKit 對於從背景設定 UIKit 物件值相當嚴格

583
01:03:53,100 --> 01:03:54,940
Threads。

584
01:03:54,940 --> 01:04:01,060
為了更徹底地測試，您可以使用來自

585
01:04:01,060 --> 01:04:09,900
Scheme Editor 的 Main Thread checker 進行 debug，這將會有一個 Main Thread checker 會發出信號，

586
01:04:09,900 --> 01:04:19,660
每當您嘗試從背景 Thread 設定 UIKit 屬性的情況。

587
01:04:19,660 --> 01:04:22,460
所以這可能非常有用。

588
01:04:22,460 --> 01:04:27,180
另一個問題與有 Completion handlers 的 API 相關。

589
01:04:27,180 --> 01:04:38,620
所以，如果你在這些backtraces中看到一個帶有Completion handler的API，該API是否保證

590
01:04:38,620 --> 01:04:41,340
那個Completion handler具體的隊列？

591
01:04:41,340 --> 01:04:43,340
所以你應該要檢查這個。

592
01:04:43,340 --> 01:04:54,380
並且檢查是否該代碼調用是在那個預期的隊列上。

593
01:04:54,380 --> 01:04:59,660
除了Crash Thread或語言異常的backtrace，其他的Threads

594
01:04:59,660 --> 01:05:07,860
backtrace可以提供關於Crash的更多細微線索。

595
01:05:07,860 --> 01:05:12,740
所以，在某些類型的Crashes，Crash Threads的backtrace可能並不包含問題的源頭，

596
01:05:12,740 --> 01:05:23,500
如watchdog終止或memory access Crashes，memory access Crashes。

597
01:05:23,500 --> 01:05:34,580
最後，你應該檢查一下二進制圖像，並確保所有的二進制，

598
01:05:34,580 --> 01:05:36,740
至少你的二進制，都在那裡列出。

599
01:05:36,740 --> 01:05:43,260
所以如果你的應用程式有載入任何框架，確保它們在這裡顯示。

600
01:05:43,260 --> 01:05:48,660
如果你正在調查一個看門狗終止，並且你的應用程式內有大量的框架

601
01:05:48,660 --> 01:05:57,900
那這可能就是你的應用程式啟動時間需要較長的原因。

602
01:05:57,900 --> 01:05:59,520
謝謝。

603
01:05:59,520 --> 01:06:04,420
所以我知道這可能聽起來有些理論性，正如我剛開始說的，但實際上

604
01:06:04,420 --> 01:06:11,700
在我們試圖看更多，我知道，具體的
範例之前，理解所有或大部分可用的資訊是很重要的，

605
01:06:11,700 --> 01:06:20,300
只是為了理解所有或大部分的資訊，因為有時我們就是不知道如何閱讀這些報告。

606
01:06:20,300 --> 01:06:25,180
所以對我來說，當我開始理解這些資訊時，這是一個很大的進步，

607
01:06:25,180 --> 01:06:33,460
所以對我來說，當我開始理解這些資訊時，這對我來說是一個很大的進步。

608
01:06:33,460 --> 01:06:41,140
在Crash報告中，給了我很多處理Crashes的操作空間

609
01:06:41,140 --> 01:06:42,260
以及Crash報告。

610
01:06:42,260 --> 01:06:49,260
所以我們將在不久的將來繼續另一講課。

611
01:06:49,260 --> 01:06:50,260
感謝大家。

612
01:06:50,260 --> 01:07:11,540
再見。