

1
00:00:00,466 --> 00:00:03,166
你好，Mike，嗨，Caio

2
00:00:03,166 --> 00:00:06,000
在此講座中，你將學習不同的方式

3
00:00:06,000 --> 00:00:06,933
來組織

4
00:00:06,933 --> 00:00:09,666
模組化的項目，讓我們從一個

5
00:00:09,666 --> 00:00:10,866
快速回顧開始

6
00:00:10,866 --> 00:00:13,200
關於Feed功能的當前設計

7
00:00:13,200 --> 00:00:14,633
功能特性

8
00:00:14,633 --> 00:00:17,500
所以在核心中我們有Feed 功能

9
00:00:17,500 --> 00:00:18,700
核心模塊

10
00:00:18,700 --> 00:00:22,000
它定義了模型和服務

11
00:00:22,000 --> 00:00:25,433
界面，確切地說，我們有模型

12
00:00:25,433 --> 00:00:28,466
和抽象，是的，它們代表了

13
00:00:28,466 --> 00:00:29,500
域

14
00:00:29,500 --> 00:00:32,233
所以我們有一個協議定義了一種方法

15
00:00:32,233 --> 00:00:32,700
來加載

16
00:00:32,700 --> 00:00:36,633
圖像數據，另一個來加載feed

17
00:00:36,633 --> 00:00:39,433
並且我們有一個代表了

18
00:00:39,433 --> 00:00:41,600
feed圖片的域模型

19
00:00:41,600 --> 00:00:44,133
所以這個核心模塊並不依賴於

20
00:00:44,133 --> 00:00:45,500
其它模塊

21
00:00:45,500 --> 00:00:48,000
這個模塊並沒有指向

22
00:00:48,000 --> 00:00:48,633
箭頭

23
00:00:48,633 --> 00:00:51,900
指向其他模塊，相反，其他的

24
00:00:51,900 --> 00:00:52,533
模塊

25
00:00:52,533 --> 00:00:55,733
依賴於核心模塊

26
00:00:55,733 --> 00:00:58,800
例如Feed API模塊

27
00:00:58,800 --> 00:01:02,000
有服務的實現和

28
00:01:02,000 --> 00:01:03,833
用例

29
00:01:03,833 --> 00:01:07,266
確實如此，Feed Cache也是一樣

30
00:01:07,266 --> 00:01:08,766
模塊

31
00:01:08,766 --> 00:01:12,066
我們再次使用了案例實現

32
00:01:12,066 --> 00:01:14,533
驗證和控制緩存

33
00:01:14,533 --> 00:01:15,433
基於

34
00:01:15,433 --> 00:01:18,633
完全按照業務規則

35
00:01:18,633 --> 00:01:21,100
所以Feed Cache也依賴於

36
00:01:21,100 --> 00:01:22,133
Feed Feature

37
00:01:22,133 --> 00:01:24,133
然後我們有Feed Presentation

38
00:01:24,133 --> 00:01:25,333
模塊, 它

39
00:01:25,333 --> 00:01:29,200
也依賴於Feed Feature模塊

40
00:01:29,200 --> 00:01:31,266
還有Feed Presentation模塊

41
00:01:31,266 --> 00:01:32,233
翻譯

42
00:01:32,233 --> 00:01:35,433
將feed圖像轉換為可呈現的數據

43
00:01:35,433 --> 00:01:38,633
可以由UI顯示出來

44
00:01:38,633 --> 00:01:42,066
最後我們有渲染出來

45
00:01:42,066 --> 00:01:45,433
在螢幕上呈現feed image view model的UI

46
00:01:45,433 --> 00:01:48,233
確實如此，特別是UIKit

47
00:01:48,233 --> 00:01:49,100
的實現

48
00:01:49,100 --> 00:01:51,833
針對iOS，因為這是模塊化

49
00:01:51,833 --> 00:01:53,100
的設計，我們很容易

50
00:01:53,100 --> 00:01:55,666
以SwiftUI來替換這個UI

51
00:01:55,666 --> 00:01:57,266
實現，例如不需要

52
00:01:57,266 --> 00:01:58,066
改變

53
00:01:58,066 --> 00:02:01,666
其他模塊中的任何內容就可以做到

54
00:02:01,666 --> 00:02:04,533
這就是模塊設計的威力

55
00:02:04,533 --> 00:02:05,500
所以在底部

56
00:02:05,500 --> 00:02:08,933
我們有針對特定平台的模塊和

57
00:02:08,933 --> 00:02:10,466
組件

58
00:02:10,466 --> 00:02:13,100
並且所有位於頂部的模塊都是

59
00:02:13,100 --> 00:02:14,300
平台無關的

60
00:02:14,300 --> 00:02:17,200
他們可以跨平台使用，你可以

61
00:02:17,200 --> 00:02:18,233
重複使用

62
00:02:18,233 --> 00:02:22,533
所有這些在 macOS，watchOS 中的模塊

63
00:02:22,533 --> 00:02:26,400
tvOS，iPadOS 等

64
00:02:26,400 --> 00:02:29,566
但你不能在 Linux 上使用它

65
00:02:29,566 --> 00:02:33,100
或者 Android 或 Microsoft 平台

66
00:02:33,100 --> 00:02:35,833
因為我們有 Core Data 在緩存

67
00:02:35,833 --> 00:02:36,633
模塊中

68
00:02:36,633 --> 00:02:40,233
還有 URLSession 在 API 模塊中，對吧？

69
00:02:40,233 --> 00:02:43,333
而 URLSession 和 Core Data 都是

70
00:02:43,333 --> 00:02:45,733
某種程度上平台特定的，因為他們

71
00:02:45,733 --> 00:02:46,466
只在

72
00:02:46,466 --> 00:02:49,500
Apple 平台上運作

73
00:02:49,500 --> 00:02:51,666
所以如果你只釋出 Apple

74
00:02:51,666 --> 00:02:52,800
應用程式

75
00:02:52,800 --> 00:02:54,466
應該沒問題，但如果你要在

76
00:02:54,466 --> 00:02:56,800
其它平台上使用這些模塊

77
00:02:56,800 --> 00:03:00,066
像是 Linux 或是網路，你應該要將

78
00:03:00,066 --> 00:03:02,533
這個實作移出

79
00:03:02,533 --> 00:03:03,733
模塊

80
00:03:03,733 --> 00:03:06,000
並且因為沒有其他的組件依賴於

81
00:03:06,000 --> 00:03:07,500
它，這是一個容易的改變

82
00:03:07,500 --> 00:03:09,900
我們簡單地將類型移至另一個

83
00:03:09,900 --> 00:03:10,800
模塊

84
00:03:10,800 --> 00:03:13,900
確實，你提取出來

85
00:03:13,900 --> 00:03:17,200
在此情況下的數據庫基礎架構

86
00:03:17,200 --> 00:03:19,833
以及 URLSession 的相同情況

87
00:03:19,833 --> 00:03:20,933
這是一個簡單的變更

88
00:03:20,933 --> 00:03:23,200
如你所見，沒有其他組件

89
00:03:23,200 --> 00:03:24,466
依賴它

90
00:03:24,466 --> 00:03:26,700
我們可以輕易地以

91
00:03:26,700 --> 00:03:28,233
其他框架替換 Core Data

92
00:03:28,233 --> 00:03:31,500
例如 Realm，SQLite或是內存

93
00:03:31,500 --> 00:03:32,766
數據庫

94
00:03:32,766 --> 00:03:35,900
確實，或者在 Feed API 的情況下

95
00:03:35,900 --> 00:03:37,900
我們可以改變基礎架構從

96
00:03:37,900 --> 00:03:39,100
URLSession

97
00:03:39,100 --> 00:03:42,000
切換到AlamoFire或是其他框架

98
00:03:42,000 --> 00:03:44,300
可能蘋果未來會推出的

99
00:03:44,300 --> 00:03:47,266
或者在 Linux 應用程序中，你可以使用一個

100
00:03:47,266 --> 00:03:48,000
Linux

101
00:03:48,000 --> 00:03:51,033
網絡框架，就這樣，這就是

102
00:03:51,033 --> 00:03:53,100
模組化設計的力量

103
00:03:53,100 --> 00:03:55,833
只要沒有其他組件依賴於

104
00:03:55,833 --> 00:03:56,633
框架

105
00:03:56,633 --> 00:04:00,233
我們就可以容易地替換它們， 並且

106
00:04:00,233 --> 00:04:02,933
讓我們拉遠一點來觀察只是

107
00:04:02,933 --> 00:04:05,033
模組依賴性

108
00:04:05,033 --> 00:04:07,100
所以 core 模組，它並不依賴任何

109
00:04:07,100 --> 00:04:08,700
其他模組

110
00:04:08,700 --> 00:04:11,433
Feed API依賴於Feed Feature

111
00:04:11,433 --> 00:04:12,933
但它並不依賴其他的

112
00:04:12,933 --> 00:04:14,066
模組

113
00:04:14,066 --> 00:04:16,233
以及Feed API的基礎架構在

114
00:04:16,233 --> 00:04:17,900
這種情況下將是URLSession

115
00:04:17,900 --> 00:04:20,866
或是AlamoFire 或者某個Linux框架

116
00:04:20,866 --> 00:04:22,933
依賴於Feed API 但僅僅在於

117
00:04:22,933 --> 00:04:24,533
Feed API

118
00:04:24,533 --> 00:04:26,633
Feed Cache 和Feed Cache架構

119
00:04:26,633 --> 00:04:29,166
完全相同適用於

120
00:04:29,166 --> 00:04:30,066
模組

121
00:04:30,066 --> 00:04:32,933
以及實際的數據庫基礎架構

122
00:04:32,933 --> 00:04:33,733
可能是

123
00:04:33,733 --> 00:04:37,033
Core Data，Realm，SQLite或者

124
00:04:37,033 --> 00:04:39,833
其他實現，然後在

125
00:04:39,833 --> 00:04:41,166
呈現方面，

126
00:04:41,166 --> 00:04:43,600
呈現依賴於核心

127
00:04:43,600 --> 00:04:44,866
模組也是

128
00:04:44,866 --> 00:04:46,800
而iOS模組依賴於

129
00:04:46,800 --> 00:04:48,233
呈現

130
00:04:48,233 --> 00:04:50,233
所以我們可以改變呈現和

131
00:04:50,233 --> 00:04:52,133
UI而不影響其他的

132
00:04:52,133 --> 00:04:53,333
模組

133
00:04:53,333 --> 00:04:55,333
我們可以改變API而不影響

134
00:04:55,333 --> 00:04:56,400
其他的模組

135
00:04:56,400 --> 00:04:57,833
我們可以改變Cache而不

136
00:04:57,833 --> 00:04:59,733
影響其他的模組

137
00:04:59,733 --> 00:05:01,900
我們可以插入新的用戶介面我們可以

138
00:05:01,900 --> 00:05:03,833
我們可以插入新的 Cache 基礎設施

139
00:05:03,833 --> 00:05:05,900
插入新的 API 基礎設施

140
00:05:05,900 --> 00:05:09,100
因為我們的模組在中心處是解耦的

141
00:05:09,100 --> 00:05:10,466
中心我們只有

142
00:05:10,466 --> 00:05:13,900
領域特定的服務抽象和

143
00:05:13,900 --> 00:05:17,100
領域模型，並且我們設有更

144
00:05:17,100 --> 00:05:18,066
專業化

145
00:05:18,066 --> 00:05:22,300
的實現，並在外圍層級

146
00:05:22,300 --> 00:05:26,400
有基礎設施的實現

147
00:05:26,400 --> 00:05:29,100
在更外部的層次，我們有

148
00:05:29,100 --> 00:05:30,533
構架

149
00:05:30,533 --> 00:05:31,900
這就是如何保護你的代碼的

150
00:05:31,900 --> 00:05:33,733
基底免於外部的

151
00:05:33,733 --> 00:05:37,666
影響。所以，我們可以以代表

152
00:05:37,666 --> 00:05:38,466
這些層次的

153
00:05:38,466 --> 00:05:41,733
圓形方式來呈現，那就是臭名昭著的

154
00:05:41,733 --> 00:05:44,933
洋蔥架構，就是這樣

155
00:05:44,933 --> 00:05:46,066
現在我們將要理解為什麼

156
00:05:46,066 --> 00:05:48,700
他們稱之為洋蔥架構

157
00:05:48,700 --> 00:05:51,733
所以在中心，我們有核心

158
00:05:51,733 --> 00:05:55,100
模型和服務介面

159
00:05:55,100 --> 00:05:59,333
這是平台和框架的不可知

160
00:05:59,333 --> 00:06:02,300
然後在外部層級，我們有使用

161
00:06:02,300 --> 00:06:04,000
案例實現、服務

162
00:06:04,000 --> 00:06:05,433
實現

163
00:06:05,433 --> 00:06:07,833
在我們的例子中，也包括呈現層.

164
00:06:07,833 --> 00:06:09,033
但是注意看

165
00:06:09,033 --> 00:06:10,700
Feed API並不知道Feed

166
00:06:10,700 --> 00:06:12,066
Cache，Feed Cache也不知道

167
00:06:12,066 --> 00:06:12,866
Presentation

168
00:06:12,866 --> 00:06:15,100
他們是獨立的，他們只知道

169
00:06:15,100 --> 00:06:16,633
關於直接的

170
00:06:16,633 --> 00:06:18,833
內部層次，也就是這個情況下的 Feed Feature

171
00:06:18,833 --> 00:06:20,800
個案

172
00:06:20,800 --> 00:06:23,666
然後在外部層次我們有

173
00:06:23,666 --> 00:06:24,800
基礎設施

174
00:06:24,800 --> 00:06:26,700
適配器將提供

175
00:06:26,700 --> 00:06:29,166
與外部的

176
00:06:29,166 --> 00:06:31,500
框架的通信，所以基礎設施

177
00:06:31,500 --> 00:06:32,533
適配器

178
00:06:32,533 --> 00:06:35,733
是平台或者框架

179
00:06:35,733 --> 00:06:39,166
特定的，所以Feed Cache基礎設施

180
00:06:39,166 --> 00:06:42,533
可能依賴於Core Data, Realm, SQLite

181
00:06:42,533 --> 00:06:45,033
來提供基礎設施

182
00:06:45,033 --> 00:06:45,900
實現

183
00:06:45,900 --> 00:06:48,866
正如你所看到的Feed Cache

184
00:06:48,866 --> 00:06:50,066
都在

185
00:06:50,066 --> 00:06:53,733
同一片段，但是

186
00:06:53,733 --> 00:06:56,133
Feed Cache對外部層次一無所知

187
00:06:56,133 --> 00:06:57,166
外部層次只知道內部直接的

188
00:06:57,166 --> 00:07:00,533
層次，所以Feed Cache基礎設施只知道

189
00:07:00,533 --> 00:07:03,500
Feed Cache

190
00:07:03,500 --> 00:07:05,033
模組和Feed Cache模組只知道

191
00:07:05,033 --> 00:07:07,333
Feed Feature

192
00:07:07,333 --> 00:07:08,933
模組。

193
00:07:08,933 --> 00:07:13,100
模塊因此內層不知道

194
00:07:13,100 --> 00:07:16,133
外層，外層只知道

195
00:07:16,133 --> 00:07:17,566
他們直接的

196
00:07:17,566 --> 00:07:20,866
內層，那麼這帶給我們的是

197
00:07:20,866 --> 00:07:24,466
我們可以輕易地把這個洋蔥剝開

198
00:07:24,466 --> 00:07:27,566
然後取出其中的部分並替換，我們

199
00:07:27,566 --> 00:07:30,466
可以拿出整個區塊，像是快取和

200
00:07:30,466 --> 00:07:31,100
infra

201
00:07:31,100 --> 00:07:32,533
並替換成別的，或者

202
00:07:32,533 --> 00:07:34,933
只是簡單地移除，而不影響到

203
00:07:34,933 --> 00:07:38,000
應用程式的其他部分

204
00:07:38,000 --> 00:07:40,400
我們也能替換 infra 成為

205
00:07:40,400 --> 00:07:41,733
完全不同的東西，我們可以

206
00:07:41,733 --> 00:07:43,166
去掉這部分

207
00:07:43,166 --> 00:07:45,266
然後在這裡放新的片段，而其餘的

208
00:07:45,266 --> 00:07:47,033
應用程式將不受影響

209
00:07:47,033 --> 00:07:49,900
在 API infra 這裡也能做同樣的事，

210
00:07:49,900 --> 00:07:50,866
你可以有

211
00:07:50,866 --> 00:07:54,133
Firebase、URLSession、AlamoFire，你僅需要

212
00:07:54,133 --> 00:07:56,066
剝開洋蔥然後放上某些東西

213
00:07:56,066 --> 00:07:58,866
在 Presentation 裏面

214
00:07:58,866 --> 00:08:02,133
同樣的事情，我們可以完全移除

215
00:08:02,133 --> 00:08:03,900
Presentation片段，並替換

216
00:08:03,900 --> 00:08:05,666
成另一樣東西

217
00:08:05,666 --> 00:08:08,533
我們可以插入新的使用者介面到

218
00:08:08,533 --> 00:08:09,833
這種呈現方式

219
00:08:09,833 --> 00:08:13,500
像是 macOS AppKit UI，WatchKit

220
00:08:13,500 --> 00:08:18,233
UI，SwiftUI，UIKit UI

221
00:08:18,233 --> 00:08:19,900
你可以替換或移除這些層

222
00:08:19,900 --> 00:08:22,933
而不會影響到應用程式的其餘部分

223
00:08:22,933 --> 00:08:25,900
嗯，我們談論的是

224
00:08:25,900 --> 00:08:26,400
關於

225
00:08:26,400 --> 00:08:29,900
最高的可插拔性，最高的自由度

226
00:08:29,900 --> 00:08:33,033
當涉及到變更和另一種

227
00:08:33,033 --> 00:08:34,066
看待這個的方式

228
00:08:34,066 --> 00:08:37,333
就是這種從高

229
00:08:37,333 --> 00:08:38,000
層級

230
00:08:38,000 --> 00:08:41,433
從頂部到底部較低的層次

231
00:08:41,433 --> 00:08:44,233
所以每一層都堆疊在其上

232
00:08:44,233 --> 00:08:45,100
其他層上

233
00:08:45,100 --> 00:08:47,333
我們在較高層級有模型和服務

234
00:08:47,333 --> 00:08:48,366
介面

235
00:08:48,366 --> 00:08:50,866
在其下面，我們有

236
00:08:50,866 --> 00:08:52,000
使用情境

237
00:08:52,000 --> 00:08:53,833
和服務實作

238
00:08:53,833 --> 00:08:55,500
基礎架構適配器和

239
00:08:55,500 --> 00:08:58,300
基礎架構框架。所以高

240
00:08:58,300 --> 00:08:59,200
層級層在頂部，當你開始往下

241
00:08:59,200 --> 00:09:02,133
你就到了較低和較低的層次，就是這樣

242
00:09:02,133 --> 00:09:02,866
你開始

243
00:09:02,866 --> 00:09:05,666
進入到更低和更低的層次，就是這樣

244
00:09:05,666 --> 00:09:06,466
就是如此

245
00:09:06,466 --> 00:09:08,300
這就是關於如何分割你的應用程式

246
00:09:08,300 --> 00:09:10,133
將其分層並管理

247
00:09:10,133 --> 00:09:11,266
依賴關係

248
00:09:11,266 --> 00:09:13,500
在它們之間，高階模組應該

249
00:09:13,500 --> 00:09:14,300
不依賴

250
00:09:14,300 --> 00:09:17,500
於低階模組，確實

251
00:09:17,500 --> 00:09:19,733
但我們現在如何組織和分離

252
00:09:19,733 --> 00:09:21,100
這些模組呢

253
00:09:21,100 --> 00:09:24,233
在你的項目中，我們先看一下

254
00:09:24,233 --> 00:09:26,466
並看看現在的項目看起來如何

255
00:09:26,466 --> 00:09:27,833
現在

256
00:09:27,833 --> 00:09:30,933
目前我們有一個工作空間

257
00:09:30,933 --> 00:09:34,000
有兩個項目，一個項目

258
00:09:34,000 --> 00:09:35,500
是EssentialFeed項目，它代表了Feed功能

259
00:09:35,500 --> 00:09:37,033
在項目內我們有兩個

260
00:09:37,033 --> 00:09:39,200
框架

261
00:09:39,200 --> 00:09:40,800
EssentialFeed框架

262
00:09:40,800 --> 00:09:42,933
用於

263
00:09:42,933 --> 00:09:43,833
平台

264
00:09:43,833 --> 00:09:46,366
無關的組件，因此Essential

265
00:09:46,366 --> 00:09:47,100
Feed

266
00:09:47,100 --> 00:09:50,233
適用於macOS和iOS，然後

267
00:09:50,233 --> 00:09:52,066
我們有一個平台特定的

268
00:09:52,066 --> 00:09:55,033
框架用於iOS特定組件

269
00:09:55,033 --> 00:09:58,233
像使用者介面

270
00:09:58,233 --> 00:10:00,700
還有其他的項目則是應用程式

271
00:10:00,700 --> 00:10:01,500
特定的

272
00:10:01,500 --> 00:10:03,733
項目，因此我們有一個應用程式

273
00:10:03,733 --> 00:10:04,800
目標

274
00:10:04,800 --> 00:10:07,900
依賴Feed框架

275
00:10:07,900 --> 00:10:09,500
所以在這裡EssentialApp中，我們有這個

276
00:10:09,500 --> 00:10:11,833
Composition Root是組成的

277
00:10:11,833 --> 00:10:13,833
與平台無關的與平台相關的

278
00:10:13,833 --> 00:10:15,500
特定模組

279
00:10:15,500 --> 00:10:18,466
正確的，現在我們有一個

280
00:10:18,466 --> 00:10:19,500
工作區

281
00:10:19,500 --> 00:10:22,866
兩個專案與三個目標

282
00:10:22,866 --> 00:10:24,533
EssentialApp有應用程式的

283
00:10:24,533 --> 00:10:27,100
目標以及EssentialFeed

284
00:10:27,100 --> 00:10:30,233
有兩個框架目標，與平台無關的

285
00:10:30,233 --> 00:10:31,600
以及

286
00:10:31,600 --> 00:10:35,266
與平台有關的

287
00:10:35,266 --> 00:10:38,366
所以這裡我們有與平台無關的

288
00:10:38,366 --> 00:10:41,666
模組在上方

289
00:10:41,666 --> 00:10:44,366
以及與平台有關的，就是iOS模組

290
00:10:44,366 --> 00:10:45,200
在下方

291
00:10:45,200 --> 00:10:48,366
它依賴於UIKit，所以儘管我們

292
00:10:48,366 --> 00:10:50,366
這裡有不同的顏色

293
00:10:50,366 --> 00:10:52,466
與平台無關的類型都位於

294
00:10:52,466 --> 00:10:54,000
同一模組

295
00:10:54,000 --> 00:10:57,200
那就是EssentialFeed，對

296
00:10:57,200 --> 00:10:59,266
所以我們現在的分隔基本上

297
00:10:59,266 --> 00:11:00,700
就像這樣

298
00:11:00,700 --> 00:11:02,700
所有紅色代表相同框架中的模組

299
00:11:02,700 --> 00:11:04,933
它們都住在同一框架中

300
00:11:04,933 --> 00:11:08,000
那就是EssentialFeed

301
00:11:08,000 --> 00:11:11,500
紫色是iOS模組

302
00:11:11,500 --> 00:11:15,033
以及綠色的第三方框架

303
00:11:15,033 --> 00:11:18,133
所以現在所有的模組

304
00:11:18,133 --> 00:11:20,633
都位於EssentialFeed框架中

305
00:11:20,633 --> 00:11:21,900
目標

306
00:11:21,900 --> 00:11:24,866
確實，儘管所有這些模組


307
00:11:24,866 --> 00:11:26,066
生活在同一個

308
00:11:26,066 --> 00:11:29,100
EssentialFeed 目標他們被分開

309
00:11:29,100 --> 00:11:30,466
進入資料夾

310
00:11:30,466 --> 00:11:33,200
所以他們仍然保持這種模塊化

311
00:11:33,200 --> 00:11:34,000
隔離

312
00:11:34,000 --> 00:11:37,900
因為我們將他們分開了，對

313
00:11:37,900 --> 00:11:41,033
我們在這裡將他們分開到資料夾

314
00:11:41,033 --> 00:11:43,033
我們做出了有意識的努力

315
00:11:43,033 --> 00:11:44,533
維持類型的

316
00:11:44,533 --> 00:11:46,700
分離，但沒有物理上的

317
00:11:46,700 --> 00:11:48,866
隔離

318
00:11:48,866 --> 00:11:51,433
所以如果你在同一個

319
00:11:51,433 --> 00:11:51,900
相同

320
00:11:51,900 --> 00:11:53,666
框架中保持一堆模塊需要很大的

321
00:11:53,666 --> 00:11:55,600
自律才不會將它們綁在一起

322
00:11:55,600 --> 00:11:56,633
因為你對所有的

323
00:11:56,633 --> 00:11:59,733
組件都能進行存取，確實編譯器不會

324
00:11:59,733 --> 00:12:00,700
阻止你

325
00:12:00,700 --> 00:12:03,900
跨越邊界，確實如此

326
00:12:03,900 --> 00:12:06,466
所以把東西放在同一個框架中

327
00:12:06,466 --> 00:12:07,200
更簡單

328
00:12:07,200 --> 00:12:09,433
但後續需要很大的

329
00:12:09,433 --> 00:12:10,233
自律

330
00:12:10,233 --> 00:12:13,600
以保持你的組件解耦，對

331
00:12:13,600 --> 00:12:15,900
這可以是開始你的項目的好方法

332
00:12:15,900 --> 00:12:17,200
然後分解模塊到

333
00:12:17,200 --> 00:12:19,266
他們自己的框架裡

334
00:12:19,266 --> 00:12:20,533
他們自己的框架裡

335
00:12:20,533 --> 00:12:24,366
如需要，這將會是什麼樣子

336
00:12:24,366 --> 00:12:27,666
如果我們將Feed API分解為例子

337
00:12:27,666 --> 00:12:29,900
進一步打造另一個架構來

338
00:12:29,900 --> 00:12:31,033
實體地

339
00:12:31,033 --> 00:12:34,933
分隔這些模塊呢？好的

340
00:12:34,933 --> 00:12:40,000
我們首先會創建一個框架

341
00:12:40,000 --> 00:12:46,700
讓我們稱之為EssentialFeedAPI

342
00:12:46,700 --> 00:12:47,733
所以我們有了一個新的目標為

343
00:12:47,733 --> 00:12:50,700
EssentialFeedAPI框架的

344
00:12:50,700 --> 00:12:53,333
這個API是平台無關的，所以

345
00:12:53,333 --> 00:12:55,200
讓我們添加支援

346
00:12:55,200 --> 00:12:59,100
對於iphonesimulator以及iphoneos

347
00:12:59,100 --> 00:13:03,100
好的，然後

348
00:13:03,100 --> 00:13:05,600
Feed API模塊依賴於Feed

349
00:13:05,600 --> 00:13:09,033
功能模塊

350
00:13:09,033 --> 00:13:10,933
所以我們需要EssentialFeed作為

351
00:13:10,933 --> 00:13:13,733
這裡的依賴項

352
00:13:13,733 --> 00:13:17,100
所以現在我們可以看到這個直接的依賴

353
00:13:17,100 --> 00:13:20,000
確切地說，EssentialFeed並不

354
00:13:20,000 --> 00:13:21,200
依賴於API

355
00:13:21,200 --> 00:13:23,600
但API依賴於Essential

356
00:13:23,600 --> 00:13:24,300
Feed

357
00:13:24,300 --> 00:13:27,433
就像在圖表中一樣，確切地說，

358
00:13:27,433 --> 00:13:29,433
這是模塊依賴

359
00:13:29,433 --> 00:13:32,833
由Feed API到Feed Feature

360
00:13:32,833 --> 00:13:36,366
模塊，所以我們現在只需拖動

361
00:13:36,366 --> 00:13:40,800
檔案至新的EssentialFeedAPI

362
00:13:40,800 --> 00:13:44,133
模塊資料夾，讓我們選擇

363
00:13:44,133 --> 00:13:46,800
所有的並確保他們在

364
00:13:46,800 --> 00:13:48,866
正確的目標成員之中

365
00:13:48,866 --> 00:13:55,033
所以他們現在應該在API中

366
00:13:55,033 --> 00:13:58,000
讓我們也移動測試，所以Feed

367
00:13:58,000 --> 00:14:00,300
API測試

368
00:14:00,300 --> 00:14:03,600
進到新的FeedAPITests

369
00:14:03,600 --> 00:14:07,333
資料夾，我們也確認一下

370
00:14:07,333 --> 00:14:09,433
文件是否在正確的目標

371
00:14:09,433 --> 00:14:11,600
成員之中

372
00:14:11,600 --> 00:14:15,333
他們現在應該在FeedAPITests中

373
00:14:15,333 --> 00:14:17,433
所以EssentialFeed模塊不需要

374
00:14:17,433 --> 00:14:18,533
Feed API

375
00:14:18,533 --> 00:14:22,533
空資料夾了

376
00:14:22,533 --> 00:14:25,033
所以現在我們有了新的框架

377
00:14:25,033 --> 00:14:25,833
目標

378
00:14:25,833 --> 00:14:30,466
我們也獲得了新的計劃

379
00:14:30,466 --> 00:14:34,933
讓我們試著建構這個新框架

380
00:14:34,933 --> 00:14:38,866
我們得到了一些失敗，好的

381
00:14:38,866 --> 00:14:40,700
我們無法訪問到FeedImage

382
00:14:40,700 --> 00:14:42,633
DataLoader了

383
00:14:42,633 --> 00:14:45,900
因為FeedImageDataLoader居住於

384
00:14:45,900 --> 00:14:49,266
在EssentialFeed模塊中

385
00:14:49,266 --> 00:14:53,600
所以我們需要匯入EssentialFeed

386
00:14:53,600 --> 00:14:56,300
在每一個依賴於

387
00:14:56,300 --> 00:14:57,433
Essential Feed的文件中

388
00:14:57,433 --> 00:15:00,366
模塊，並且這是它們間的實體分離

389
00:15:00,366 --> 00:15:01,333
之間的

390
00:15:01,333 --> 00:15:04,000
現在我們需要匯入該模塊以便於

391
00:15:04,000 --> 00:15:05,666
能夠訪問這些類型

392
00:15:05,666 --> 00:15:08,066
這將幫助你實施一個清晰的

393
00:15:08,066 --> 00:15:12,366
它們之間的分離

394
00:15:12,366 --> 00:15:15,433
好的，讓我們運行測試

395
00:15:15,433 --> 00:15:18,466
而且它通過了觀看

396
00:15:18,466 --> 00:15:21,033
所以我們從核心框架中提取出了這個新框架

397
00:15:21,033 --> 00:15:23,600
離開了核心框架

398
00:15:23,600 --> 00:15:26,533
所以現在我們在這裡有了這個分離，該

399
00:15:26,533 --> 00:15:27,500
Feed API模塊

400
00:15:27,500 --> 00:15:31,100
有它自己的生命，但是關於

401
00:15:31,100 --> 00:15:34,233
組成它們的應用程式呢

402
00:15:34,233 --> 00:15:36,466
如果我們現在試圖運行應用程序

403
00:15:36,466 --> 00:15:38,466
我們也將得到構建錯誤

404
00:15:38,466 --> 00:15:41,033
確切地說這個模塊不知道關於

405
00:15:41,033 --> 00:15:42,366
EssentialFeedAPI

406
00:15:42,366 --> 00:15:45,733
模塊，所以現在應用程序

407
00:15:45,733 --> 00:15:48,866
目標需要也依賴於

408
00:15:48,866 --> 00:15:50,066
EssentialFeed

409
00:15:50,066 --> 00:15:53,166
API


410
00:15:53,166 --> 00:15:56,366
所以在我們的Composition Root

411
00:15:56,366 --> 00:15:59,666
現在可以導入 EssentialFeed 

412
00:15:59,666 --> 00:16:02,133
API，並且我們應該能夠運行

413
00:16:02,133 --> 00:16:06,133
這個應用程序

414
00:16:06,133 --> 00:16:09,333
看，很好

415
00:16:09,333 --> 00:16:12,366
這就是它，我們分隔我們的模組並

416
00:16:12,366 --> 00:16:13,833
我們將它們解耦

417
00:16:13,833 --> 00:16:15,333
但在某個時候我們需要將

418
00:16:15,333 --> 00:16:17,100
它們組合起來，我們做到了

419
00:16:17,100 --> 00:16:20,300
在一個集中的地方，所以這就是

420
00:16:20,300 --> 00:16:21,600
Composition Root

421
00:16:21,600 --> 00:16:23,100
你可以在 Composition Root 

422
00:16:23,100 --> 00:16:24,933
看到所有的導入

423
00:16:24,933 --> 00:16:27,433
確實如此，你可以將你的

424
00:16:27,433 --> 00:16:28,233
應用程序

425
00:16:28,233 --> 00:16:31,433
分解為多個模組並在

426
00:16:31,433 --> 00:16:33,433
一個集中的地方將它們組合起來

427
00:16:33,433 --> 00:16:34,933
所以 Composition Root 是唯一

428
00:16:34,933 --> 00:16:37,100
導入所有模組的地方

429
00:16:37,100 --> 00:16:39,666
用來組合它們，這是你如何保持

430
00:16:39,666 --> 00:16:40,533
模組的

431
00:16:40,533 --> 00:16:43,166
對彼此不知情並且仍然組合

432
00:16:43,166 --> 00:16:44,066
它們

433
00:16:44,066 --> 00:16:47,433
確實如此，你可以有這樣的分離

434
00:16:47,433 --> 00:16:48,633
就像這個

435
00:16:48,633 --> 00:16:51,100
你的功能項目與分隔器

436
00:16:51,100 --> 00:16:52,633
模組

437
00:16:52,633 --> 00:16:54,000
然後你可以有一個應用程序

438
00:16:54,000 --> 00:16:55,833
特定工作空間

439
00:16:55,833 --> 00:16:58,000
組成所有的項目和模塊

440
00:16:58,000 --> 00:16:59,266
在Composition中

441
00:16:59,266 --> 00:17:02,800
Root就是這樣，你可以按照步驟

442
00:17:02,800 --> 00:17:03,500
我們剛剛

443
00:17:03,500 --> 00:17:06,533
做的，並拆解每個模塊

444
00:17:06,533 --> 00:17:09,833
到單獨的框架，最後

445
00:17:09,833 --> 00:17:13,266
它看起來像這樣好

446
00:17:13,266 --> 00:17:16,400
EssentialFeed將只包含

447
00:17:16,400 --> 00:17:18,700
領域服務接口和領域

448
00:17:18,700 --> 00:17:20,233
模型

449
00:17:20,233 --> 00:17:24,700
所以它不依賴任何人

450
00:17:24,700 --> 00:17:27,566
EssentialFeedAPI包含領域

451
00:17:27,566 --> 00:17:29,433
服務實現

452
00:17:29,433 --> 00:17:32,533
基於用例，它依靠

453
00:17:32,533 --> 00:17:34,066
EssentialFeed模塊

454
00:17:34,066 --> 00:17:37,900
然後在外層你

455
00:17:37,900 --> 00:17:40,400
有API基礎設施

456
00:17:40,400 --> 00:17:43,266
與基礎設施實現

457
00:17:43,266 --> 00:17:44,933
所以它只依賴Feed

458
00:17:44,933 --> 00:17:54,000
API，就像這裡一樣

459
00:17:54,000 --> 00:17:56,000
EssentialFeedCache遵循

460
00:17:56,000 --> 00:17:58,000
相同的原則

461
00:17:58,000 --> 00:18:00,133
它依賴於EssentialFeed並

462
00:18:00,133 --> 00:18:01,566
實現服務

463
00:18:01,566 --> 00:18:04,066
基於緩存的用例和

464
00:18:04,066 --> 00:18:05,266
基礎設施

465
00:18:05,266 --> 00:18:07,333
實現基礎設施適配器

466
00:18:07,333 --> 00:18:08,633
並依賴Feed

467
00:18:08,633 --> 00:18:14,400
就像這裡的 Cache 和 Feed

468
00:18:14,400 --> 00:18:15,900
Presentation

469
00:18:15,900 --> 00:18:19,600
依賴於 EssentialFeed 模塊

470
00:18:19,600 --> 00:18:23,666
像這裡的以及 iOS

471
00:18:23,666 --> 00:18:26,833
模塊只依賴於 Feed

472
00:18:26,833 --> 00:18:28,300
Presentation

473
00:18:28,300 --> 00:18:31,433
像這裡，所以這是一種選擇

474
00:18:31,433 --> 00:18:33,033
如果你希望強制實行

475
00:18:33,033 --> 00:18:34,766
模塊之間的實質分隔

476
00:18:34,766 --> 00:18:36,300
你可以將它們拆解成獨立的

477
00:18:36,300 --> 00:18:38,300
框架，但它們仍然可以生存

478
00:18:38,300 --> 00:18:41,266
在同一個項目中，代表一個

479
00:18:41,266 --> 00:18:42,700
特性

480
00:18:42,700 --> 00:18:44,933
然後你需要一個 Composition Root 來

481
00:18:44,933 --> 00:18:46,300
組合所有模塊

482
00:18:46,300 --> 00:18:51,100
一起，所以 EssentialApp 目標

483
00:18:51,100 --> 00:18:56,866
依賴於所有分離的模塊

484
00:18:56,866 --> 00:19:00,000
所以我們可以導入所有的，並組合

485
00:19:00,000 --> 00:19:00,866
所有模塊

486
00:19:00,866 --> 00:19:03,333
在一個集中的地方，Composition

487
00:19:03,333 --> 00:19:04,766
Root

488
00:19:04,766 --> 00:19:07,100
但正如你所看到的，這將變得更難

489
00:19:07,100 --> 00:19:08,133
去維護

490
00:19:08,133 --> 00:19:10,933
比把东西放在同一個框架裡

491
00:19:10,933 --> 00:19:14,233
所以你需要平衡權衡

492
00:19:14,233 --> 00:19:16,066
所以我們建議你從簡單開始，然後

493
00:19:16,066 --> 00:19:17,266
只有當 

494
00:19:17,266 --> 00:19:20,066
進行物理分隔模塊時

495
00:19:20,066 --> 00:19:21,033
需要的

496
00:19:21,033 --> 00:19:24,066
確實，我們還有其他方式可以

497
00:19:24,066 --> 00:19:24,400
做

498
00:19:24,400 --> 00:19:27,266
分離，我們可以有個簡單的

499
00:19:27,266 --> 00:19:27,900
設定

500
00:19:27,900 --> 00:19:31,666
一個專案和一個目標

501
00:19:31,666 --> 00:19:33,833
是的，所以在這個例子裡，我們有一個

502
00:19:33,833 --> 00:19:36,633
專案，就是EssentialApp專案

503
00:19:36,633 --> 00:19:38,133
並且它只有一個目標，這是一個

504
00:19:38,133 --> 00:19:40,000
特定於iOS的應用目標，我們只需要將

505
00:19:40,000 --> 00:19:43,200
我們的組件以虛擬的方式用資料夾分離開來

506
00:19:43,200 --> 00:19:46,933
所以這需要大量的紀律來

507
00:19:46,933 --> 00:19:48,633
維護功能

508
00:19:48,633 --> 00:19:50,700
模組和部件，因為

509
00:19:50,700 --> 00:19:53,200
模塊和部件的解耦，因為

510
00:19:53,200 --> 00:19:53,733
這沒有

511
00:19:53,733 --> 00:19:56,300
物理分離，並且當然在

512
00:19:56,300 --> 00:19:57,266
這種情況下，

513
00:19:57,266 --> 00:19:58,866
測試會通過

514
00:19:58,866 --> 00:20:01,266
模擬器來進行，因為

515
00:20:01,266 --> 00:20:03,433
EssentialApp是一款iOS應用程式

516
00:20:03,433 --> 00:20:06,233
目標，所以它必須在模擬器上運行

517
00:20:06,233 --> 00:20:08,633
這可能會增加測試時間以及

518
00:20:08,633 --> 00:20:10,466
建構時間，因為所有事情都在

519
00:20:10,466 --> 00:20:10,933
同一

520
00:20:10,933 --> 00:20:14,400
模組裡。但確實，

521
00:20:14,400 --> 00:20:16,000
對於小型應用程式，這種方式可以運行良好，當你正在

522
00:20:16,000 --> 00:20:18,466
開始時它也適用於

523
00:20:18,466 --> 00:20:19,266
原型

524
00:20:19,266 --> 00:20:20,466
以及你將要

525
00:20:20,466 --> 00:20:23,600
即將丟棄的項目

526
00:20:23,600 --> 00:20:26,400
另一個有效的設定是一個項目但是

527
00:20:26,400 --> 00:20:27,266
多個

528
00:20:27,266 --> 00:20:30,466
目標，一個目標對應一個功能，所以如果你

529
00:20:30,466 --> 00:20:32,066
有一個登入功能例如你

530
00:20:32,066 --> 00:20:33,200
有一個登入

531
00:20:33,200 --> 00:20:35,333
框架，如果你有一個視訊功能

532
00:20:35,333 --> 00:20:36,633
你有一個視訊

533
00:20:36,633 --> 00:20:38,400
框架然後你有

534
00:20:38,400 --> 00:20:39,733
應用目標

535
00:20:39,733 --> 00:20:42,933
組成兩個框架

536
00:20:42,933 --> 00:20:46,000
但一切都在同一個項目中

537
00:20:46,000 --> 00:20:48,866
只有一個項目，所以現在我們有了實體

538
00:20:48,866 --> 00:20:49,733
分隔

539
00:20:49,733 --> 00:20:52,233
的功能，但是在

540
00:20:52,233 --> 00:20:53,266
這些功能中的模組

541
00:20:53,266 --> 00:20:55,266
並未被分開，他們只是

542
00:20:55,266 --> 00:20:56,766
用資料夾虛擬分開

543
00:20:56,766 --> 00:20:59,833
所以登入功能裡有一

544
00:20:59,833 --> 00:21:01,666
堆層疊在裡面

545
00:21:01,666 --> 00:21:04,633
這就是水平切片，而

546
00:21:04,633 --> 00:21:06,533
EssentialFeed 也會有

547
00:21:06,533 --> 00:21:09,600
它自己的水平切片

548
00:21:09,600 --> 00:21:11,266
而 EssentialApp 包含了

549
00:21:11,266 --> 00:21:13,500
組成根以組成


550
00:21:13,500 --> 00:21:17,600
那些特徵就是這樣，所以一個專案 

551
00:21:17,600 --> 00:21:22,000
一個架構每個特徵

552
00:21:22,000 --> 00:21:26,766
另一個有效的設定是多個專案

553
00:21:26,766 --> 00:21:32,133
每個特徵都有其自己的目標

554
00:21:32,133 --> 00:21:35,500
以及EssentialApp iOS應用程式

555
00:21:35,500 --> 00:21:38,400
在應用程式目標中組合兩個框架

556
00:21:38,400 --> 00:21:41,033
應用程式目標

557
00:21:41,033 --> 00:21:44,066
但在所有這些例子中，每個

558
00:21:44,066 --> 00:21:45,500
專案都存活在相同的

559
00:21:45,500 --> 00:21:48,066
倉庫中，這是最容易的方式去

560
00:21:48,066 --> 00:21:48,766
維護

561
00:21:48,766 --> 00:21:50,633
在源代碼下管理您的模塊化應用程式

562
00:21:50,633 --> 00:21:54,133
控制所有在一個倉庫中的一切

563
00:21:54,133 --> 00:21:56,233
分開的專案，分開的目標

564
00:21:56,233 --> 00:21:57,500
依賴於你需要什麼

565
00:21:57,500 --> 00:22:00,233
但我們都認為同一個倉庫現在

566
00:22:00,233 --> 00:22:01,600
如果你想要跨越

567
00:22:01,600 --> 00:22:02,766
倉庫分享代碼

568
00:22:02,766 --> 00:22:05,200
你可以將每一個特徵或者每一個

569
00:22:05,200 --> 00:22:06,866
模塊分開

570
00:22:06,866 --> 00:22:09,033
倉庫，這個更難去

571
00:22:09,033 --> 00:22:10,633
維護，你可能需要

572
00:22:10,633 --> 00:22:12,400
像是CocoaPods這種東西

573
00:22:12,400 --> 00:22:15,900
git子模塊，Carthage或是

574
00:22:15,900 --> 00:22:20,533
Swift Package Manager，確實是

575
00:22:20,533 --> 00:22:22,466
所以我們的建議是讓你

576
00:22:22,466 --> 00:22:24,000
從簡單開始

577
00:22:24,000 --> 00:22:27,200
並且只有在需要時才分離事物

578
00:22:27,200 --> 00:22:28,533
因為它會增加

579
00:22:28,533 --> 00:22:30,866
你和你的團隊要花在

580
00:22:30,866 --> 00:22:31,333
對

581
00:22:31,333 --> 00:22:35,266
項目周圍的維護工作量，說得很好

582
00:22:35,266 --> 00:22:37,600
你和你的團隊需要進行你們自己的

583
00:22:37,600 --> 00:22:40,133
個別的成本/利潤分析

584
00:22:40,133 --> 00:22:43,266
並看看哪種最適合你的

585
00:22:43,266 --> 00:22:46,700
需求，這將基於

586
00:22:46,700 --> 00:22:49,500
你的架構和設計，這將

587
00:22:49,500 --> 00:22:52,133
基於你的團隊結構

588
00:22:52,133 --> 00:22:55,900
如果你有特定功能的團隊或遠程團隊

589
00:22:55,900 --> 00:22:57,433
所有這些都影響你將如何

590
00:22:57,433 --> 00:22:58,933
組織你的項目

591
00:22:58,933 --> 00:23:01,100
所以你需要找到一個好的平衡點

592
00:23:01,100 --> 00:23:02,633
確實如此

593
00:23:02,633 --> 00:23:04,700
但只要你實現了清晰的

594
00:23:04,700 --> 00:23:06,233
分層之間的分離

595
00:23:06,233 --> 00:23:09,266
這就讓你具有這種能力

596
00:23:09,266 --> 00:23:10,000
去

597
00:23:10,000 --> 00:23:12,133
切片和剝離你的架構並

598
00:23:12,133 --> 00:23:14,000
輕易替換事物

599
00:23:14,000 --> 00:23:16,233
然後你就可以開始了，然後你的項目

600
00:23:16,233 --> 00:23:17,333
就可以輕鬆成長了

601
00:23:17,333 --> 00:23:19,433
你可以容納更多的人，你可以


602
00:23:19,433 --> 00:23:20,866
適應變化

603
00:23:20,866 --> 00:23:24,066
你們歡迎當我們增加更多時的變化

604
00:23:24,066 --> 00:23:25,733
我們想要保持這個

605
00:23:25,733 --> 00:23:27,200
插件的能力

606
00:23:27,200 --> 00:23:30,300
同樣適用於所有我們的功能，所以你很開心

607
00:23:30,300 --> 00:23:31,500
團隊也很開心

608
00:23:31,500 --> 00:23:33,900
顧客開心，業務也是

609
00:23:33,900 --> 00:23:34,700
開心

610
00:23:34,700 --> 00:23:38,000
每個人都從整個運營中受益並獲得利潤

611
00:23:38,000 --> 00:23:40,066
這就是你將要達成的

612
00:23:40,066 --> 00:23:41,900
確實如此，你也將會

613
00:23:41,900 --> 00:23:44,633
取得非凡的成果

614
00:23:44,633 --> 00:23:48,000
就是這樣，好的，這堂課到此結束

615
00:23:48,000 --> 00:23:48,700
講座

616
00:23:48,700 --> 00:23:52,000
我們下次再見，再會

617
00:23:52,000 --> 00:24:05,833
再見