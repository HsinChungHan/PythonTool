

1
00:00:00,800 --> 00:00:03,040
大家好，歡迎光臨。

2
00:00:04,440 --> 00:00:08,620
感謝你們加入我在這系列的Xcode講解。

3
00:00:09,680 --> 00:00:12,560
上次我們瀏覽了Xcode的運作方式，

4
00:00:12,560 --> 00:00:14,520
以及你在不同情境下可以如何使用它。

5
00:00:14,520 --> 00:00:17,060
以及你在不同情況下如何使用它們。

6
00:00:19,560 --> 00:00:24,560
今天，我們將繼續更仔細地研究

7
00:00:24,560 --> 00:00:28,140
大多數開發人員在設置應用程式時會使用的建構設定，

8
00:00:28,140 --> 00:00:29,740
理解它們將會做什麼，

9
00:00:30,720 --> 00:00:33,640
將允許你針對你需要的確切情況來優化你的建構。

10
00:00:33,640 --> 00:00:38,340
讓我們開始吧。

11
00:00:38,340 --> 00:00:39,180
一起來。

12
00:00:41,860 --> 00:00:44,520
如往常一樣，我們要看看計劃是什麼。

13
00:00:45,400 --> 00:00:47,440
我們將嘗試回答一些問題。

14
00:00:49,760 --> 00:00:52,880
我能否為多個平台建構目標，

15
00:00:52,880 --> 00:00:56,200
以及哪種類型的目標允許這樣做？

16
00:00:56,200 --> 00:00:58,080
Bitcode是什麼？

17
00:00:58,080 --> 00:01:01,880
Bitcode的優點和缺點是什麼？

18
00:01:01,880 --> 00:01:02,840
我應該使用它嗎？

19
00:01:06,280 --> 00:01:08,720
什麼是buildActiveArchitectureOnly?

20
00:01:08,720 --> 00:01:13,240
為什麼Xcode只對偵錯設定將其設為是？

21
00:01:14,500 --> 00:01:18,360
對於目標設備家族設定為僅限iPhone或iPad的應用程式會發生什麼事？

22
00:01:18,360 --> 00:01:20,720
只設定為iPhone或iPad會怎麼樣？

23
00:01:21,880 --> 00:01:26,240
什麼是DSYM，所有的建構是否都需要一個？

24
00:01:26,240 --> 00:01:27,640
什麼是增量建構

25
00:01:27,640 --> 00:01:30,280
還有其他種類的建構嗎？

26
00:01:32,920 --> 00:01:36,520
建構設定是否可以掌控靜態或動態的庫或框架鏈接？

27
00:01:36,520 --> 00:01:38,160
能否控制庫或框架的鏈接？

28
00:01:39,920 --> 00:01:42,560
我如何優化我的二進制檔來提升速度、大小、

29
00:01:42,560 --> 00:01:44,960
應用程式啟動時間以及其他方面？

30
00:01:46,400 --> 00:01:48,680
單元測試目標的設定

31
00:01:48,680 --> 00:01:53,040
與用戶界面測試目標的設定有何不同？

32
00:01:53,040 --> 00:01:55,640
我們將結束本節目並進行問答環節。

33
00:01:56,760 --> 00:01:59,640
但是，如果你有任何問題，

34
00:01:59,640 --> 00:02:03,000
關於我們所討論的特定設定，

35
00:02:03,960 --> 00:02:07,840
如果你有問題，請告訴我，我將在講座中嘗試回答。

36
00:02:10,880 --> 00:02:13,440
在Xcode中有許多建構設定。

37
00:02:15,440 --> 00:02:17,360
我們可以在以下的連結找到完整的清單

38
00:02:17,360 --> 00:02:20,080
Apple Docs就是我們要找的參考資料來源。

39
00:02:20,080 --> 00:02:23,400
首先，讓我們看看Xcode的建構設定

40
00:02:23,400 --> 00:02:26,320
對於我們的EssentialFeed項目，

41
00:02:27,200 --> 00:02:29,760
我們會注意到建構設定

42
00:02:29,760 --> 00:02:32,800
分為多組，

43
00:02:32,800 --> 00:02:37,240
比如建築結構或建構位置或建構選項。

44
00:02:38,360 --> 00:02:42,040
我們將按照Xcode的順序進行，

45
00:02:42,040 --> 00:02:44,120
討論你正在建構的設定

46
00:02:44,120 --> 00:02:47,200
以及如何優化你的建構設定。

47
00:02:47,200 --> 00:02:50,400
Xcode會討論你最可能需要使用的設定，

48
00:02:50,400 --> 00:02:52,240
或者那些對建構有重大影響的設定，

49
00:02:52,240 --> 00:02:54,520
或者那些對建構有重大影響的設定。

50
00:02:54,520 --> 00:02:55,360
對建構的影響。

51
00:02:56,920 --> 00:02:58,880
讓我們看看建築結構組。

52
00:03:03,440 --> 00:03:07,600
架構設定包含了架構清單

53
00:03:07,600 --> 00:03:09,440
為了建立該產品所需要的。

54
00:03:09,440 --> 00:03:16,440
默認值被設定為藝術標準，

55
00:03:18,520 --> 00:03:23,400
這是一個Xcode變數，並且通常被解釋

56
00:03:23,400 --> 00:03:28,200
為iOS目標的ARM64和ARMv7。

57
00:03:30,160 --> 00:03:35,160
在這種情率下，結果值是ARM64和x86

58
00:03:35,160 --> 00:03:39,400
因為我們有一個多平台目標。

59
00:03:41,480 --> 00:03:44,440
大多數的項目不需要變更這個設置。

60
00:03:45,720 --> 00:03:48,000
如果你需要支持

61
00:03:48,000 --> 00:03:52,240
舊的架構或避免新的，你可以改變它。

62
00:03:56,120 --> 00:03:58,040
綜述一下，隨著時間的推移，

63
00:03:58,040 --> 00:04:02,200
Apple支持的架構已經變更。

64
00:04:02,200 --> 00:04:07,200
ARM64是當前的64位元ARM CPU架構，

65
00:04:07,360 --> 00:04:12,360
用於比iPhone 5s更新的設備上，

66
00:04:12,600 --> 00:04:17,600
如iPhone 6、iPhone 7等，以至iPad Air以及更新的設備。

67
00:04:20,440 --> 00:04:25,440
ARMv7s 被用於像是Apple的A6這樣的裝置上

68
00:04:25,440 --> 00:04:30,440
或是A6X晶片的裝置，例如 iPhone 5，iPhone 5c，iPad 4。

69
00:04:32,040 --> 00:04:34,680
在這之前，我們有ARMv7，

70
00:04:34,680 --> 00:04:39,680
這是一種用於A5晶片上的32位元架構。

71
00:04:40,160 --> 00:04:43,240
在這之前，甚至有ARMv6，

72
00:04:43,240 --> 00:04:46,520
這是用在2009年以前製造的裝置上。

73
00:04:46,520 --> 00:04:51,520
基礎SDK設定包含了SDK的名稱或路徑

74
00:04:52,800 --> 00:04:55,200
這是用於當前的建構。

75
00:04:56,120 --> 00:04:59,120
所以如果你正在建立一個iOS目標，它將會是iOS。

76
00:05:00,120 --> 00:05:03,080
如果你正在建立一個Mac相關的目標，那將會成為macOS

77
00:05:03,080 --> 00:05:05,840
並且當前的建構將會是iOS。

78
00:05:05,840 --> 00:05:08,320
所以當前的建構將會是iOS。

79
00:05:08,320 --> 00:05:10,160
當前的建構將會是iOS。

80
00:05:10,160 --> 00:05:12,080
當前的建構將是iOS。

81
00:05:12,080 --> 00:05:13,720
當前的建構將是iOS。

82
00:05:13,720 --> 00:05:17,120
如果您正在建構一個Mac目標，這將是macOS等等。

83
00:05:18,320 --> 00:05:20,680
可以指定額外的SDK

84
00:05:20,680 --> 00:05:22,920
通過額外的SDK設置。

85
00:05:24,240 --> 00:05:26,240
關於基礎SDK，

86
00:05:26,240 --> 00:05:28,480
大部分的項目不需要改變這個設置，

87
00:05:28,480 --> 00:05:31,440
因為在創建項目時Xcode已經適當設置好

88
00:05:31,440 --> 00:05:34,360
或目標，取決於您選擇的平台。

89
00:05:34,360 --> 00:05:39,360
接下來是建構活動架構唯一設定。

90
00:05:40,360 --> 00:05:42,240
如果這個被啟用，

91
00:05:43,240 --> 00:05:46,480
Xcode將只建構活動架構。

92
00:05:48,560 --> 00:05:50,760
活動架構就是你正在為之建構的設備的架構。

93
00:05:50,760 --> 00:05:52,880
並且是使用方案運行目標選擇器選擇的。

94
00:05:54,280 --> 00:05:57,760
活動架構就是方案運行目標選擇器的架構。

95
00:05:59,280 --> 00:06:01,560
活動架構就是方案運行目標選擇器的架構。

96
00:06:01,560 --> 00:06:04,560
活動架構就是方案運行目標選擇器的架構。

97
00:06:08,360 --> 00:06:12,960
所以在這個情況下，iPhone 13 模擬器

98
00:06:12,960 --> 00:06:15,760
或任何設備等等。

99
00:06:26,560 --> 00:06:28,560
這個設定將被忽視

100
00:06:28,560 --> 00:06:32,560
當你在任何iOS設備或GenericDevice上建構。

101
00:06:39,960 --> 00:06:43,960
這個設定是由Xcode預設為是

102
00:06:43,960 --> 00:06:45,960
在除錯配置中

103
00:06:45,960 --> 00:06:50,360
並且它在釋出配置中保持為預設的不是。

104
00:06:51,560 --> 00:06:53,960
基本上這是一種優化。

105
00:06:53,960 --> 00:06:55,760
如果你正在建構一個除錯版本

106
00:06:55,760 --> 00:07:00,360
為你的目標模擬器，就像我這裡的情況，

107
00:07:00,360 --> 00:07:01,960
也沒有必要同時建構

108
00:07:01,960 --> 00:07:04,360
設備架構和反過來。

109
00:07:06,960 --> 00:07:09,960
當然，這種優化在開發環境中運行良好，

110
00:07:09,960 --> 00:07:11,760
但在發送你的二進制文件時，

111
00:07:11,760 --> 00:07:14,160
你必須包含所有由你的二進位資料支援的架構。

113
00:07:16,160 --> 00:07:17,960
讓我們看看這怎麼進行。

114
00:07:17,960 --> 00:07:24,960
如果我進行EssentialApp目標的乾淨建構。

115
00:07:24,960 --> 00:07:40,960
這花了很多時間。

117
00:08:03,960 --> 00:08:13,960
但如果我將我的建構活動架構設定為否，

118
00:08:13,960 --> 00:08:21,960
這會花更多的時間。

119
00:08:43,960 --> 00:08:59,960
所以我常將此作為例子

120
00:08:59,960 --> 00:09:03,960
來說明設定在調試時應設定為是

121
00:09:03,960 --> 00:09:05,960
只為了加快建構速度。

122
00:09:08,960 --> 00:09:11,960
顯然，由於我正在運行所有的錄音和縮放，

123
00:09:11,960 --> 00:09:15,960
建構需要花更長時間，

124
00:09:15,960 --> 00:09:20,960
但你可以至少看到額外四秒

125
00:09:20,960 --> 00:09:22,960
用於此建構。

126
00:09:22,960 --> 00:09:47,960
我要進行重置和清理

127
00:09:47,960 --> 00:09:52,960
所以我們下次不需要等待。

128
00:10:03,960 --> 00:10:07,960
下一個設定是排除架構。

129
00:10:10,960 --> 00:10:13,960
這包含了架構列表，

130
00:10:13,960 --> 00:10:18,960
目標不需要為其建構。

131
00:10:18,960 --> 00:10:21,960
如果結果列表為空，

132
00:10:21,960 --> 00:10:23,960
則不會產生二進制檔。

133
00:10:23,960 --> 00:10:26,960
之所以會提到此設定，因為它現在很實用，

134
00:10:26,960 --> 00:10:28,960
我們需要建構專案時，

135
00:10:28,960 --> 00:10:30,960
那些有預先編譯的二進制碼。

136
00:10:30,960 --> 00:10:46,960
我們正在使用新的M1 Max。

137
00:10:46,960 --> 00:10:49,960
建築組中的最後一個設定

138
00:10:49,960 --> 00:10:51,960
是支援的平台。

139
00:10:51,960 --> 00:10:54,960
這包含了支援的平台列表

140
00:10:54,960 --> 00:10:58,960
可以使用基礎SDK的平台。

141
00:10:58,960 --> 00:11:01,960
如果產品能夠透過使用不同的SDK

142
00:11:01,960 --> 00:11:04,960
為多個平台建構，

143
00:11:04,960 --> 00:11:06,960
像我們的情況。

144
00:11:06,960 --> 00:11:09,960
通常，每個專案會使用一個單一的平台，

145
00:11:09,960 --> 00:11:13,960
所以有iOS，macOS，但我們可以變更設定

146
00:11:13,960 --> 00:11:15,960
並增加更多平台。

147
00:11:15,960 --> 00:11:17,960
像我們這裡的情況，

148
00:11:17,960 --> 00:11:21,960
目標是支援macOS 

149
00:11:21,960 --> 00:11:23,960
以及 iOS 平台。

150
00:11:23,960 --> 00:11:29,960
作為一個練習，我將添加 watchOS。

151
00:11:29,960 --> 00:11:33,960
為了做到這點，我需要分別增加一個條目

152
00:11:33,960 --> 00:11:37,960
針對 watchOS 設備和 watch 模擬器。

153
00:11:40,960 --> 00:11:44,960
現在你可以看到解析的值現在是iOS，

154
00:11:44,960 --> 00:11:46,960
macOS，和watchOS。

155
00:11:46,960 --> 00:11:50,960
解析的值現在是iOS，macOS，和watchOS。

156
00:11:50,960 --> 00:12:12,960
接下來，我們要來看看構建選項組。

157
00:12:12,960 --> 00:12:22,960
以及調試信息格式的設置。

158
00:12:22,960 --> 00:12:28,960
這指的是調試信息的類型

159
00:12:28,960 --> 00:12:32,960
由構建生成。

160
00:12:32,960 --> 00:12:40,960
它有兩個變體，DWARF和帶DSYM的DWARF。

161
00:12:40,960 --> 00:12:45,960
DSYM也代表調試符號

162
00:12:45,960 --> 00:12:48,960
並由Xcode產生的文件

163
00:12:48,960 --> 00:12:52,960
從單獨的對象文件中。

164
00:12:52,960 --> 00:13:00,960
默認情況下，你會看到Xcode將調試變體設置為DWARF

165
00:13:00,960 --> 00:13:04,960
並將發布配置設置為帶DSYM的DWARF。

166
00:13:04,960 --> 00:13:07,960
這對於加快調試構建的速度很有用

167
00:13:07,960 --> 00:13:11,960
不生成調試符號，

168
00:13:11,960 --> 00:13:15,960
它們被用來對Crash logs進行符號化。

169
00:13:19,960 --> 00:13:25,960
作為一個例子，我會使用產品菜單，

170
00:13:25,960 --> 00:13:28,960
在Finder中顯示建構資料夾，

171
00:13:28,960 --> 00:13:37,960
並查看我的衍生數據內容。

172
00:13:49,960 --> 00:13:55,960
你會在debug資料夾看到，

173
00:13:55,960 --> 00:13:58,960
我們只有EssentialApp和框架，

174
00:13:58,960 --> 00:14:01,960
所以沒有DSYM。

175
00:14:01,960 --> 00:14:05,960
如果我前往Xcode並更改設定

176
00:14:05,960 --> 00:14:12,960
將EssentialFeed的設定改為在調試中也使用DWARF with DSYM

177
00:14:12,960 --> 00:14:18,960
並重建，

178
00:14:18,960 --> 00:14:21,960
我看到調試符號檔案庫

179
00:14:21,960 --> 00:14:29,960
也為EssentialFeed創建。

180
00:14:29,960 --> 00:14:33,960
缺點是生成這些調試符號

181
00:14:33,960 --> 00:14:36,960
需要更多的建構時間，

182
00:14:36,960 --> 00:14:41,960
所以這就是為什麼預設在調試配置中不啟用，

183
00:14:41,960 --> 00:14:48,960
所以建構速度會更快。

184
00:14:48,960 --> 00:14:51,960
我看到了聊天上的幾個問題，

185
00:14:51,960 --> 00:14:55,960
所以我會看看這個。

186
00:14:55,960 --> 00:14:56,960
Joseph 在問，

187
00:14:56,960 --> 00:14:58,960
是否有任何有效的差異

188
00:14:58,960 --> 00:15:03,960
在將特定的 SDK 放在基礎 SDK 設置

189
00:15:03,960 --> 00:15:07,960
與將其放在額外 SDKs 列表中？

190
00:15:07,960 --> 00:15:09,960
如果我有一些跨 iOS，

191
00:15:09,960 --> 00:15:15,960
macOS，我應該把哪一個設置為基礎 SDK？

192
00:15:15,960 --> 00:15:16,960
作為後續，

193
00:15:16,960 --> 00:15:19,960
設置支持的平台設置為跨平台

194
00:15:19,960 --> 00:15:22,960
和使用額外的 SDK 設置有什麼區別？

195
00:15:22,960 --> 00:15:25,960
這兩者有關係嗎？

196
00:15:25,960 --> 00:15:27,960
我可能沒完全理解。

198
00:15:31,960 --> 00:15:34,960
首先，基礎的 SDK

199
00:15:34,960 --> 00:15:39,960
基本上控制著

200
00:15:39,960 --> 00:15:43,960
Xcode 認為此目標 SDK 是什麼，

201
00:15:43,960 --> 00:15:51,960
所以即使平台允許添加多個平台，

202
00:15:51,960 --> 00:15:55,960
你可以看到所有默認都還在使用一個 SDK，

203
00:15:55,960 --> 00:15:57,960
一個平台。

204
00:15:57,960 --> 00:16:00,960
而這是您在基礎 SDK 中設定的一個。

205
00:16:00,960 --> 00:16:04,960
您可以在額外的 SDK 中添加更多，

206
00:16:04,960 --> 00:16:08,960
但即使在這種情況下，像 EssentialFeed 的情況，

207
00:16:08,960 --> 00:16:10,960
也不需要那樣，

208
00:16:10,960 --> 00:16:13,960
因為取決於平台，

209
00:16:13,960 --> 00:16:18,960
每次 SDK 都會被解析為不同的 SDK，

210
00:16:18,960 --> 00:16:22,960
所以這取決於你選擇的目標目的地。

211
00:16:25,960 --> 00:16:27,960
我希望我已經解釋清楚了。

212
00:16:27,960 --> 00:16:42,960
如果沒有，我們可以像往常一樣在 Slack 上討論。

213
00:16:42,960 --> 00:16:48,960
接下來，我要談論啟用 Bitcode。

214
00:16:48,960 --> 00:16:50,960
那麼什麼是 Bitcode？

215
00:16:50,960 --> 00:16:54,960
Bitcode 是應用程序二進制的表示

216
00:16:54,960 --> 00:17:01,960
可以按需編譯

217
00:17:01,960 --> 00:17:05,960
取決於從 AppStore 下載應用程序的設備。

218
00:17:05,960 --> 00:17:08,960
這也使得由 Apple 進行的編譯器改進

219
00:17:08,960 --> 00:17:10,960
可以自動實施

220
00:17:10,960 --> 00:17:14,960
而不需要開發者重新提交他們的應用程序，

221
00:17:14,960 --> 00:17:16,960
所以這非常酷。

222
00:17:16,960 --> 00:17:19,960
啟動這個設置表示目標或專案

223
00:17:19,960 --> 00:17:21,960
應在編譯期間生成Bitcode

224
00:17:21,960 --> 00:17:25,960
用於支援的平台和架構。

225
00:17:25,960 --> 00:17:28,960
對於存檔建構，Bitcode將被生成

226
00:17:28,960 --> 00:17:33,960
在已鏈接的二進制檔案中用於提交到 AppStore。

227
00:17:33,960 --> 00:17:36,960
對於其他建構，編譯器和連接器將檢查

228
00:17:36,960 --> 00:17:38,960
代碼是否符合生成Bitcode的要求

229
00:17:38,960 --> 00:17:40,960
但不會生成實際的Bitcode。

230
00:17:40,960 --> 00:17:45,960
這個設置要求所有鏈接的二進制檔案

231
00:17:45,960 --> 00:17:48,960
也支援Bitcode。

232
00:17:48,960 --> 00:17:50,960
所以在我們的案例中，如果你想要啟用Bitcode

233
00:17:50,960 --> 00:17:54,960
對於EssentialApp，

234
00:17:54,960 --> 00:17:56,960
已連接的EssentialFeed和EssentialFeed iOS框架

235
00:17:56,960 --> 00:18:00,960
也需要支援Bitcode。

236
00:18:00,960 --> 00:18:03,960
啟用Bitcode會導致建構時間變慢，

237
00:18:03,960 --> 00:18:06,960


238
00:18:06,960 --> 00:18:09,960
特別是在進行歸檔動作時，

239
00:18:09,960 --> 00:18:12,960
因為生成構建代碼需要額外的時間，

240
00:18:12,960 --> 00:18:17,960
系統還需要使用新的Bitcode簽名

241
00:18:17,960 --> 00:18:20,960
重新生成調試符號。

242
00:18:20,960 --> 00:18:27,960
所以當有可能的時候，你仍然應該使用它。

243
00:18:27,960 --> 00:18:31,960
以一個實例來說，

244
00:18:31,960 --> 00:18:35,960
使用現有設置進行歸檔

245
00:18:35,960 --> 00:18:39,960
大約需要20秒。

246
00:18:39,960 --> 00:18:46,960
禁用Bitcode將會將構建時間縮短到大約10秒，

247
00:18:46,960 --> 00:18:50,960
因此你可以看到這是多大的一個改善。

248
00:18:50,960 --> 00:18:53,960
另外，使用Bitcode需要更多的處理

249
00:18:53,960 --> 00:19:11,960
當導出或上傳到AppStore。

250
00:19:11,960 --> 00:19:15,960
接下來是Enable Previews。

251
00:19:15,960 --> 00:19:17,960
如果這個設置被啟用，

252
00:19:17,960 --> 00:19:20,960
產品將會使用適當的選項進行構建

253
00:19:20,960 --> 00:19:24,960
以支持SwiftUI預覽。

254
00:19:24,960 --> 00:19:26,960
所以如果你正在使用SwiftUI，

255
00:19:26,960 --> 00:19:29,960
而且你想利用預覽，

256
00:19:29,960 --> 00:19:31,960
你必須將此設置為Yes。

257
00:19:31,960 --> 00:19:37,960
否則的話，你可以將其設定為No。

258
00:19:37,960 --> 00:19:40,960
啟用測試能力。

259
00:19:40,960 --> 00:19:42,960
當啟用測試能力時，

260
00:19:42,960 --> 00:19:45,960
該產品將會帶有適合

261
00:19:45,960 --> 00:19:47,960
運行自動化測試的選項，

262
00:19:47,960 --> 00:19:52,960
比如讓私有介面能夠被測試存取。

263
00:19:52,960 --> 00:19:59,960
這可能導致建置速度及運行測試的速度變慢

264
00:19:59,960 --> 00:20:04,960
比沒有啟用測試能力時還要慢。

265
00:20:04,960 --> 00:20:05,960
如你記得的，

266
00:20:05,960 --> 00:20:09,960
你應該透過他們的公開介面測試你的實體，

267
00:20:09,960 --> 00:20:13,960
這麼一來你就不會將測試與執行細節偶合。

268
00:20:13,960 --> 00:20:19,960
如果確實如此，你可以將啟用測試能力設置為No，

269
00:20:19,960 --> 00:20:22,960
即使是在debug。

270
00:20:22,960 --> 00:20:25,960
這樣你就能得到更快的建置速度，更快的運行測試速度，

271
00:20:25,960 --> 00:20:28,960
以及保護自己和你的團隊

272
00:20:28,960 --> 00:20:30,960
不去使用內部細節，

273
00:20:30,960 --> 00:20:57,960
因為測試可能的導入將不可用。

274
00:20:57,960 --> 00:21:01,960
接下來是開發資源。

275
00:21:01,960 --> 00:21:04,960
這個設置包含文件和目錄


276
00:21:04,960 --> 00:21:08,960
只用於開發。

277
00:21:08,960 --> 00:21:12,960
存檔和安裝建置將排除此內容。

278
00:21:12,960 --> 00:21:17,960
這也可以從目標一般設定

279
00:21:17,960 --> 00:21:22,960
開發資產部分設定。

280
00:21:22,960 --> 00:21:28,960
將只用於開發或測試的資產添加至此非常有用，

281
00:21:28,960 --> 00:21:44,960
因此可以保證不會將它們添加到發布版建置。

282
00:21:44,960 --> 00:21:48,960
目標設備家族設定基本上包含

283
00:21:48,960 --> 00:21:53,960
支援裝置的清單。

284
00:21:53,960 --> 00:21:59,960
設定為1，或iPhone, APP還可以在iPads上運行，

285
00:21:59,960 --> 00:22:05,960
但是在1x，2x兼容縮放模式下。

286
00:22:05,960 --> 00:22:10,960
如果你設定值為iPhone和iPad，

287
00:22:10,960 --> 00:22:14,960
你也將增加對iPad介面的支援。

288
00:22:14,960 --> 00:22:21,960
如你所見，Mac Catalyst也是可用的。

289
00:22:21,960 --> 00:22:25,960
另一方面，如果你設定值為只有iPad


290
00:22:25,960 --> 00:22:28,960
嘗試在 iPhone 上安裝這款應用，

291
00:22:28,960 --> 00:22:33,960
你會看到像是這款應用無法支援

292
00:22:33,960 --> 00:22:46,960
這個設備家族之類的錯誤。

293
00:22:46,960 --> 00:22:52,960
iOS 部署目標是相當重要的設定。

294
00:22:52,960 --> 00:22:56,960
它基本上包含最低支援的 iOS 版本，

295
00:22:56,960 --> 00:23:01,960
所以在我們這個案例中是 iOS 14.

296
00:23:01,960 --> 00:23:05,960
程式碼會在這些和後續版本的 iOS 上運行。

297
00:23:05,960 --> 00:23:09,960
在早期版本中無法使用的 Framework APIs

298
00:23:09,960 --> 00:23:11,960
將被弱連結。

299
00:23:11,960 --> 00:23:14,960
你的程式碼應該在呼叫新的 APIs 前，

300
00:23:14,960 --> 00:23:25,960
檢查特定的系統版本。

301
00:23:25,960 --> 00:23:31,960
大部分的應用都會支援目前主要的 iOS 版本，

302
00:23:31,960 --> 00:23:36,960
以及前一個版本，所以在我們這邊來說是 iOS 15 和 iOS 14。

303
00:23:36,960 --> 00:23:39,960
但當然，根據產品需求，

304
00:23:39,960 --> 00:23:44,960
或目標使用者，你可能需要支援更早期的版本。

305
00:23:44,960 --> 00:23:47,960
或者如果這個產品開發了很多年，

306
00:23:47,960 --> 00:23:50,960
或者它需要在一些既有的設備上運行，

307
00:23:50,960 --> 00:23:56,960
你甚至可能需要回溯到 iOS 8 或 9。 

308
00:23:56,960 --> 00:23:59,960
重要的是更改部署目標 

309
00:23:59,960 --> 00:24:02,960
會引領至具有新參數的不同構建過程 

310
00:24:02,960 --> 00:24:05,960
像是支援的 OS 範圍。

311
00:24:05,960 --> 00:24:09,960
有时，这可能会导致错误或警告。 

312
00:24:09,960 --> 00:24:11,960
如果你提高部署目標的值，

313
00:24:11,960 --> 00:24:15,960
你需要替換已被棄用或移除的 API。

314
00:24:15,960 --> 00:24:18,960
如果你降低部署目標的值，

315
00:24:18,960 --> 00:24:20,960
有些 API 可能就不存在。

316
00:24:20,960 --> 00:24:28,960
所以这就需要使用 if at available来处理。 

317
00:24:28,960 --> 00:24:32,960
关键在于你的代码必须能在所有受支援的 OS 上運行 

318
00:24:32,960 --> 00:24:37,960
从部署目标开始，直到任何较新的OS。

319
00:24:37,960 --> 00:24:42,960
我之所以提出這一點，是因為你可以在 OS 中安装应用程式

320
00:24:42,960 --> 00:24:47,960
那些在你實際建立那些應用程式時無法達到的功能。

321
00:24:47,960 --> 00:24:51,960
但編譯器會以這種方式幫助你。

322
00:24:51,960 --> 00:24:57,960
讓我們用這來做一個短暫的演示。

323
00:24:57,960 --> 00:25:08,960
所以我的 EssentialApp 構建得很好。

324
00:25:08,960 --> 00:25:14,960
希望如此。

325
00:25:14,960 --> 00:25:24,960
是的。現在作為一個練習，假設我們要支援所有超過 iOS 10 的功能。

326
00:25:24,960 --> 00:25:29,960
所以我要將專案級別設定為 iOS 10。

327
00:25:29,960 --> 00:25:35,960
所以我的兩個目標在 EssentialFeed 中都能利用這個。

328
00:25:35,960 --> 00:25:44,960
我也會對 EssentialApp 做同樣的事。

329
00:25:44,960 --> 00:25:48,960
現在讓我們試著去構建。

330
00:25:48,960 --> 00:25:56,960
當然，我得到一個失敗。

331
00:25:56,960 --> 00:26:03,960
錯誤是 UUID 屬性功能要求 iOS 部署目標設為 11 或更高版本。

332
00:26:03,960 --> 00:26:15,960
所以我在FeedStore中對於data Model設置的UUID屬性至少需要iOS 11。

333
00:26:15,960 --> 00:26:28,960
讓我們嘗試通過將EssentialFeed的部署目標提升到iOS 11來解決這個問題。

334
00:26:28,960 --> 00:26:50,960
嘗試再次構建。

335
00:26:50,960 --> 00:27:11,960
是的。我遇到了一個錯誤，relative daytime formatter只在iOS 13或更高版本中可用。

336
00:27:11,960 --> 00:27:20,960
所以讓我們繼續這個練習，將部署目標設置為iOS 13。

337
00:27:20,960 --> 00:27:40,960
看我們是否可以成功構建。

338
00:27:40,960 --> 00:27:47,960
所以EssentialFeed目標正確地構建。

339
00:27:47,960 --> 00:28:00,960
但是我遇到了這個問題，為iOS 10編譯，但EssentialFeed模塊的最低部署目標是iOS 13。

340
00:28:00,960 --> 00:28:08,960
這是因為我們所有強烈依賴的模塊至少需要支持與我們的目標相同的OS版本。

341
00:28:08,960 --> 00:28:14,960
記住，我們將 EssentialApp 的部署目標設置為 iOS 10，但我們從未更改過它。

342
00:28:14,960 --> 00:28:22,960
所以 EssentialApp 想要建立適用於 iOS 10 的版本，但連結的模塊只支援 iOS 13。

343
00:28:22,960 --> 00:28:25,960
這就是問題所在。

344
00:28:25,960 --> 00:28:38,960
為了解決這個問題，我將到 EssentialApp 裡並將部署目標設為與我的 iOS 13 相匹配。

345
00:28:38,960 --> 00:28:46,960
然後我將嘗試建立。

346
00:28:46,960 --> 00:28:59,960
現在看到更多的錯誤信息。第一個錯誤就是 Logger 類別只能在 iOS 14 或更新版本中使用。

347
00:28:59,960 --> 00:29:19,960
我可以通過使用 at available API 來修復這個問題，但我需要做更多的情況的調整。

348
00:29:19,960 --> 00:29:37,960
讓我們回到最初的設置。


349
00:29:37,960 --> 00:29:47,960
這次我想作為練習，提高部署目標。

350
00:29:47,960 --> 00:29:51,960
但首先我想添加一些有趣的程式碼。

351
00:29:51,960 --> 00:30:00,960
所以如你們看到的，再次地，我的所有目標都成功建構，我想記錄所有我目前的窗口。

352
00:30:00,960 --> 00:30:09,960
所以我會進行 log.info ，信息將像是當前窗口。

353
00:30:09,960 --> 00:30:16,960
然後我將使用 UIApplication.shared.windows。

354
00:30:16,960 --> 00:30:25,960
我將會建立這個，並且建立成功。

355
00:30:25,960 --> 00:30:45,960
现在讓我們試著將我的部署目標提高到 iOS 15，然後再建構一次。

356
00:30:45,960 --> 00:31:07,960
我應該在這裡看到一個警告，所以我將進行一次清理。有時 Xcode 需要清理以顯示正確的結果。

357
00:31:07,960 --> 00:31:17,960
所以如你們看到的，這行現在在 iOS 15 中已废弃的 Windows API 上產生了一個警告。

358
00:31:17,960 --> 00:31:24,960
這以前並非問題，因為在支援iOS 14的時候，這個API是完全有效的。

359
00:31:24,960 --> 00:31:35,960
現在，由於我們的目標是iOS 15及以上，這個API已被棄用，我收到了警告。

360
00:31:35,960 --> 00:31:45,960
我將撤銷這些更改，並查看聊天室，因為那裡有一個問題。

361
00:31:45,960 --> 00:31:54,960
所以Igor問Xcode 13.2.1是否允許將最小的iOS部署目標設定為iOS 9。

362
00:31:54,960 --> 00:31:56,960
如果我想要iOS 8怎麼辦？

363
00:31:56,960 --> 00:32:07,960
嗯，依我的了解，我認為你可以編輯這個值，如果不是在建立設置編輯器中，

364
00:32:07,960 --> 00:32:15,960
肯定是在一些XC配置文件中，這是我們將在另一集中討論的。

365
00:32:15,960 --> 00:32:35,960
所以我認為你可以這樣做。

366
00:32:35,960 --> 00:32:38,960
我們已經講解了iOS的部署目標。

367
00:32:38,960 --> 00:32:47,960
這裡有設定選項針對macOS的部署目標、tvOS和watchOS，其操作方式跟剛才我們展示的完全一樣，

368
00:32:47,960 --> 00:33:09,960
只不過是在他們各自的平台上實施。所以我認為沒有必要深入這些細節。

369
00:33:09,960 --> 00:33:19,960
接下來，我想看看MACH-O類型的設定，這是一個相當冷門的設定，但卻很重要。

370
00:33:19,960 --> 00:33:28,960
所以，MACH-O類型決定了生成的二進制的格式以及在創建其他二進制時如何連接。

371
00:33:28,960 --> 00:33:36,960
如果你有興趣，Apple提供了一個MACH-O編程主題的文檔。

372
00:33:36,960 --> 00:33:48,960
這個設定支援的值有執行檔，對於獨立的二進制執行檔以及不能被連接的二進制執行檔。

373
00:33:48,960 --> 00:33:56,960
所以在EssentialApp的情況下，MACH-O的類型是一個可執行檔。

374
00:33:56,960 --> 00:34:07,960
對於EssentialFeed的目標，其值是動態庫。

375
00:34:07,960 --> 00:34:15,960
動態庫在建構時間被連接，並在系統需要時自動加載。

376
00:34:15,960 --> 00:34:31,960
其他的值是Bundle。Bundle庫在運行時顯式引用，或者是在建構時間連接並在執行時間載入的靜態庫。

377
00:34:31,960 --> 00:34:45,960
我從未使用過可轉換對像文件，但他們應該是在建構時間被連接的單一模組文件。

378
00:34:45,960 --> 00:34:53,960
這設定的重要原因在於它控制我們的目標將產生何種類型的二進制檔。

379
00:34:53,960 --> 00:35:06,960
通過更改此設定，我們可以切換從動態到靜態，或者反之，也就是說，一個庫或框架。


380
00:35:06,960 --> 00:35:16,960
透過包裹器擴展設置區分庫和框架，我們稍後將會看到。

381
00:35:16,960 --> 00:35:26,960
但這個設定會影響其他模組的建構，因此改變它可能會導致建構失敗。

382
00:35:26,960 --> 00:35:31,960
我們也可以來看個範例。

383
00:35:31,960 --> 00:35:52,960
我將重新建構所有內容。

384
00:35:52,960 --> 00:36:07,960
並且用該產品來為最終尋找器建構。

385
00:36:07,960 --> 00:36:10,960
我會使用終端機。

386
00:36:10,960 --> 00:36:22,960
File 命令與 File 參數將輸出 File 的類型。

387
00:36:22,960 --> 00:36:45,960
所以如我們在這裡看到的，EssentialFeed 框架是一個包裹在框架內的 macOS 64 位元動態共享庫。而這種情況也同樣適用於 EssentialFeed iOS，我就不在此顯示了。

388
00:36:45,960 --> 00:36:57,960
如果我把EssentialFeed的宏类型改为靜態庫，我需要先清理。

389
00:36:57,960 --> 00:37:07,960
然後再重新建構它。

390
00:37:07,960 --> 00:37:18,960
你會注意到，編譯器所花費的時間大約相同，所以建立靜態或動態庫並沒有很大差別。

391
00:37:18,960 --> 00:37:44,960
這次，抱歉，有一個新的資料夾，所以我需要再次顯示建構文件並將我的資料夾更改為新資料夾。

392
00:37:44,960 --> 00:38:02,960
在EssentialFeed框架上運行相同的命令，將打印出一個不同的輸出，即當前的存檔。這個當前的存檔指的是一個靜態模塊。

393
00:38:02,960 --> 00:38:26,960
須注意，將框架從動態更改為靜態可能需要在您的配置中進行額外的改變。在我們的情況下，EssentialFeed目標包含一些嵌入的CoreData模型，這些模型不再正確地嵌入到應用程式Bundle中，所以我們需要以不同的方式來解決這個問題。

394
00:38:26,960 --> 00:38:33,960
這個練習的唯一目的是顯示宏類型設置的工作方式。

395
00:38:33,960 --> 00:38:48,960
所以我將會撤銷它們。

396
00:38:48,960 --> 00:38:59,960
到目前為止有任何問題嗎？

397
00:38:59,960 --> 00:39:01,960
好的。

398
00:39:01,960 --> 00:39:05,960
繼續。

399
00:39:05,960 --> 00:39:22,960
在這個連結部分，我們也有其他的鏈接器標誌設置，它允許將選項傳遞給鏈接器的調用。

400
00:39:22,960 --> 00:39:39,960
一個很常見的例子是將負的Objective-C傳到鏈接器中，這將導致實現任何Objective-C類或類別的靜態庫的所有成員被加載。


401
00:39:39,960 --> 00:39:50,960
但是這可能會使得產生的可執行檔案變大，並且可能選取到不必要的對象，因此，這個設定預設是關閉的。

402
00:39:50,960 --> 00:40:05,960
正如我所說，它只影響Objective-C。

403
00:40:05,960 --> 00:40:13,960
接下來，我們將看待打包群組。

404
00:40:13,960 --> 00:40:17,960
第一個設定是Define Module。

405
00:40:17,960 --> 00:40:23,960
如果此設定被啟用，該產品將被視為定義了自己的模塊。

406
00:40:23,960 --> 00:40:33,960
這使得在適當的時候能產生模塊映射檔案，並允許該產品作為一個模塊進行導入。

407
00:40:33,960 --> 00:40:53,960
對於Objective-C，啟用從框架創建模塊很有用，因此你可以使用類似於import EssentialFeed的語法。

408
00:40:53,960 --> 00:40:57,960
生成Info.plist檔案。

409
00:40:57,960 --> 00:41:08,960
如果啟用，本設定將自動從建置設定生成一個包含內容的Info.plist檔案，

410
00:41:08,960 --> 00:41:15,960
特別是來自Info.plist值群組的設定。


411
00:41:15,960 --> 00:41:26,960
當我們想要在每次構建時重新生成我們的Info.plist時，這可能會很有用。

412
00:41:26,960 --> 00:41:42,960
說到Info.plist，下一個設定是Info.plist檔案的路徑。

413
00:41:42,960 --> 00:41:47,960
我看到來自Srikant的一個問題。

414
00:41:47,960 --> 00:41:57,960
對於MACH-O類型，推薦的選項是什麼？

415
00:41:57,960 --> 00:42:01,960
如果你正在構建一個應用，它肯定會是一個可執行檔。

416
00:42:01,960 --> 00:42:10,960
如果你正在構建一個框架，那麼是否要將其靜態鏈接或動態鏈接取決於你。

417
00:42:10,960 --> 00:42:19,960
我不會在這個辯論上花更長的時間進行討論，這是我們已經做過幾次的事情，

418
00:42:19,960 --> 00:42:28,960
但我的簡短建議是嘗試將你的框架和庫檔案做靜態設置

419
00:42:28,960 --> 00:42:44,960
除非你有強烈的理由為它們做動態設置，因為這將使你的應用啟動速度更快。

420
00:42:44,960 --> 00:42:51,960
回到我們在打包組中的設定。

421
00:42:51,960 --> 00:42:53,960
產品 BundleIdentifier。

422
00:42:53,960 --> 00:42:58,960
這包含了一個獨特碼識別串 (String) 對應到 Bundle。

423
00:42:58,960 --> 00:43:05,960
這些字符必須是一個只使用字母數字和連字符的反向 DNS。

424
00:43:05,960 --> 00:43:12,960
此值用作在構建 Bundle 的 Info.plist 中的 CF BundleIdentifier。

425
00:43:12,960 --> 00:43:20,960
在我們的案例中，是 chrome.essentialDeveloper.EssentialFeed。

426
00:43:20,960 --> 00:43:32,960
而回想一下，此值就是您在創建 Xcode 專案時所輸入的。

427
00:43:32,960 --> 00:43:44,960
產品模組名稱包含了源碼模組所使用的名稱，也會用在 import 声明中。

428
00:43:44,960 --> 00:43:47,960
此名稱必須是合法的識別符。

429
00:43:47,960 --> 00:43:53,960
產品名稱包含由目標生成的產品的基本名稱。

430
00:43:53,960 --> 00:43:59,960
在我們的案例中，是 EssentialFeed。

431
00:43:59,960 --> 00:44:03,960
我們提到了包裝器擴展(wrapper extension)。

432
00:44:03,960 --> 00:44:12,960
這包含用於產品包裝器的擴展，其默認值基於產品類型。

433
00:44:12,960 --> 00:44:18,960
在我們的情況下，對於EssentialFeed框架，這個擴展是一個框架。

434
00:44:18,960 --> 00:44:24,960
如果這是一個庫，你在這裡將看不到任何擴展。

435
00:44:24,960 --> 00:44:40,960
如果你看一下應用程序目標，包裝器擴展就是app。

436
00:44:40,960 --> 00:44:45,960
我們移動到搜索路徑組。

437
00:44:45,960 --> 00:44:58,960
首先，我們看到框架搜索路徑，這是編譯器和鏈接器用於解析產品所使用的框架的文件夾路徑列表。

438
00:44:58,960 --> 00:45:11,960
標頭文件搜索路徑也包含編譯器尋找包含或導入的標頭文件的文件夾，這主要是在編譯C語言或Objective-C時使用。

439
00:45:11,960 --> 00:45:32,960
圖書館搜尋路徑也包含了被連接器用於尋找底授權產品中使用的庫的資料夾的列表。

440
00:45:32,960 --> 00:45:37,960
接下來是，簽署組。

441
00:45:37,960 --> 00:45:41,960
第一個設定是代碼簽署權益。

442
00:45:41,960 --> 00:45:45,960
這包含了指向一個文件的路徑，該文件指定了代碼簽署權益。

443
00:45:45,960 --> 00:46:00,960
這是一個plist文件，包含了像蘋果推送服務環境(開發或生產環境)、相關域、金鑰鏈訪問組等等的應用程序能力設置。

444
00:46:00,960 --> 00:46:08,960
代碼簽署身份包含了一個在金鑰鏈中的有效的代碼簽署證書的名稱。

445
00:46:08,960 --> 00:46:13,960
一個缺失或無效的證書會導致一個建立錯誤。

446
00:46:13,960 --> 00:46:27,960
一個常見的做法是將除錯配置設定為蘋果開發配置，並把產品配置設定為蘋果分發配置。

447
00:46:27,960 --> 00:46:36,960
這個我們可以在更進階的課程中討論。

448
00:46:36,960 --> 00:46:42,960
這是因為所有的code signing都相當複雜。

449
00:46:42,960 --> 00:46:45,960
但我們仍然會在這裡提到它們。

450
00:46:45,960 --> 00:46:56,960
Code signing的風格指定了獲取和定位簽名資產的方法。

451
00:46:56,960 --> 00:47:03,960
選擇自動，讓Xcode自動創建和更新配置檔，app IDs 和證書。

452
00:47:03,960 --> 00:47:10,960
選擇手動在開發者網站上更新這些信息。

453
00:47:10,960 --> 00:47:21,960
這些設定與您記住的簽名和能力標籤中的相同。

454
00:47:21,960 --> 00:47:26,960
然而，我們建議從簡單開始，當需要時再增加控制權。

455
00:47:26,960 --> 00:47:32,960
所以自動方式可能是一個好的開始。

456
00:47:32,960 --> 00:47:48,960
當它不再滿足您的項目需求或創造出的問題多於解決的問題時，您可以考慮查看手動方案提供的全面控制。

457
00:47:48,960 --> 00:47:57,960
開發小組包含用於憑證和供應配置文件的開發小組的團隊ID。

458
00:47:57,960 --> 00:48:10,960
該小組專屬於您的團隊，進行Xcode新專案流程時，會使用您輸入的值來填充它。

459
00:48:10,960 --> 00:48:17,960
而供應配置文件必須包含配置文件名稱或UUID。

460
00:48:17,960 --> 00:48:25,960
當然，缺少或無效的配置文件將引起建構錯誤。

461
00:48:25,960 --> 00:48:35,960
結合開發團隊使用，他們充分指定了一個供應配置文件。

462
00:48:35,960 --> 00:49:02,960
如果您使用手動簽名方式，可以為您的供應配置文件給予有意義的名稱，指定應用名稱和發佈類型。

463
00:49:02,960 --> 00:49:10,960
接下來，在測試組中，有一個完整測試的設定，但我們的生產目標對此並無任何值。

464
00:49:10,960 --> 00:49:17,960
因此，我們要查看EssentialApp測試目標。

465
00:49:17,960 --> 00:49:33,960
我們看到該值由Xcode自動設定為建構產品目錄，然後生成二進制檔，即EssentialApp.apps-EssentialApp。

466
00:49:33,960 --> 00:49:48,960
因此，測試主機設定包含執行檔的路徑，即測試套件被注入的位置。只有在測試一個應用程序或其他可執行檔時，才指定該設定。

467
00:49:48,960 --> 00:50:00,960
像我們剛剛看到的，這在應用程式的單元測試目標中非常有用。

468
00:50:00,960 --> 00:50:10,960
從版本控制組，我們要看的是市場版本，它定義了應用程式的用戶可見版本。

469
00:50:10,960 --> 00:50:27,960
此值對應到您的Info.plist中的CF Bundle short version String鍵。

470
00:50:27,960 --> 00:50:40,960
我們建議您使用語義版本控制，這是一種規定版本號應包含三個部分的指導原則，分別是主版本號、次版本號和修補版本號。

471
00:50:40,960 --> 00:50:50,960
所以，如果我們假設您已有一個公開的版本，即1.0.0，未來的版本將遵從這些規則。

472
00:50:50,960 --> 00:51:01,960
如果您的新版本只包含修補且沒有新增任何功能，我們只需要增加修補版本號，所以新的釋出版本將是1.0.1。

473
00:51:01,960 --> 00:51:15,960
如果新版本既增加了一些功能也進行了修補，且與前一個版本完全兼容，您需要增加次版本號，因此您會釋出1.1.0。

474
00:51:15,960 --> 00:51:24,960
只有當新版本與上一版本產生不兼容性時，才需要將主版本號增加，因此新版本將會是2.0.0。

475
00:51:24,960 --> 00:51:35,960
這只是一個例子。

476
00:51:35,960 --> 00:51:44,960
另一個重要的設定是鏈接時優化。

477
00:51:44,960 --> 00:51:49,960
這允許在鏈接過程中跨文件邊界進行優化。

478
00:51:49,960 --> 00:51:52,960
它有三個選項。

479
00:51:52,960 --> 00:51:57,960
不，這意味著不使用鏈接優化，這是默認的一個。

480
00:51:57,960 --> 00:52:05,960
Monolithic，將所有的可執行代碼合併成一個單元並對其進行激進的編譯器優化。

481
00:52:05,960 --> 00:52:11,960
或者是增量的，它是一種折衷的方法。

482
00:52:11,960 --> 00:52:17,960
它仍然運行那些激進的編譯器優化，但是對每個單元進行平行處理。

483
00:52:17,960 --> 00:52:23,960
並且它實現了更快的增量構建，並且它比Monolithic使用的內存更少。

484
00:52:23,960 --> 00:52:32,960
請記住，這個設定可以提高您的app的運行效能，但會導致建立時間更長，所以總是要進行實驗並且衡量。

485
00:52:32,960 --> 00:52:48,960
在我們這個EssentialApp的案例中，它將建立時間增加了幾秒鐘。

486
00:52:48,960 --> 00:52:59,960
優化級別是一種GCC設定，指定產生的程式碼在速度和二進制大小方面的優化程度。

487
00:52:59,960 --> 00:53:11,960
因為它是一個GCC設定，所以只影響使用GCC編譯的程式碼，比如 C, Objective-C，但不影響Swift。

488
00:53:11,960 --> 00:53:30,960
支援的值有none（無優化），fast（快），faster（更快），fastest（最快），fastest and smallest（最快且最小），fastest with aggressive optimizations（最快且擁有進階優化）或 smallest with aggressive optimizations（最小且擁有進階優化）。

489
00:53:30,960 --> 00:53:48,960
預設是在偵錯設定下為none，而在釋出設定下為fastest, smallest。

490
00:53:48,960 --> 00:54:00,960
這可以提高你的app運行時的性能或二進制大小，但肯定會導致構建時間變長。

491
00:54:00,960 --> 00:54:19,960
debug和release有不同的值的原因是我們希望在debug中快速構建，但在release中進行較慢，更優化的構建，這些構建在運行時會更快。

492
00:54:19,960 --> 00:54:29,960
除非你真的需要，否則我會保留這個設置。

493
00:54:29,960 --> 00:54:41,960
接下來，在Apple Clang模組組中，我們已經為C和Objective-C啟用了模組。

494
00:54:41,960 --> 00:54:45,960
這允許使用系統API的模組。

495
00:54:45,960 --> 00:54:58,960
這可以導致構建和項目索引更快，所以如果可能的話，讓它保持為yes值。

496
00:54:58,960 --> 00:55:06,960
接下來，在Objective-C語言設置中，有啟用Objective-C異常處理的選項。

497
00:55:06,960 --> 00:55:33,960
這是默認設置為是，並且使得在你的 Objective-C 程式碼中處理異常時能夠使用 add try，add catch，add throw 語法。這並不影響 Swift。

498
00:55:33,960 --> 00:55:46,960
Objective-C 的自動引用計數（或 ARC）告訴編譯器自行解決物件的內存管理。

499
00:55:46,960 --> 00:55:58,960
這意味著在編譯時，編譯器會加入retain和release訊息。

500
00:55:58,960 --> 00:56:02,960
這只適用於 Objective-C。

501
00:56:02,960 --> 00:56:17,960
請注意，ARC 與其他語言的垃圾收集有很大的區別，因為垃圾收集在運行時發生並取決於當前的內存條件，

502
00:56:17,960 --> 00:56:30,960
而 ARC 是在編譯時，Clang 編譯器在識別何時注入那些對retain和release的調用方面非常高效。

503
00:56:30,960 --> 00:56:43,960
當然，這只會影響Objective-C的程式碼，但如果你仍有Objective-C的程式碼，這是一個相當強大的特性，所以我們建議你使用它。

504
00:56:43,960 --> 00:57:08,960
回到像是iOS 4之類的年代，ARC尚未出現，所以你必須手動對所有物件添加，保留和釋放，這也被稱為手動記憶體管理。

505
00:57:08,960 --> 00:57:24,960
接下來，進入預處理群組，我們有預處理器宏，內含形如鍵等於值的宏列表。

506
00:57:24,960 --> 00:57:44,960
預設情況下，Xcode為調試配置預設了這個debug宏等於一，所以我們可以在我們的Objective-C文件中添加條件代碼，如dash if def debug。

507
00:57:44,960 --> 00:57:59,960
他們只適用於 C Objective-C 檔案，所以 Swift 無法存取這些，但 Swift 也有一個設定。

508
00:57:59,960 --> 00:58:09,960
接下來，我們有很多警告設定，我建議你自己試試看，看看哪些對你有用。

509
00:58:09,960 --> 00:58:18,960
我建議開啟盡可能多的警告設定。

510
00:58:18,960 --> 00:58:33,960
在資源目錄（asset catalog）編譯器選項中，我們有主要的應用程式圖示設定名稱，這基本上包含了目標預設應用程式圖示的圖示設定名稱。

511
00:58:33,960 --> 00:58:48,960
這個值將在編譯時與 Info.plist File 合併。

512
00:58:48,960 --> 00:58:54,960
接下來，我們來看看一些特定於 Swift 的設定。

513
00:58:54,960 --> 00:59:04,960
首先，有編譯模式，這控制了一個模組中的 Swift 檔案是如何被重新建構。

514
00:59:04,960 --> 00:59:24,960
它有兩個值，增量，這將只重建過期的源文件，需要時運行多個編譯器進程，以及整個模塊，這始終在單個編譯器進程中重建模塊中的所有文件。

515
00:59:24,960 --> 00:59:38,960
Xcode的預設值為調試構建的增量值和釋放構建的整個模塊值，再次針對在調試中更快的構建和運行更快的更優化的釋放架構。

516
00:59:38,960 --> 00:59:56,960
一個有趣的觀察是，在小項目中，使用整個模塊選項可能會導致更快的構建，即使在大項目中你會看到顯著的差異，其中增量構建速度快得多。

517
00:59:56,960 --> 01:00:04,960
正如我之前所說，整個模塊編譯結果在運行時更有效，因為它會產生單個輸出文件。

518
01:00:04,960 --> 01:00:10,960
使用這個設定，會讓Xcode只回報一條日誌項目。

519
01:00:10,960 --> 01:00:16,960
讓我們看看這條項目是什麼樣子。

520
01:00:16,960 --> 01:00:41,960
如果你看任何EssentialApp目標的之前的構建，我們會發現，編譯Swift源文件的構建步驟是非常具體的，並提到每一個被編譯的文件和總時間。

521
01:00:41,960 --> 01:01:06,960
如果我將我的設定改為整個模塊並重新建構，

522
01:01:06,960 --> 01:01:28,960
並在這裡搜尋我的目標，也就是EssentialApp，而不是所有這裡列出的文件，

523
01:01:28,960 --> 01:01:42,960
我們只看到編譯了好的Swift源文件。這是因為只有一個進程，而不是每個文件都有一個進程。

524
01:01:42,960 --> 01:02:01,960
讓我們還原，這樣我們就不會影響其他的範例。

525
01:02:01,960 --> 01:02:09,960
這個代碼生成組別中的另一個重要設定是優化等級。

526
01:02:09,960 --> 01:02:21,960
這指定了生成的代碼為速度和二進制大小優化的程度。所以它與之前的GCC優化級別相當類似。

527
01:02:21,960 --> 01:02:27,960
可用的值有無優化，

528
01:02:27,960 --> 01:02:32,960
優化速度或優化大小。

529
01:02:32,960 --> 01:02:46,960
我們可以看到，Xcode的默認值在除錯時沒有優化，在發布時則為優化速度。

530
01:02:46,960 --> 01:02:58,960
再次聲明，這是因為我們在除錯時希望獲得更快的建構，但在發布時可能要進行較慢的優化建構。

531
01:02:58,960 --> 01:03:08,960
將所有目標設置為在除錯建構時優化速度，建構時間增加到大約

532
01:03:08,960 --> 01:03:11,960
額外五秒鐘。

533
01:03:11,960 --> 01:03:21,960
我不會展示這個。

534
01:03:21,960 --> 01:03:37,960
在Swift編譯器自定義標誌中，有活躍的編譯條件設定，這基本上是一個能啟用條件表達式的編譯條件列表。

535
01:03:37,960 --> 01:03:40,960
將這翻譯成簡單的英語，

536
01:03:40,960 --> 01:03:53,960
這其實就是我們之前談到的 GCC 預處理器宏的等價物，我們可以在我們的 Swift 程式碼中定義可用的宏。

537
01:03:53,960 --> 01:04:00,960
你可以看到，預設情況下存在一種調試條件

538
01:04:00,960 --> 01:04:08,960
在調試配置中可用，而在釋放中則無。

539
01:04:08,960 --> 01:04:28,960
這使我們的 Swift 程式碼能在源 Swift 文件中做出條件判斷，如若調試。

540
01:04:28,960 --> 01:04:33,960
在編譯器一般組中，我們有

541
01:04:33,960 --> 01:04:38,960
Objective-C 產生的接口標頭名稱，

542
01:04:38,960 --> 01:04:48,960
這是 Swift 編譯器生成的，用於在 Objective-C 中使用 import 語句的標頭的名稱。

543
01:04:48,960 --> 01:04:57,960
所以如果我們想讓我們的 Swift 程式碼對 Objective-C 可見，我們必須生成這個標頭。

544
01:04:57,960 --> 01:05:09,960
默認情況下，其Xcode將值設置為Swift module name dash Swift.H

545
01:05:09,960 --> 01:05:20,960
並將默認生成此檔案，只需將Swift包含在您的目標中。

546
01:05:20,960 --> 01:05:26,960
在Swift編譯器語言組中，我們有Swift語言版本，

547
01:05:26,960 --> 01:05:31,960
它基本上控制編譯器接受的語法。

548
01:05:31,960 --> 01:05:35,960
每個Xcode版本將使用不同的值預填充這個，

549
01:05:35,960 --> 01:05:41,960
但它並非每個Xcode內嵌的Swift版本的確切相同值。

550
01:05:41,960 --> 01:05:48,960
所以它更像是一個兼容性版本，因為在我們運行Xcode 13.2的情況下，

551
01:05:48,960 --> 01:05:58,960
預填充的值是Swift 5，而我們的內嵌值是Swift 5.5。

552
01:05:58,960 --> 01:06:06,960
而一個對Objective-C和Swift都存在的有趣設定是將警告視為錯誤。

553
01:06:06,960 --> 01:06:14,960
這基本上會讓你的編譯器將任何警告轉換成一個錯誤，並使建構失敗。

554
01:06:14,960 --> 01:06:23,960
如果你設定這個為是，你允許你和你的團隊保持你們的項目清潔，不出現警告，

555
01:06:23,960 --> 01:06:31,960
這可能非常好。

556
01:06:31,960 --> 01:06:34,960
謝謝您。

557
01:06:34,960 --> 01:06:41,960
所以現在我將回答任何問題，如果有的話。

558
01:06:41,960 --> 01:06:45,960
謝謝你，Joseph。

559
01:06:45,960 --> 01:06:50,960
所以不經過符號化的 Crash logs 通常是人類可讀的動畫。

560
01:06:50,960 --> 01:06:55,960
你知道這對於 Objective-C 和 Swift有何不同嗎?

561
01:06:55,960 --> 01:07:02,960
首先，未經符號化的 Crash logs 不是人類可讀的。

562
01:07:02,960 --> 01:07:12,960
這就是符號化的作用，基本上將一些地址轉換成我們建構中的代碼行。

563
01:07:12,960 --> 01:07:18,960
是的，Objective-C 和 Swift 在這方面的處理方式確實有所不同。

564
01:07:18,960 --> 01:07:28,960
但是，如果你有一個DSYM用於你的模塊或模塊，如果你有多個二進制，

565
01:07:28,960 --> 01:07:33,960
那你應該能夠適當地符號化。

566
01:07:33,960 --> 01:07:40,960
有一集專門討論崩潰報告的節目。

567
01:07:40,960 --> 01:07:59,960
好的，感謝你的參與，我們很快再見。