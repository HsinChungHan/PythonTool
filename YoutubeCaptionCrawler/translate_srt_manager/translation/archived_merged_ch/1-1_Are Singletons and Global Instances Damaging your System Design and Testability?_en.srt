

1
00:00:00,133 --> 00:00:02,233
好的，在經過開始後

2
00:00:02,233 --> 00:00:03,100
這裡的部分

3
00:00:03,100 --> 00:00:05,600
你已經準備好開始這個計劃了，

4
00:00:05,600 --> 00:00:06,533
首先

5
00:00:06,533 --> 00:00:10,133
這個模塊是對規劃

6
00:00:10,133 --> 00:00:13,200
軟件設計和架構的介紹

7
00:00:13,200 --> 00:00:15,566
這裡有代碼，有圖表也有

8
00:00:15,566 --> 00:00:17,166
你可能從未聽說過的概念，

9
00:00:17,166 --> 00:00:20,866
所以要有開放的心態

10
00:00:20,866 --> 00:00:24,133
去接受新的想法，如果你覺得

11
00:00:24,133 --> 00:00:25,033
有點不知所措，

12
00:00:25,033 --> 00:00:28,466
你會確保學會你在這裡看到的所有概念，

13
00:00:28,466 --> 00:00:29,500
這一部分

14
00:00:29,500 --> 00:00:32,366
將會通過具體的例子詳細地

15
00:00:32,366 --> 00:00:34,300
在你學習進程中

16
00:00:34,300 --> 00:00:36,233
向你解釋，所以不要拖延

17
00:00:36,233 --> 00:00:38,133
費時在下一個課程，

18
00:00:38,133 --> 00:00:39,600
即使你還不完全明白這些概念，

19
00:00:39,600 --> 00:00:41,900
至此讓我再重申一次，

20
00:00:41,900 --> 00:00:43,100
不要停滯不前，

21
00:00:43,100 --> 00:00:45,500
在第一個模塊，這只是個

22
00:00:45,500 --> 00:00:47,033
介紹，

23
00:00:47,033 --> 00:00:50,066
你將在進行中學習到每個概念的詳細解釋

24
00:00:50,066 --> 00:00:52,366
並且有具體的例子來幫助你

25
00:00:52,366 --> 00:00:53,500
學習進程。

26
00:00:53,500 --> 00:00:55,900
所以現在不要感到壓力，

27
00:00:55,900 --> 00:00:56,700
你將會學會

28
00:00:56,700 --> 00:01:00,466
所有細節完全的概念

29
00:01:00,466 --> 00:01:02,300
而在這講座中你會學到

30
00:01:02,300 --> 00:01:04,466
singletons和global state

31
00:01:04,466 --> 00:01:06,700
如何損害你的應用程式架構，並且

32
00:01:06,700 --> 00:01:08,766
讓程式碼更難進行測試

33
00:01:08,766 --> 00:01:11,500
特別是在網路層方面

34
00:01:11,500 --> 00:01:12,000
完全

35
00:01:12,000 --> 00:01:14,933
這是iOS程式碼庫中的常見問題

36
00:01:14,933 --> 00:01:15,266
過度使用

37
00:01:15,266 --> 00:01:18,300
Singletons和global state

38
00:01:18,300 --> 00:01:19,900
因此你將學會有更好的

39
00:01:19,900 --> 00:01:22,000
方式，同時你會學會

40
00:01:22,000 --> 00:01:22,866
這些更佳解決方案

41
00:01:22,866 --> 00:01:25,033
隨著講座的進行，你將詳細學習

42
00:01:25,033 --> 00:01:26,066
這些演講。 

43
00:01:26,066 --> 00:01:28,700
請記住，這只是一個介紹，

44
00:01:28,700 --> 00:01:29,333
所以不要

45
00:01:29,333 --> 00:01:32,400
在此停滯不前，繼續前進，完成

46
00:01:32,400 --> 00:01:33,100
這些演講，

47
00:01:33,100 --> 00:01:38,633
並在下方提問。讓我們開始吧，

48
00:01:38,633 --> 00:01:42,000
所以這裡有兩個大主題，首先是這個

49
00:01:42,000 --> 00:01:43,200
網路層

50
00:01:43,200 --> 00:01:45,100
可測試性，然後我們有

51
00:01:45,100 --> 00:01:47,033
Singleton，那我們應該先談談

52
00:01:47,033 --> 00:01:48,066
Singletons嗎？

53
00:01:48,066 --> 00:01:50,366
好的，我有這個

54
00:01:50,366 --> 00:01:52,000
Singleton模式的定義，來自

55
00:01:52,000 --> 00:01:54,366
由 Gamma 所寫的設計模式書籍

56
00:01:54,366 --> 00:01:55,100
Johnson 

57
00:01:55,100 --> 00:01:58,133
Vlissides 和 Helm，GOF書本的四人幫

58
00:01:58,133 --> 00:01:59,100
的四人幫

59
00:01:59,100 --> 00:02:02,133
所以基本上，作者們表示

60
00:02:02,133 --> 00:02:04,700
設計模式 Singleton 是一種

61
00:02:04,700 --> 00:02:06,866
確保類只有一個實例的

62
00:02:06,866 --> 00:02:09,433
方式，並且它提供一個單一的

63
00:02:09,433 --> 00:02:10,800
訪問點

64
00:02:10,800 --> 00:02:13,100
該模式指定該類

65
00:02:13,100 --> 00:02:15,100
應該自己負責保持

66
00:02:15,100 --> 00:02:16,066
對它唯一實例的追蹤，

67
00:02:16,066 --> 00:02:18,933
並且它可以進一步確保

68
00:02:18,933 --> 00:02:21,033
通過攔截創建新的

69
00:02:21,033 --> 00:02:23,333
請求來創建其他實例

70
00:02:23,333 --> 00:02:24,133
的物件

71
00:02:24,133 --> 00:02:26,533
並提供一種訪問唯一

72
00:02:26,533 --> 00:02:27,566
實例的方式

73
00:02:27,566 --> 00:02:30,400
好，那很多，讓我們來演示一些

74
00:02:30,400 --> 00:02:31,200
程式碼

75
00:02:31,200 --> 00:02:34,000
並逐一討論，讓我們由

76
00:02:34,000 --> 00:02:35,200
班級開始

77
00:02:35,200 --> 00:02:39,100
ApiClient，我可以創建我的

78
00:02:39,100 --> 00:02:40,933
客戶端

79
00:02:40,933 --> 00:02:43,200
例如，那已經足夠，這是正常的


80
00:02:43,200 --> 00:02:45,433
在類別中你定義你的類型，你定義

81
00:02:45,433 --> 00:02:46,466
方法

82
00:02:46,466 --> 00:02:49,033
和屬性，此處的初始化器

83
00:02:49,033 --> 00:02:50,000
簡單到這裡

84
00:02:50,000 --> 00:02:52,133
那麼，我們如何使這變成 Singleton 呢？

85
00:02:52,133 --> 00:02:54,233
這裡的關鍵點是

86
00:02:54,233 --> 00:02:57,033
這個類別需要有一個單點

87
00:02:57,033 --> 00:02:57,900
存取

88
00:02:57,900 --> 00:02:59,733
對吧，所以 Singleton 的整個要點

89
00:02:59,733 --> 00:03:01,566
就是只有

90
00:03:01,566 --> 00:03:03,200
這個類別的一個實例，對吧，為了

91
00:03:03,200 --> 00:03:05,200
保證那個，我不應該能夠

92
00:03:05,200 --> 00:03:06,400
創建

93
00:03:06,400 --> 00:03:09,500
像這樣的ApiClient，所以首先，

94
00:03:09,500 --> 00:03:12,233
我們可以防止人們創建 

95
00:03:12,233 --> 00:03:13,266
ApiClient 通過

96
00:03:13,266 --> 00:03:14,933
使初始化器私有，這是

97
00:03:14,933 --> 00:03:16,300
正確的，現在

98
00:03:16,300 --> 00:03:18,633
該類型應該給你提供一個

99
00:03:18,633 --> 00:03:19,333
對吧

100
00:03:19,333 --> 00:03:21,200
如果按照書本來，

101
00:03:21,200 --> 00:03:23,900
我們會得到一個私有的

102
00:03:23,900 --> 00:03:28,700
靜態實例，那就是ApiClient

103
00:03:28,700 --> 00:03:32,000
然後我們會有一個靜態函數

104
00:03:32,000 --> 00:03:35,033
getInstance，它回傳

105
00:03:35,033 --> 00:03:36,466
一個ApiClient

106
00:03:36,466 --> 00:03:38,233
就是這樣，你在這裡返回

107
00:03:38,233 --> 00:03:40,300
實例

108
00:03:40,300 --> 00:03:42,766
好的，所以現在從外部世界看

109
00:03:42,766 --> 00:03:43,900
我們可以說

110
00:03:43,900 --> 00:03:47,100
getInstance 但在 Swift 中

111
00:03:47,100 --> 00:03:48,933
我們可以做的就是這個

112
00:03:48,933 --> 00:03:51,200
把它變成一個靜態的let

113
00:03:51,200 --> 00:03:54,133
實例，因為我們不能改變它，類型系統已經

114
00:03:54,133 --> 00:03:55,566
為我們強制執行了這點，所以這裡更

115
00:03:55,566 --> 00:03:57,666
為簡單。我們只需要說

116
00:03:57,666 --> 00:03:59,566
實例，然後砰的一聲，我們就可以訪問到

117
00:03:59,566 --> 00:04:02,466
共享的實例，我們保證在每次

118
00:04:02,466 --> 00:04:04,233
應用程式運行時，只有一個實例。就是這樣，這就是一個

119
00:04:04,233 --> 00:04:07,333
Singleton

120
00:04:07,333 --> 00:04:09,900
就是這樣，所以，如果我將

121
00:04:09,900 --> 00:04:10,533
這個類別設置為final的話會怎麼樣呢？

122
00:04:10,533 --> 00:04:12,866
對，書本上說你不應該這麼做

123
00:04:12,866 --> 00:04:14,700
因為 Singleton 可能會被擴展在

124
00:04:14,700 --> 00:04:18,000
未來

125
00:04:18,000 --> 00:04:18,766
由於模式說我們應該

126
00:04:18,766 --> 00:04:22,000
允許擴展，例如通過添加更多

127
00:04:22,000 --> 00:04:23,266
的方法到 ApiClient

128
00:04:23,266 --> 00:04:25,100
我們可以創建一個子類

129
00:04:25,100 --> 00:04:27,100
允許擴展，例如添加更多

130
00:04:27,100 --> 00:04:29,500
的方法到 ApiClient

131
00:04:29,500 --> 00:04:30,466
我們可以創建一個子類


132
00:04:30,466 --> 00:04:33,733
對，對，所以我們可以有一個類別

133
00:04:33,733 --> 00:04:36,933
MyApiClient 從

134
00:04:36,933 --> 00:04:39,266
ApiClient 繼承，然後我們可以增加更多

135
00:04:39,266 --> 00:04:40,066
方法

136
00:04:40,066 --> 00:04:42,466
對它，是的，或者我們甚至可以覆寫一些

137
00:04:42,466 --> 00:04:43,166
行為

138
00:04:43,166 --> 00:04:45,100
對，你可以覆寫，但是你可以

139
00:04:45,100 --> 00:04:47,433
提出一種情況，我們在 Swift 中可以使用

140
00:04:47,433 --> 00:04:48,866
extensions

141
00:04:48,866 --> 00:04:50,800
不用使用子類別，所以我們不能

142
00:04:50,800 --> 00:04:52,533
覆寫行為，但我們仍然可以增加

143
00:04:52,533 --> 00:04:53,500
更多行為

144
00:04:53,500 --> 00:04:55,166
所以這裡有一個折衷，如果你希望

145
00:04:55,166 --> 00:04:57,266
讓人們能改變你的

146
00:04:57,266 --> 00:04:57,733
類別的行為

147
00:04:57,733 --> 00:05:00,800
你可以允許子類別化，不然就

148
00:05:00,800 --> 00:05:04,000
直接用 extensions，對，這看起來

149
00:05:04,000 --> 00:05:04,533
很好

150
00:05:04,533 --> 00:05:06,800
這就是你要實現一個

151
00:05:06,800 --> 00:05:09,033
Singleton，你只有一個實例

152
00:05:09,033 --> 00:05:12,066
但 URLSession.shared

153
00:05:12,066 --> 00:05:14,233
它說這個方法提供了一個

154
00:05:14,233 --> 00:05:15,433
共享的singleton

155
00:05:15,433 --> 00:05:17,433
session對象，對，奇怪的是

156
00:05:17,433 --> 00:05:19,833
我仍然可以創建

157
00:05:19,833 --> 00:05:23,033
我自己的 URLSession，是的，有不同的

158
00:05:23,033 --> 00:05:25,100
配置也可以，這只是一個

159
00:05:25,100 --> 00:05:26,400
便利機能

160
00:05:26,400 --> 00:05:28,300
但當然，這打破了整個

161
00:05:28,300 --> 00:05:30,133
承諾，即那個

162
00:05:30,133 --> 00:05:33,500
四人幫在他們的書中提到的

163
00:05:33,500 --> 00:05:36,466
這就是以大寫"S"開頭的Singleton

164
00:05:36,466 --> 00:05:37,166
那個

165
00:05:37,166 --> 00:05:40,066
按照書中的實現，你會有

166
00:05:40,066 --> 00:05:41,900
一個小寫的singleton

167
00:05:41,900 --> 00:05:44,700
這就像一種方便，是吧

168
00:05:44,700 --> 00:05:46,466
在這種情況下，你有共享的

169
00:05:46,466 --> 00:05:48,400
類型，它只有一個獲取器，你不能

170
00:05:48,400 --> 00:05:50,466
設置共享指向另一個

171
00:05:50,466 --> 00:05:51,033
實例

172
00:05:51,033 --> 00:05:52,866
這意味著你仍然擁有這樣的

173
00:05:52,866 --> 00:05:54,933
每次應用程序運行的唯一實例

174
00:05:54,933 --> 00:05:56,533
但你如果想的話，仍然可以創建你自己的

175
00:05:56,533 --> 00:05:58,233
想要的，對，確實如此

176
00:05:58,233 --> 00:05:59,333
所以，這是來自於

177
00:05:59,333 --> 00:06:01,600
用大寫"S"的singleton和

178
00:06:01,600 --> 00:06:04,300
小寫"s"的區別，然後人們開始問

179
00:06:04,300 --> 00:06:07,266
好吧，我如何測試使用

180
00:06:07,266 --> 00:06:09,600
例如singleton的程式碼呢？它

181
00:06:09,600 --> 00:06:10,400
取決於

182
00:06:10,400 --> 00:06:11,733
因為並不是說有了

183
00:06:11,733 --> 00:06:13,666
singleton就不能有

184
00:06:13,666 --> 00:06:14,933
可測試的代碼

185
00:06:14,933 --> 00:06:17,333
那我們來用

186
00:06:17,333 --> 00:06:18,133
比如說

187
00:06:18,133 --> 00:06:21,666
一個ViewController，像是

188
00:06:21,666 --> 00:06:24,933
LoginViewController，並且你有一個方法

189
00:06:24,933 --> 00:06:28,866
didTapLoginButton

190
00:06:28,866 --> 00:06:30,700
然後在這裡你想要使用ApiClient

191
00:06:30,700 --> 00:06:32,800
好的，登入到一個服務

192
00:06:32,800 --> 00:06:36,533
比如說，是Singleton ApiClient

193
00:06:36,533 --> 00:06:39,900
.instance .login

194
00:06:39,900 --> 00:06:43,600
對，然後你傳遞一個登入請求

195
00:06:43,600 --> 00:06:47,166
並且你回傳一個用戶，比如說

196
00:06:47,166 --> 00:06:50,066
對，然後你在之後進行一些操作

197
00:06:50,066 --> 00:06:51,033
你登入以後

198
00:06:51,033 --> 00:06:54,533
比如現在顯示下一個畫面

199
00:06:54,533 --> 00:06:56,633
這將會很難測試首先

200
00:06:56,633 --> 00:06:57,900
我們需要有一個

201
00:06:57,900 --> 00:07:00,833
函數登入，它會得到一個閉包，例子演示

202
00:07:00,833 --> 00:07:02,400
LoggedInUser

203
00:07:02,400 --> 00:07:05,566
讓我們在這裡定義

204
00:07:05,566 --> 00:07:08,700
我們的LoggedInUser

205
00:07:08,700 --> 00:07:13,733
我們的LoggedInUser

206
00:07:13,733 --> 00:07:15,166
如果你現在想要測試LoginViewController

207
00:07:15,166 --> 00:07:16,800
能否適當地運行，但你

208
00:07:16,800 --> 00:07:18,533
不想發起API請求

209
00:07:18,533 --> 00:07:21,100
對，您怎麼能覆蓋這段呼叫

210
00:07:21,100 --> 00:07:22,233
這裡，您怎麼能

211
00:07:22,233 --> 00:07:26,300
將ApiClient替換為模擬的版本

212
00:07:26,300 --> 00:07:27,833
誠實地說，個人來說，我不知道

213
00:07:27,833 --> 00:07:30,066
在Swift中如何實現，可能在

214
00:07:30,066 --> 00:07:32,233
Objective-C你可以將

215
00:07:32,233 --> 00:07:34,866
getter替換為一個模擬，但在

216
00:07:34,866 --> 00:07:35,666
這種情況下

217
00:07:35,666 --> 00:07:38,400
由於你無法繼承ApiClient且

218
00:07:38,400 --> 00:07:39,666
這是一個let

219
00:07:39,666 --> 00:07:43,166
您無法在Swift中這麼做，對

220
00:07:43,166 --> 00:07:46,000
這聽起來很準確，但我們有其他的

221
00:07:46,000 --> 00:07:47,100
選擇可以做

222
00:07:47,100 --> 00:07:49,033
所以我希望至少能夠

223
00:07:49,033 --> 00:07:50,133
繼承它

224
00:07:50,133 --> 00:07:53,833
因為現在我可以擁有一個api

225
00:07:53,833 --> 00:07:55,666
在這裡，我看見你正在做什麼

226
00:07:55,666 --> 00:07:57,166
你要進行屬性注入

227
00:07:57,166 --> 00:07:58,066
基本上來說

228
00:07:58,066 --> 00:08:01,266
是的，例如ApiClient.instance

229
00:08:01,266 --> 00:08:04,300
我並不直接存取這個

230
00:08:04,300 --> 00:08:04,933
直接

231
00:08:04,933 --> 00:08:07,666
這意味著在我的測試中，我可以注入

232
00:08:07,666 --> 00:08:08,800
這個用一個

233
00:08:08,800 --> 00:08:12,700
MockApiClient

234
00:08:12,700 --> 00:08:15,733
舉例來說

235
00:08:15,733 --> 00:08:18,466
它會重新定義這個登入並進行某些操作


236
00:08:18,466 --> 00:08:19,166
其他

237
00:08:19,166 --> 00:08:21,900
對，你現在可以攔截

238
00:08:21,900 --> 00:08:23,566
對這個登錄的要求

239
00:08:23,566 --> 00:08:26,066
功能和你可以測試它是什麼

240
00:08:26,066 --> 00:08:27,433
你需要在你的

241
00:08:27,433 --> 00:08:30,233
單元測試中測試的東西。好吧，然後還有

242
00:08:30,233 --> 00:08:32,133
我看到人們在做的另一件事

243
00:08:32,133 --> 00:08:34,133
也沒有錯，但同樣的，

244
00:08:34,133 --> 00:08:35,666
它打破了模式

245
00:08:35,666 --> 00:08:38,866
就是讓這個東西可以設定

246
00:08:38,866 --> 00:08:40,933
所以現在我可以在我的測試中

247
00:08:40,933 --> 00:08:42,300
在這個情況下

248
00:08:42,300 --> 00:08:45,900
注入這個實例變為一個

249
00:08:45,900 --> 00:08:47,500
MockApiClient

250
00:08:47,500 --> 00:08:50,533
然後我甚至不再需要這個東西

251
00:08:50,533 --> 00:08:53,733
我可以就回到原來的樣子對吧

252
00:08:53,733 --> 00:08:55,500
所以現在你引入了全局狀態

253
00:08:55,500 --> 00:08:58,633
對於測試目標來說。是的，可能的話

254
00:08:58,633 --> 00:09:00,133
我需要在設定中

255
00:09:00,133 --> 00:09:02,866
設定模擬客戶端，在撤銷中

256
00:09:02,866 --> 00:09:04,933
我需要記得替換它

257
00:09:04,933 --> 00:09:05,333
恢復

258
00:09:05,333 --> 00:09:06,800
對，這就不再是單例了

259
00:09:06,800 --> 00:09:08,633
這是另一種情況，因為它不是

260
00:09:08,633 --> 00:09:09,900
一個以大寫"S"開頭的詞

261
00:09:09,900 --> 00:09:12,133
也不是一個以小寫"s"開頭的詞

262
00:09:12,133 --> 00:09:13,266
這就只是

263
00:09:13,266 --> 00:09:17,200
全局可變狀態 mutable global state

264
00:09:17,200 --> 00:09:19,433
可變的全局狀態，對，這就是黑魔法

265
00:09:19,433 --> 00:09:20,933
就是這樣

266
00:09:20,933 --> 00:09:23,033
但人們依然稱它為單例模式singleton

267
00:09:23,033 --> 00:09:24,633
由於它的語義看起來像一個

268
00:09:24,633 --> 00:09:26,300
單例模式，它擁有一個靜態的

269
00:09:26,300 --> 00:09:28,800
實例，對，我認為這非常

270
00:09:28,800 --> 00:09:30,300
重要，你剛提到的這一點，

271
00:09:30,300 --> 00:09:31,200
語意學

272
00:09:31,200 --> 00:09:33,733
我覺得如果開發者看到

273
00:09:33,733 --> 00:09:35,433
單詞實例或sharedInstance

274
00:09:35,433 --> 00:09:36,233
或者

275
00:09:36,233 --> 00:09:39,666
.shared這樣的詞，他們

276
00:09:39,666 --> 00:09:42,000
往往會認為這是單例模式

277
00:09:42,000 --> 00:09:43,200
但那裡沒有

278
00:09:43,200 --> 00:09:44,133
區分之

279
00:09:44,133 --> 00:09:46,800
單例模式和可變全局狀態

280
00:09:46,800 --> 00:09:47,500
狀態之間

281
00:09:47,500 --> 00:09:49,433
嗯，在這種情況下，將其設為私有的

282
00:09:49,433 --> 00:09:51,033
意義何在？

283
00:09:51,033 --> 00:09:52,633
對，我認為這種想法更好

284
00:09:52,633 --> 00:09:54,866
因為現在它可以返回到let

285
00:09:54,866 --> 00:09:58,000
所以這是一個不可變的共享實例並且

286
00:09:58,000 --> 00:09:59,900
如果你想建立新的實例

287
00:09:59,900 --> 00:10:01,200
這個ApiClient

288
00:10:01,200 --> 00:10:04,700
好吧，你現在確實有初始化器

289
00:10:04,700 --> 00:10:06,933
至少這全局狀態現在是

290
00:10:06,933 --> 00:10:08,533
包含的，所以這就回到了

291
00:10:08,533 --> 00:10:11,266
小寫的"s"單例，一個實例只

292
00:10:11,266 --> 00:10:12,533
會創建一次

293
00:10:12,533 --> 00:10:14,133
它不能被替換，但你還可以

294
00:10:14,133 --> 00:10:16,233
創建你自己的並傳遞它

295
00:10:16,233 --> 00:10:17,900
對，確實如此，這就是區別

296
00:10:17,900 --> 00:10:19,900
從大寫Singleton到小寫singleton

297
00:10:19,900 --> 00:10:20,533
singleton

298
00:10:20,533 --> 00:10:24,133
和只是可變的全局共享狀態

299
00:10:24,133 --> 00:10:29,833
對，好吧，解決這裡的問題

300
00:10:29,833 --> 00:10:33,200
現在的情況只是共享但是

301
00:10:33,200 --> 00:10:35,200
在這種情況下，如果你想測試它，你

302
00:10:35,200 --> 00:10:38,933
將需要有一個屬性

303
00:10:38,933 --> 00:10:40,800
而現在我們可以使用屬性注入來

304
00:10:40,800 --> 00:10:42,633
在測試期間替換它，這樣你就不會

305
00:10:42,633 --> 00:10:44,366
執行API請求對吧

306
00:10:44,366 --> 00:10:47,733
舉例來說，我們假設這是一個

307
00:10:47,733 --> 00:10:50,366
類似Instagram的應用程式，當你

308
00:10:50,366 --> 00:10:52,933
登入後，你將會看到訊息流頁面

309
00:10:52,933 --> 00:10:54,633
讓我們來詳細解釋這個問題

310
00:10:54,633 --> 00:10:56,633
假設我們有一個

311
00:10:56,633 --> 00:10:58,300
FeedViewController 

312
00:10:58,300 --> 00:11:01,433
然後在 viewDidLoad 中，我們將會調用

313
00:11:01,433 --> 00:11:04,933
loadFeed, 沒錯吧

314
00:11:04,933 --> 00:11:06,533
而當你載入訊息流時，會希望能夠

315
00:11:06,533 --> 00:11:10,300
得到已載入的資料

316
00:11:10,300 --> 00:11:13,433
然後你會更新使用者介面

317
00:11:13,433 --> 00:11:16,633
所以，我們在這裡也需要

318
00:11:16,633 --> 00:11:17,733
擁有一個 API

319
00:11:17,733 --> 00:11:21,500
並在 ApiClient 中添加一個新方法

320
00:11:21,500 --> 00:11:26,866
在完成之前載入訊息流，對吧

321
00:11:26,866 --> 00:11:28,933
假設這是一個數組

322
00:11:28,933 --> 00:11:32,366
FeedItems

323
00:11:32,366 --> 00:11:35,900
所以我們需要定義我們的 FeedItem

324
00:11:35,900 --> 00:11:39,100
這裡。你看到問題了嗎

325
00:11:39,100 --> 00:11:41,200
我實現了一個新功能, FeedViewController

326
00:11:41,200 --> 00:11:44,366
並且我必須添加一個新方法


327
00:11:44,366 --> 00:11:46,233
轉向這個共享型態，然後這個

328
00:11:46,233 --> 00:11:48,133
問題是為什麼這是個問題，這個

329
00:11:48,133 --> 00:11:49,100
有什麼不對勁？

330
00:11:49,100 --> 00:11:51,266
那我們來看看這張圖表，

331
00:11:51,266 --> 00:11:52,933
假設你有ApiClient，然後

332
00:11:52,933 --> 00:11:53,900
你有Login，

333
00:11:53,900 --> 00:11:55,266
然後你有一個login function，然後

334
00:11:55,266 --> 00:11:56,533
你有Feed，然後你有一個

335
00:11:56,533 --> 00:11:57,333
loadFeed function，

336
00:11:57,333 --> 00:11:58,866
如果你有實現followers

337
00:11:58,866 --> 00:12:00,633
特性，你有一個loadFollowers

338
00:12:00,633 --> 00:12:01,100
function，

339
00:12:01,100 --> 00:12:03,733
但是Login並不關心feed

340
00:12:03,733 --> 00:12:04,800
或followers，

341
00:12:04,800 --> 00:12:06,066
而followers並不關心

342
00:12:06,066 --> 00:12:08,233
login 或feed，而feed並不關心

343
00:12:08,233 --> 00:12:08,800
關於

344
00:12:08,800 --> 00:12:11,600
login或followers，但由於這是

345
00:12:11,600 --> 00:12:12,633
共享的，我們有這些

346
00:12:12,633 --> 00:12:15,666
不同的模組共享這個中間的型態，

347
00:12:15,666 --> 00:12:16,300
中間的，

348
00:12:16,300 --> 00:12:19,433
這個具體型態ApiClient，每一次

349
00:12:19,433 --> 00:12:19,833
每次

350
00:12:19,833 --> 00:12:21,666
我需要在這裡添加新方法，我需要

351
00:12:21,666 --> 00:12:23,333
重新編譯，重新部署所有的其他模組

352
00:12:23,333 --> 00:12:24,700
模組，因為它們依賴於

353
00:12:24,700 --> 00:12:25,500
具體型別

354
00:12:25,500 --> 00:12:27,600
所以現在的情況是我們擁有

355
00:12:27,600 --> 00:12:29,100
源碼依賴性

356
00:12:29,100 --> 00:12:31,833
在這個ApiClient層，所以如果我想要

357
00:12:31,833 --> 00:12:32,933
重用 Login

358
00:12:32,933 --> 00:12:34,466
在一個不同的環境中，或者一個不同的

359
00:12:34,466 --> 00:12:36,700
應用程式，我該如何將 Login

360
00:12:36,700 --> 00:12:38,866
模組轉移到一個單獨的應用程式，而不帶走

361
00:12:38,866 --> 00:12:40,800
ApiClient？

362
00:12:40,800 --> 00:12:44,633
答案是你做不到，但是你可以

363
00:12:44,633 --> 00:12:47,666
如果你現在將ApiClient移至一個

364
00:12:47,666 --> 00:12:49,833
共享的模組，然後你將

365
00:12:49,833 --> 00:12:51,266
Login轉移並引用它

366
00:12:51,266 --> 00:12:52,700
對，但當你作出改變時，

367
00:12:52,700 --> 00:12:54,700
其他模組也可能出現問題

368
00:12:54,700 --> 00:12:56,633
對，如果我們新增一個模組用於

369
00:12:56,633 --> 00:12:58,300
例如上傳視頻，

370
00:12:58,300 --> 00:13:00,366
你需要在這裡新增一個新的方法 uploadVideo

371
00:13:00,366 --> 00:13:02,300
並且你會破壞所有其他

372
00:13:02,300 --> 00:13:03,333
模組，你需要去

373
00:13:03,333 --> 00:13:06,133
在這個框架中提升一個版本，現在

374
00:13:06,133 --> 00:13:06,933
所有人都需要


375
00:13:06,933 --> 00:13:09,033
需要更新參考資料，對吧，然後

376
00:13:09,033 --> 00:13:10,000
你開始遇到

377
00:13:10,000 --> 00:13:12,066
語義版本問題，對吧，但我們

378
00:13:12,066 --> 00:13:13,266 
可以解決這個問題，對。

379
00:13:13,266 --> 00:13:15,433
如果你關注模組化設計

380
00:13:15,433 --> 00:13:16,466
我們可以解決這個問題

381
00:13:16,466 --> 00:13:18,633
你可能應該考慮分割

382
00:13:18,633 --> 00:13:20,066
這些事物為

383
00:13:20,066 --> 00:13:22,800
更為負責任的套件，對，

384
00:13:22,800 --> 00:13:24,700
這個類別的需求就只是調用一個

385
00:13:24,700 --> 00:13:25,266
函數，

386
00:13:25,266 --> 00:13:27,900
對，但現在這個類別實際上需要

387
00:13:27,900 --> 00:13:28,466
去

388
00:13:28,466 --> 00:13:31,033
找到這個實例，知道

389
00:13:31,033 --> 00:13:32,066
它的實體類型，

390
00:13:32,066 --> 00:13:33,733
並調用一個函數，對，這裡有

391
00:13:33,733 --> 00:13:35,433
三個層次，而你只需要一個，這創建了這個implicit

392
00:13:35,433 --> 00:13:37,433
依賴此ApiClient的

393
00:13:37,433 --> 00:13:39,433
隱性依賴，

394
00:13:39,433 --> 00:13:42,466
對，這個共享的全局狀態

395
00:13:42,466 --> 00:13:43,900
在這裡非常方便，

396
00:13:43,900 --> 00:13:46,133
對，很容易創建和使用，但

397
00:13:46,133 --> 00:13:47,433
那會引入一些問題，

398
00:13:47,433 --> 00:13:49,433
所以我們在這裡做的是給出一個理由，

399
00:13:49,433 --> 00:13:51,333
如果你需要實現一些

400
00:13:51,333 --> 00:13:52,700
可重用性.

401
00:13:52,700 --> 00:13:53,833
您可能需要思考這些

402
00:13:53,833 --> 00:13:55,033
您需要理解的問題

403
00:13:55,033 --> 00:13:56,933
權衡的結果，所以當這種權衡咬住你

404
00:13:56,933 --> 00:13:57,266
您

405
00:13:57,266 --> 00:13:59,600
您知道該如何應對。絕對的，

406
00:13:59,600 --> 00:14:00,700
完全對

407
00:14:00,700 --> 00:14:02,866
所以解決這個問題的解決方法是，每

408
00:14:02,866 --> 00:14:04,300
次您新增一種方法，可能

409
00:14:04,300 --> 00:14:04,800
導致失敗

410
00:14:04,800 --> 00:14:07,033
其他模塊的方法其實非常

411
00:14:07,033 --> 00:14:09,100
簡單，我們現在可以做的是

412
00:14:09,100 --> 00:14:12,866
在 Swift 中使用擴展

413
00:14:12,866 --> 00:14:15,500
例如我們可以有一個通用方法

414
00:14:15,500 --> 00:14:16,000
executeRequest

415
00:14:16,000 --> 00:14:17,900
這可以執行任何類型的

416
00:14:17,900 --> 00:14:19,033
請求，然後

417
00:14:19,033 --> 00:14:21,100
每個模塊有自己的 ApiClient

418
00:14:21,100 --> 00:14:22,133
擴展與

419
00:14:22,133 --> 00:14:25,600
他們需要的任何方法，所以讓我們說

420
00:14:25,600 --> 00:14:27,433
我們現在正在將這些改為模塊，所以

421
00:14:27,433 --> 00:14:29,100
這是

422
00:14:29,100 --> 00:14:32,700
Api Module

423
00:14:32,700 --> 00:14:35,100
然後我們有 Login Module 作為

424
00:14:35,100 --> 00:14:36,066
例子

425
00:14:36,066 --> 00:14:39,100
我們還有 Feed Module

426
00:14:39,100 --> 00:14:41,166
而如果我們有一個像這樣的通用

427
00:14:41,166 --> 00:14:42,833
功能在這裡

428
00:14:42,833 --> 00:14:47,433
執行，然後它具有完成性


429
00:14:47,433 --> 00:14:49,266
假設它只是以數據完成

430
00:14:49,266 --> 00:14:51,333
現在我們還未處理錯誤

431
00:14:51,333 --> 00:14:54,366
對，所以這個 API 足夠用來執行

432
00:14:54,366 --> 00:14:54,933
任何

433
00:14:54,933 --> 00:14:57,166
例如 get 或 post 請求也許

434
00:14:57,166 --> 00:14:58,466
對於上傳可能不夠

435
00:14:58,466 --> 00:15:00,066
和下載，但我們還沒有這個

436
00:15:00,066 --> 00:15:02,000
需求，然後我們可以做

437
00:15:02,000 --> 00:15:03,033
的是移動

438
00:15:03,033 --> 00:15:05,833
將 login 函數移到 Login 模塊

439
00:15:05,833 --> 00:15:07,433
通過引入擴展功能

440
00:15:07,433 --> 00:15:10,466
在單獨的模塊中對 ApiClient

441
00:15:10,466 --> 00:15:12,000
實現登錄，我們甚至可以

442
00:15:12,000 --> 00:15:14,366
移動

443
00:15:14,366 --> 00:15:16,466
把 LoggedInUser 結構體移到這個

444
00:15:16,466 --> 00:15:18,300
模塊裡，是的，這很有道理

445
00:15:18,300 --> 00:15:19,666
我們也可以對

446
00:15:19,666 --> 00:15:22,700
Feed 模塊做同樣的事情，我們有一個擴展

447
00:15:22,700 --> 00:15:26,066
在 ApiClient 中就是 loadFeed

448
00:15:26,066 --> 00:15:26,933
和 loadFeed

449
00:15:26,933 --> 00:15:29,333
和登錄方法，我們將調用

450
00:15:29,333 --> 00:15:30,066
執行

451
00:15:30,066 --> 00:15:32,933
這個通用方法，然後我們可以移動

452
00:15:32,933 --> 00:15:33,266
這個

453
00:15:33,266 --> 00:15:36,300
FeedItem 到 Feed 模組

454
00:15:36,300 --> 00:15:38,466
也是，現在我們有了這個

455
00:15:38,466 --> 00:15:39,600
實現方式

456
00:15:39,600 --> 00:15:42,066
在此，我們為

457
00:15:42,066 --> 00:15:42,633
模塊特地客製化客戶端

458
00:15:42,633 --> 00:15:44,300
然後我們在

459
00:15:44,300 --> 00:15:46,300
中間有個泛型客戶端，它可以讓這個

460
00:15:46,300 --> 00:15:48,533
ApiClient 變得不必要，我們原本可以

461
00:15:48,533 --> 00:15:49,333
只使用

462
00:15:49,333 --> 00:15:51,666
純粹的 URLSessions 只需要建立

463
00:15:51,666 --> 00:15:53,333
URLSession 的擴展

464
00:15:53,333 --> 00:15:55,833
或者 AlamoFire 或者任何你使用的東西，並且

465
00:15:55,833 --> 00:15:57,033
看看我們是如何打破

466
00:15:57,033 --> 00:15:58,866
依賴性而不破壞

467
00:15:58,866 --> 00:16:01,033
實現方法的，我們只是重構了

468
00:16:01,033 --> 00:16:02,533
稍微改變了一些架構

469
00:16:02,533 --> 00:16:04,800
依賴圖

470
00:16:04,800 --> 00:16:06,700
但是看看 ApiClient 仍然

471
00:16:06,700 --> 00:16:08,133
在所有

472
00:16:08,133 --> 00:16:10,000
這些模塊中共享，所以如果在某個時刻

473
00:16:10,000 --> 00:16:11,333
你需要添加新的模塊，你想要

474
00:16:11,333 --> 00:16:12,700
上傳

475
00:16:12,700 --> 00:16:16,000
數據到API，你可能需要添加

476
00:16:16,000 --> 00:16:17,600
在此新增一種方法，並且你打破了

477
00:16:17,600 --> 00:16:19,266
客戶端也是，你並未完全地

478
00:16:19,266 --> 00:16:19,666
安全

479
00:16:19,666 --> 00:16:22,466
免於改變，但是它現在顯然更靈活

480
00:16:22,466 --> 00:16:23,166
了

481
00:16:23,166 --> 00:16:26,000
現在這是第一階段，如果你

482
00:16:26,000 --> 00:16:27,833
需要更多的靈活性

483
00:16:27,833 --> 00:16:29,500
使這更有可重用性，而不

484
00:16:29,500 --> 00:16:30,866
打破客戶端

485
00:16:30,866 --> 00:16:32,866
現在我們談論倒置

486
00:16:32,866 --> 00:16:34,233
依賴性

487
00:16:34,233 --> 00:16:36,300
如果模塊不是依賴

488
00:16:36,300 --> 00:16:37,333
具體的 

489
00:16:37,333 --> 00:16:40,633
ApiClient ，我們實際上讓

490
00:16:40,633 --> 00:16:43,033
具體的 ApiClient 依賴於模塊

491
00:16:43,033 --> 00:16:43,733
模塊

492
00:16:43,733 --> 00:16:46,800
對，這是第二階段

493
00:16:46,800 --> 00:16:48,000
這將賦予我們

494
00:16:48,000 --> 00:16:50,133
我們想要的所有自由

495
00:16:50,133 --> 00:16:51,033
沒錯

496
00:16:51,033 --> 00:16:54,233
我見過的大多數應用程式，99%

497
00:16:54,233 --> 00:16:55,733
我見過的應用程式都在此停止

498
00:16:55,733 --> 00:16:58,800
是的，最終

499
00:16:58,800 --> 00:17:02,000
當這變得太亂時，解決方案是

500
00:17:02,000 --> 00:17:02,300
要

501
00:17:02,300 --> 00:17:04,866
重寫應用程序，對，因為

502
00:17:04,866 --> 00:17:06,300
如果你不

503
00:17:06,300 --> 00:17:07,033
做的話，這就會發生

504
00:17:07,033 --> 00:17:09,833
主動了解您的

505
00:17:09,833 --> 00:17:11,333
架構正在向哪移動

506
00:17:11,333 --> 00:17:13,166
並且根據需求進行變更，你不需要

507
00:17:13,166 --> 00:17:15,266
從一個超級抽象

508
00:17:15,266 --> 00:17:17,733
實施開始，你可以一點一點地移動

509
00:17:17,733 --> 00:17:18,300
逐漸搬遷

510
00:17:18,300 --> 00:17:20,533
是的，但您需要採取行動，您需要

511
00:17:20,533 --> 00:17:22,633
主動並做出那些決定

512
00:17:22,633 --> 00:17:24,633
當你進行到某個點時你可能需要

513
00:17:24,633 --> 00:17:26,466
進行依賴反轉

514
00:17:26,466 --> 00:17:28,700
因為 ApiClient 只是一個細節

515
00:17:28,700 --> 00:17:30,466
對商業來說重要的是

516
00:17:30,466 --> 00:17:32,700
並非 ApiClient 的實作方式

517
00:17:32,700 --> 00:17:34,766
是的，與 API 的請求

518
00:17:34,766 --> 00:17:36,766
如果你跑去告訴你的老闆說我們問題出在請求上，

519
00:17:36,766 --> 00:17:38,133
他們可能並不在意

520
00:17:38,133 --> 00:17:38,766
正確，他們關心的是功能

521
00:17:38,766 --> 00:17:41,900
他們並不關心

522
00:17:41,900 --> 00:17:42,933
技術瑣碎和細節

523
00:17:42,933 --> 00:17:45,100
那就是為什麼

524
00:17:45,100 --> 00:17:46,066
我偏好將邏輯封裝在

525
00:17:46,066 --> 00:17:48,933
模組中

526
00:17:48,933 --> 00:17:49,900
細節依賴於功能

527
00:17:49,900 --> 00:17:52,300
在這種情況下，細節是 ApiClient

528
00:17:52,300 --> 00:17:54,133
為了達到這個目標，我們引入

529
00:17:54,133 --> 00:17:57,200
協議，閉包，或者任何類型的

530
00:17:57,200 --> 00:17:59,833
介面

531
00:17:59,833 --> 00:18:00,700
對模組來說，例如 Login

532
00:18:00,700 --> 00:18:02,466
它需要一個功能

533
00:18:02,466 --> 00:18:03,733
功能


534
00:18:03,733 --> 00:18:05,333
或者它需要一種實現的類型

535
00:18:05,333 --> 00:18:07,333
函數與 API 對話

536
00:18:07,333 --> 00:18:09,833
Feed 將需要一個函數來加載

537
00:18:09,833 --> 00:18:10,633
該 feed

538
00:18:10,633 --> 00:18:12,300
Followers 將需要一個函數來

539
00:18:12,300 --> 00:18:14,000
加載 followers，那就是他們所需的一切

540
00:18:14,000 --> 00:18:14,400
需要

541
00:18:14,400 --> 00:18:15,733
它不需要知道它從哪裡來

542
00:18:15,733 --> 00:18:17,600
所以當你有一個具體類型

543
00:18:17,600 --> 00:18:18,633
依賴性

544
00:18:18,633 --> 00:18:21,733
如我們在這裡所看到的時

545
00:18:21,733 --> 00:18:25,100
Login 模塊直接引用

546
00:18:25,100 --> 00:18:26,466
ApiClient

547
00:18:26,466 --> 00:18:28,866
我們依賴於 ApiClient，我們需要

548
00:18:28,866 --> 00:18:31,833
知道如何定位實例

549
00:18:31,833 --> 00:18:33,833
在共享指標中，然後我們需要

550
00:18:33,833 --> 00:18:35,833
調用我們想要的函數

551
00:18:35,833 --> 00:18:38,466
當我們所想要的只是一個函數，那為何

552
00:18:38,466 --> 00:18:39,200
我們不

553
00:18:39,200 --> 00:18:41,433
只依賴一個函數或一個

554
00:18:41,433 --> 00:18:43,333
實現該函數的協議呢

555
00:18:43,333 --> 00:18:45,100
對，所以現在有這個

556
00:18:45,100 --> 00:18:47,033
你之前提到的專業化

557
00:18:47,033 --> 00:18:49,733
所以作為一個 Login 模塊，我需要什麼作為

558
00:18:49,733 --> 00:18:51,600
把 Feed module 看做是 Followers module 需要什麼

559
00:18:51,600 --> 00:18:53,500
我需要什麼就去這樣看，我不在乎

560
00:18:53,500 --> 00:18:54,866
其他任何東西

561
00:18:54,866 --> 00:18:58,300
你可以去level四，對，然後level

562
00:18:58,300 --> 00:18:58,866
四就是

563
00:18:58,866 --> 00:19:00,466
你在中間有你的通用 ApiClient

564
00:19:00,466 --> 00:19:02,133
然後你有你的

565
00:19:02,133 --> 00:19:05,200
模塊，只給它們需要的東西，然後

566
00:19:05,200 --> 00:19:06,400
你實現

567
00:19:06,400 --> 00:19:09,666
適配器，這完全是模塊化的

568
00:19:09,666 --> 00:19:11,100
因為你可以在

569
00:19:11,100 --> 00:19:12,300
其他應用程式中使用這個 ApiClient，你可以在

570
00:19:12,300 --> 00:19:13,733
其他應用程式中使用 Login

571
00:19:13,733 --> 00:19:15,266
在其他情境中，你可以使用

572
00:19:15,266 --> 00:19:17,100
Followers module

573
00:19:17,100 --> 00:19:17,433
等等

574
00:19:17,433 --> 00:19:19,033
你可以將所有這些東西組合起來

575
00:19:19,033 --> 00:19:20,533
當你進行測試時，你

576
00:19:20,533 --> 00:19:21,900
與模擬結合

577
00:19:21,900 --> 00:19:24,866
或者你與stub結合，你與

578
00:19:24,866 --> 00:19:26,466
你需要的任何東西組合在一起

579
00:19:26,466 --> 00:19:29,600
你開啟了可能性，level四

580
00:19:29,600 --> 00:19:32,066
對，如我之前所提，由這種方式來

581
00:19:32,066 --> 00:19:33,100
獲得自由，這些level

582
00:19:33,100 --> 00:19:35,733
我們只是將它們提及為一種方式


583
00:19:35,733 --> 00:19:36,766
去記錄

584
00:19:36,766 --> 00:19:38,766
投影片數量，對吧？這不是一個東西，不

585
00:19:38,766 --> 00:19:40,000
這不是一個東西，這是一種

586
00:19:40,000 --> 00:19:40,866
抽象層級

587
00:19:40,866 --> 00:19:43,033
基於我們所擁有的投影片

588
00:19:43,033 --> 00:19:44,133
和

589
00:19:44,133 --> 00:19:46,533
程式碼庫越大越

590
00:19:46,533 --> 00:19:47,500
複雜

591
00:19:47,500 --> 00:19:49,433
需求就越複雜，我

592
00:19:49,433 --> 00:19:52,066
認為自由是一個極大的資產

593
00:19:52,066 --> 00:19:54,066
但另一方面，這並不

594
00:19:54,066 --> 00:19:55,600
容易達成

595
00:19:55,600 --> 00:19:57,666
你需要非常有紀律才能達到

596
00:19:57,666 --> 00:19:59,666
那個階段，如我們之前提到的

597
00:19:59,666 --> 00:20:02,533
如果你正在製作一個小應用程式，那麼

598
00:20:02,533 --> 00:20:03,900
你絕對不應該一開始就使用

599
00:20:03,900 --> 00:20:05,100
四級抽象

600
00:20:05,100 --> 00:20:07,500
我認同，雖然這不容易，但我認為

601
00:20:07,500 --> 00:20:08,933
這是簡單的，一切都很簡單

602
00:20:08,933 --> 00:20:11,200
你可以簡單地組成這些東西，你

603
00:20:11,200 --> 00:20:12,066
可以改變事物

604
00:20:12,066 --> 00:20:14,866
簡單地做測試，公平地說

605
00:20:14,866 --> 00:20:15,500
人們

606
00:20:15,500 --> 00:20:17,100
看著這張圖並且他們

607
00:20:17,100 --> 00:20:18,933
與我們一開始展示的那一個比較

608
00:20:18,933 --> 00:20:20,633
他們就會說這過度設計了

609
00:20:20,633 --> 00:20:22,066
看看有多少事情

610
00:20:22,066 --> 00:20:24,533
但圖表並沒有告訴真相

611
00:20:24,533 --> 00:20:25,666
確切地說，並未過度設計

612
00:20:25,666 --> 00:20:28,233
體系架構就在程式碼中，

613
00:20:28,233 --> 00:20:30,133
讓我們來看看實作此程式碼

614
00:20:30,133 --> 00:20:32,233
確實如此

615
00:20:32,233 --> 00:20:34,700
我們需要的只是一個登入函數和

616
00:20:34,700 --> 00:20:37,733
登入函數就是如此

617
00:20:37,733 --> 00:20:41,733
所以，我們在這裡只需要一個登入函數

618
00:20:41,733 --> 00:20:45,433
讓此處可回傳一個選用的響應

619
00:20:45,433 --> 00:20:46,233
讓它變為選用設定

620
00:20:46,233 --> 00:20:50,233
目前它需要被注入

621
00:20:50,233 --> 00:20:51,666
當然，這是一個你在裡面

622
00:20:51,666 --> 00:20:53,333
執行一個閉包回調的閉包

623
00:20:53,333 --> 00:20:58,533
現在你可以把ApiClient

624
00:20:58,533 --> 00:21:03,900
移到Main模組中

625
00:21:03,900 --> 00:21:07,200
太好了，現在是feed

626
00:21:07,200 --> 00:21:10,466
你需要的只是一個函數或協議

627
00:21:10,466 --> 00:21:12,933
具有該功能的協議

628
00:21:12,933 --> 00:21:15,033
所以我們有一個loadFeed函數在哪裡

629
00:21:15,033 --> 00:21:23,433
你可以傳一個閉包

630
00:21:23,433 --> 00:21:26,533
現在你將 loadFeed 移到

631
00:21:26,533 --> 00:21:28,133
Main module

632
00:21:28,133 --> 00:21:29,333
現在 Main module 只需要

633
00:21:29,333 --> 00:21:31,333
透過傳遞來組成函數

634
00:21:31,333 --> 00:21:33,833
將它傳遞給模塊，而不僅僅是這些

635
00:21:33,833 --> 00:21:34,533
函數

636
00:21:34,533 --> 00:21:36,533
Main module 可以組成任何

637
00:21:36,533 --> 00:21:38,466
函數，對，所以這是非常

638
00:21:38,466 --> 00:21:40,300
重要，這裡也是，因為我們只是

639
00:21:40,300 --> 00:21:41,200
將

640
00:21:41,200 --> 00:21:44,633
Api 和這些

641
00:21:44,633 --> 00:21:47,200
動作（例如登錄和 loadFeed）的遠程部分進行了抽象化

642
00:21:47,200 --> 00:21:48,066
然而

643
00:21:48,066 --> 00:21:49,500
這些只是這些

644
00:21:49,500 --> 00:21:51,500
函數的簽名，意味著你可以

645
00:21:51,500 --> 00:21:52,633
有一個遠程

646
00:21:52,633 --> 00:21:55,033
或者一個緩存版本，例如，對

647
00:21:55,033 --> 00:21:56,833
你可以自由地去做任何你想要的，很

648
00:21:56,833 --> 00:21:59,100
簡單，你有同樣的

649
00:21:59,100 --> 00:22:00,866
代碼量

650
00:22:00,866 --> 00:22:03,100
是的，絕對，所以可能你

651
00:22:03,100 --> 00:22:04,466
看著這個圖並感到

652
00:22:04,466 --> 00:22:05,266
被嚇到

653
00:22:05,266 --> 00:22:06,300
但這只是因為你不能

654
00:22:06,300 --> 00:22:08,300
將圖表

655
00:22:08,300 --> 00:22:11,666
模塊化概念轉換成代碼

656
00:22:11,666 --> 00:22:14,133
有時候它並不像我們想的那麼困難

657
00:22:14,133 --> 00:22:14,933
認為這是

658
00:22:14,933 --> 00:22:16,633
是的，絕對不是，只是需要一些

659
00:22:16,633 --> 00:22:19,033
時間來調整這些東西

660
00:22:19,033 --> 00:22:22,400
並讓它工作，在我看來很重要

661
00:22:22,400 --> 00:22:23,200
看法

662
00:22:23,200 --> 00:22:25,833
測試驅動這些東西並且工作

663
00:22:25,833 --> 00:22:26,400
與

664
00:22:26,400 --> 00:22:29,100
協議或閉包來進行依賴

665
00:22:29,100 --> 00:22:30,066
注入

666
00:22:30,066 --> 00:22:32,933
我認為這是一種很好的方式來變得

667
00:22:32,933 --> 00:22:35,266
更好的提高

668
00:22:35,266 --> 00:22:38,000
那麼現在你會如何測試這個，這有多簡單

669
00:22:38,000 --> 00:22:39,900
只是注入一個功能就可以了嗎

670
00:22:39,900 --> 00:22:40,766
並期待

671
00:22:40,766 --> 00:22:42,933
發生一些事情，對的，就是這樣。

672
00:22:42,933 --> 00:22:44,766
這有多簡單，對，並且不成為

673
00:22:44,766 --> 00:22:46,400
需要是一個ViewController

674
00:22:46,400 --> 00:22:50,766
當然，你可以使用一個ViewModel

675
00:22:50,766 --> 00:22:54,000
在這裡，是的，它可以是任何事情, 一個

676
00:22:54,000 --> 00:22:54,933
ViewModel

677
00:22:54,933 --> 00:22:57,900
然後你有一個加載功能

678
00:22:57,900 --> 00:22:58,933
是的

679
00:22:58,933 --> 00:23:02,866
它可以是一個服務，一個服務

680
00:23:02,866 --> 00:23:05,200
確實，它可以是其他的東西，它

681
00:23:05,200 --> 00:23:06,633
不需要是一個ViewController

682
00:23:06,633 --> 00:23:08,633
假設這是一個 Feed 模塊在某處

683
00:23:08,633 --> 00:23:10,233
你需要載入這個數據

684
00:23:10,233 --> 00:23:12,766
它需要與一個 API 對話，但這個 API

685
00:23:12,766 --> 00:23:14,533
在哪裡並不是你的關注點

686
00:23:14,533 --> 00:23:17,266
也無需擔心如何在記憶體中定位它，以及其具有什麼樣的

687
00:23:17,266 --> 00:23:19,033
實現方式和具體的

688
00:23:19,033 --> 00:23:19,833
類型

689
00:23:19,833 --> 00:23:22,300
我需要與之對話，然後從它實現的所有

690
00:23:22,300 --> 00:23:24,066
方法中，我應該調用哪一個

691
00:23:24,066 --> 00:23:24,533
我調用

692
00:23:24,533 --> 00:23:25,666
你不需要擔心這件事

693
00:23:25,666 --> 00:23:27,266
我認為關注這個詞在這裡

694
00:23:27,266 --> 00:23:28,700
非常重要

695
00:23:28,700 --> 00:23:30,866
你剛才提到的，因為就是我們

696
00:23:30,866 --> 00:23:32,466
在這裡做的事情，我們在進行關注點的分離

697
00:23:32,466 --> 00:23:34,000
基本上就是這樣

698
00:23:34,000 --> 00:23:37,200
並且像這個服務或者

699
00:23:37,200 --> 00:23:38,700
這個 ViewController 以前

700
00:23:38,700 --> 00:23:40,300
他們只關心自己，他們沒有嘗試把

701
00:23:40,300 --> 00:23:42,466
全部都包含進來，也沒有想要訪問到

702
00:23:42,466 --> 00:23:44,700
所有東西，這一點非常非常重要

703
00:23:44,700 --> 00:23:46,866
這裡所有的代碼都可以在不

704
00:23:46,866 --> 00:23:49,266
實際對話的情況下進行測試

705
00:23:49,266 --> 00:23:50,300
實際通信

706
00:23:50,300 --> 00:23:52,533
轉向一個真正的 API，你現在將要進行的方式

707
00:23:52,533 --> 00:23:54,466
去實現這個ApiClient

708
00:23:54,466 --> 00:23:56,533
如果你在這裡有這個分隔，我不

709
00:23:56,533 --> 00:23:58,300
在乎它可以是一個 Singleton

710
00:23:58,300 --> 00:24:01,100
它可以是全局狀態，它可以是一個大寫的

711
00:24:01,100 --> 00:24:03,433
"s" Singleton 或者小寫的 singleton

712
00:24:03,433 --> 00:24:05,333
它可能是 URLSession 或者是 AFNetwork

713
00:24:05,333 --> 00:24:06,700
我不在乎

714
00:24:06,700 --> 00:24:08,533
只要我的模塊被抽象出來

715
00:24:08,533 --> 00:24:10,000
從那裡，我就能

716
00:24:10,000 --> 00:24:12,300
很容易地更換它，我能夠輕鬆地

717
00:24:12,300 --> 00:24:14,000
將那些類型組合在一起

718
00:24:14,000 --> 00:24:16,300
我不在乎 ApiClient，我有

719
00:24:16,300 --> 00:24:18,766
我實現這個的偏好方法

720
00:24:18,766 --> 00:24:19,500
這

721
00:24:19,500 --> 00:24:21,733
但那只是個人喜好

722
00:24:21,733 --> 00:24:23,433
我建議人們去做的是

723
00:24:23,433 --> 00:24:25,900
去做一步兩步三步四步甚至

724
00:24:25,900 --> 00:24:27,033
五步，六步

725
00:24:27,033 --> 00:24:29,333
在需要的情況下，只需理解你如何

726
00:24:29,333 --> 00:24:31,433
從一步走到另一步

727
00:24:31,433 --> 00:24:33,033
理解單例的限制

728
00:24:33,033 --> 00:24:34,633
以大寫的 "s"

729
00:24:34,633 --> 00:24:37,200
以小寫的 "s" 並做出選擇

730
00:24:37,200 --> 00:24:38,466
針對您當前的問題

731
00:24:38,466 --> 00:24:40,300
您可以使 Singletons 可測試並

732
00:24:40,300 --> 00:24:42,000
您也可以使小寫的 singletons

733
00:24:42,000 --> 00:24:43,833
也可以通過屬性注入進行測試

734
00:24:43,833 --> 00:24:45,100
如果你允許

735
00:24:45,100 --> 00:24:47,500
子類別例如然後你可以

736
00:24:47,500 --> 00:24:50,000
僅將你的單例轉換為

737
00:24:50,000 --> 00:24:52,633
全局可變狀態並在

738
00:24:52,633 --> 00:24:53,100
測試中替換它

739
00:24:53,100 --> 00:24:55,266
這是另一種方法我不

740
00:24:55,266 --> 00:24:57,100
建議它，但有時它會有回報

741
00:24:57,100 --> 00:24:57,433
所以

742
00:24:57,433 --> 00:24:59,266
也許你從那裡開始但要知道

743
00:24:59,266 --> 00:25:00,533
可能會有問題和當問題

744
00:25:00,533 --> 00:25:01,600
發生時

745
00:25:01,600 --> 00:25:03,266
你知道下一步該去哪裡

746
00:25:03,266 --> 00:25:04,633
然後到下一步然後到

747
00:25:04,633 --> 00:25:05,433
下一步

748
00:25:05,433 --> 00:25:08,466
你的代碼應該是軟的，這是

749
00:25:08,466 --> 00:25:09,900
軟體的本質

750
00:25:09,900 --> 00:25:11,033
你應該能夠做到這些

751
00:25:11,033 --> 00:25:13,433
當你前進時做出決定，所以不要限制你的

752
00:25:13,433 --> 00:25:14,300
決定

753
00:25:14,300 --> 00:25:17,333
使用框架或設計模式來限制

754
00:25:17,333 --> 00:25:20,400
是的，實踐是最重要的事情，如果

755
00:25:20,400 --> 00:25:21,500
你希望像那樣的事情有效

756
00:25:21,500 --> 00:25:22,466
運行

757
00:25:22,466 --> 00:25:25,200
這是我們的建議，我建議你試試

758
00:25:25,200 --> 00:25:26,233
自己去做

759
00:25:26,233 --> 00:25:27,666
試著看看你現在的代碼

760
00:25:27,666 --> 00:25:29,266
並繪製一些圖表

761
00:25:29,266 --> 00:25:31,333
試著找到其中的瓶頸

762
00:25:31,333 --> 00:25:33,333
是的，你需要花一些時間

763
00:25:33,333 --> 00:25:35,100
測試這些東西，嘗試新

764
00:25:35,100 --> 00:25:37,500
的理念，認識到你在以前

765
00:25:37,500 --> 00:25:40,400
的項目中"做錯了"什麼

766
00:25:40,400 --> 00:25:41,333
並在某一點上

767
00:25:41,333 --> 00:25:43,500
你會恍然大悟

768
00:25:43,500 --> 00:25:45,433
很酷，別忘了查看置於

769
00:25:45,433 --> 00:25:46,466
下方的連結

770
00:25:46,466 --> 00:25:56,300
我們下次見，再見了，大家