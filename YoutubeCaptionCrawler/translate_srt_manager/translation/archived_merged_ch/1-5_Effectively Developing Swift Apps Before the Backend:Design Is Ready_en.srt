

1
00:00:01,266 --> 00:00:03,333
你好 Mike，嘿 Caio

2
00:00:03,333 --> 00:00:05,433
所以今天我們要繼續

3
00:00:05,433 --> 00:00:07,900
我們上次開始的 Feed Feature 案例研究

4
00:00:07,900 --> 00:00:08,700
時間

5
00:00:08,700 --> 00:00:12,133
確實如此，所以我創建了一個 GitHub 倉庫

6
00:00:12,133 --> 00:00:14,466
裡面有我們在

7
00:00:14,466 --> 00:00:17,600
上一集創建的所有 BDD 規範，用例

8
00:00:17,600 --> 00:00:20,800
流程圖和初始建議的

9
00:00:20,800 --> 00:00:22,533
架構

10
00:00:22,533 --> 00:00:24,633
但我們還缺少用戶

11
00:00:24,633 --> 00:00:26,233
介面設計

12
00:00:26,233 --> 00:00:29,566
還有一個後端，對吧我覺得我們可以

13
00:00:29,566 --> 00:00:30,000
管理

14
00:00:30,000 --> 00:00:32,466
沒有他們你可以開始你可以

15
00:00:32,466 --> 00:00:34,133
與其他團隊溝通

16
00:00:34,133 --> 00:00:36,300
服務器和客戶端之間的

17
00:00:36,300 --> 00:00:37,600
合同將會是什麼

18
00:00:37,600 --> 00:00:40,933
然後兩方團隊可以各自進行

19
00:00:40,933 --> 00:00:44,000
這功能都會有單元測試，如此

20
00:00:44,000 --> 00:00:45,433
從我們收集的需求中

21
00:00:45,433 --> 00:00:47,733
我們可以為 Feed Item 

22
00:00:47,733 --> 00:00:49,200
制定一個模型規範

23
00:00:49,200 --> 00:00:51,666
所以讓我們說通過與後台人員進行對話

24
00:00:51,666 --> 00:00:52,366
同事們

25
00:00:52,366 --> 00:00:54,133
你可以很快提出

26
00:00:54,133 --> 00:00:55,600
至少是一個規格

27
00:00:55,600 --> 00:00:57,600
當然這不是最終的，事情總是在變化，但是

28
00:00:57,600 --> 00:00:58,933
至少有些東西可以開始工作

29
00:00:58,933 --> 00:01:00,633
像你說的一種契約

30
00:01:00,633 --> 00:01:02,633
例如一個 Feed Item，你可以同意

31
00:01:02,633 --> 00:01:05,166
它具有

32
00:01:05,166 --> 00:01:06,000
一個標識符，比如說這是個UUID

33
00:01:06,000 --> 00:01:08,533
它也可能有一個描述

34
00:01:08,533 --> 00:01:10,133
在這種情況下，它是可選的，地點

35
00:01:10,133 --> 00:01:12,233
也是一個字符串

36
00:01:12,233 --> 00:01:13,266
也是可選的以及下載圖片的URL

37
00:01:13,266 --> 00:01:15,200
對嗎，這些規格通常來自於

38
00:01:15,200 --> 00:01:16,933
與設計師的討論

39
00:01:16,933 --> 00:01:18,633
因為他們可能已經有一些草圖

40
00:01:18,633 --> 00:01:20,400
他們知道他們必須顯示圖片，還需要顯示一些描述

41
00:01:20,400 --> 00:01:21,033
所以

42
00:01:21,033 --> 00:01:23,600
現在ID是技術細節

43
00:01:23,600 --> 00:01:24,700
後端開發人員和前端開發人員雙方承認是

44
00:01:24,700 --> 00:01:25,600
對，這是可以理解的,那我們就此結束了讨论.

51
00:01:38,633 --> 00:01:40,400
提出一個類似的負載合同

52
00:01:40,400 --> 00:01:42,866
就像這個我們要去執行一個

53
00:01:42,866 --> 00:01:45,033
對特定URL的GET請求

54
00:01:45,033 --> 00:01:47,833
要定義，我們期待得到一個200

55
00:01:47,833 --> 00:01:49,033
的回應 

56
00:01:49,033 --> 00:01:51,733
對，我們將Feed表示

57
00:01:51,733 --> 00:01:52,466
物品 

58
00:01:52,466 --> 00:01:55,666
為一個物件的陣列，例如 

59
00:01:55,666 --> 00:01:57,833
每個Feed項目將有一個id和一個

60
00:01:57,833 --> 00:01:59,333
必定有圖片 

61
00:01:59,333 --> 00:02:01,433
如在模型規範中定義，但

62
00:02:01,433 --> 00:02:02,700
描述和位置 

63
00:02:02,700 --> 00:02:05,266
是選擇性的，所以例如這種物件

64
00:02:05,266 --> 00:02:06,300
並無位置

65
00:02:06,300 --> 00:02:08,366
而這種物件並無描述

66
00:02:08,366 --> 00:02:10,633
而這種物件並無描述

67
00:02:10,633 --> 00:02:12,933
和位置，這意味著如果我們在一個

68
00:02:12,933 --> 00:02:13,733
遺失

69
00:02:13,733 --> 00:02:16,866
我們的物件中找不到鍵，我們可以完全忽視它

70
00:02:16,866 --> 00:02:19,033
對於描述和位置，但id和

71
00:02:19,033 --> 00:02:20,866
圖片應當總是在那裡

72
00:02:20,866 --> 00:02:23,900
圖片應該是一個有效的URL，而

73
00:02:23,900 --> 00:02:25,200
id應該是一個有效的

74
00:02:25,200 --> 00:02:28,400
UUID，好的，這個讓我感覺有道理讓我也

75
00:02:28,400 --> 00:02:29,333
在此指出

76
00:02:29,333 --> 00:02:32,300
這對於任何人來說都非常非常方便

77
00:02:32,300 --> 00:02:33,900
任何即將查看的人

78
00:02:33,900 --> 00:02:36,866
這份合約，就如我們上次提到的

79
00:02:36,866 --> 00:02:38,133
消除假設

80
00:02:38,133 --> 00:02:41,433
是成功製造出

81
00:02:41,433 --> 00:02:42,466
好的系統的關鍵部分

82
00:02:42,466 --> 00:02:45,033
我認為當開發者看到

83
00:02:45,033 --> 00:02:45,566
好吧, 位置是導選的

84
00:02:45,566 --> 00:02:47,266
描述也是導選的，他們現在看到

85
00:02:47,266 --> 00:02:49,100
這裡的這張圖片，你可以看到一個

86
00:02:49,100 --> 00:02:51,666
例子

87
00:02:51,666 --> 00:02:52,466
這裡是 API 回應的一個例子，我想他們應該

88
00:02:52,466 --> 00:02:55,333
可能會從這個例子

89
00:02:55,333 --> 00:02:55,833
得到更多幫助

90
00:02:55,833 --> 00:02:58,866
更深入的理解需求

91
00:02:58,866 --> 00:02:59,666
我喜歡這點

92
00:02:59,666 --> 00:03:02,300
我們基本上有一套有效的

93
00:03:02,300 --> 00:03:03,266
回應

94
00:03:03,266 --> 00:03:05,433
我們甚至可以在單元測試中使用它

95
00:03:05,433 --> 00:03:06,933
絕對的，這就是我喜歡

96
00:03:06,933 --> 00:03:09,100
在需求中參與的細節

97
00:03:09,100 --> 00:03:11,833
對的，這對所有人都有益，不只是

98
00:03:11,833 --> 00:03:13,200
開發者，知道像

99
00:03:13,200 --> 00:03:14,133
所有將會

100
00:03:14,133 --> 00:03:16,933
參與這個項目的人，我們都在這裡

101
00:03:16,933 --> 00:03:17,333
都在其中

102
00:03:17,333 --> 00:03:19,100
我們一起，你知道我們是同一個團隊

103
00:03:19,100 --> 00:03:21,100
因此在一天的結束時，

104
00:03:21,100 --> 00:03:24,466
我們也讓自己的生活更好，同意嗎

105
00:03:24,466 --> 00:03:27,733
很好，那就讓我們開始吧

106
00:03:27,733 --> 00:03:31,433
但我們應該從哪裡開始呢？

107
00:03:31,433 --> 00:03:33,500
我總是喜歡從我們擁有大部分

108
00:03:33,500 --> 00:03:35,733
資訊的系統部分開始

109
00:03:35,733 --> 00:03:38,633
對，那就會排除

110
00:03:38,633 --> 00:03:39,266
UI

111
00:03:39,266 --> 00:03:41,433
現在對，我們知道我們將

112
00:03:41,433 --> 00:03:42,700
在UI中呈現什麼

113
00:03:42,700 --> 00:03:44,833
我們可以提出一些

114
00:03:44,833 --> 00:03:46,233
原型

115
00:03:46,233 --> 00:03:48,700
這是一個選擇，但也許在 Remote

116
00:03:48,700 --> 00:03:50,000
FeedLoader我們有

117
00:03:50,000 --> 00:03:52,233
更多的信心，因為我們甚至有

118
00:03:52,233 --> 00:03:53,733
JSON payload合約

119
00:03:53,733 --> 00:03:55,266
對，我們擁有我們需要的一切

120
00:03:55,266 --> 00:03:56,866
除了URL，

121
00:03:56,866 --> 00:03:58,700
我們不需要建立這個系統，所以這就是 

122
00:03:58,700 --> 00:04:01,500
選擇一，而且我們希望將

123
00:04:01,500 --> 00:04:03,666
RemoteFeedLoader與使用者

124
00:04:03,666 --> 00:04:04,633
介面分開

125
00:04:04,633 --> 00:04:07,033
因此，UI模塊不會直接

126
00:04:07,033 --> 00:04:08,466
與RemoteFeedLoader溝通

127
00:04:08,466 --> 00:04:11,433
我們有一個介面或者是功能模塊

128
00:04:11,433 --> 00:04:12,066
在中間

129
00:04:12,066 --> 00:04:15,100
有介面和數據類型

130
00:04:15,100 --> 00:04:16,766
對，我們可以從這裡開始

131
00:04:16,766 --> 00:04:18,766
也對，所以你指的是Feed項目

132
00:04:18,766 --> 00:04:22,066
可以在這個模塊中，與協議一起

133
00:04:22,066 --> 00:04:24,533
或者用於加載feed的抽象

134
00:04:24,533 --> 00:04:25,833
也可以放在這裡

135
00:04:25,833 --> 00:04:27,833
對，Feed項目的表示

136
00:04:27,833 --> 00:04:29,500
模型

137
00:04:29,500 --> 00:04:32,866
將在此共享模塊中，對吧

138
00:04:32,866 --> 00:04:35,033
該模型可以從遠程

139
00:04:35,033 --> 00:04:37,033
表示或者來自於緩存的

140
00:04:37,033 --> 00:04:38,400
表示創建

141
00:04:38,400 --> 00:04:40,933
現在我們可以開發這個特性

142
00:04:40,933 --> 00:04:41,500
並行地

143
00:04:41,500 --> 00:04:43,266
我可以實現UI，你可以

144
00:04:43,266 --> 00:04:44,800
實現RemoteFeedLoader

145
00:04:44,800 --> 00:04:46,400
另一位開發者可以實現

146
00:04:46,400 --> 00:04:48,300
LocalFeedLoader

147
00:04:48,300 --> 00:04:50,533
並行地，最後我們只需要

148
00:04:50,533 --> 00:04:52,866
將所有實現一起組合

149
00:04:52,866 --> 00:04:55,733
對吧，所以我喜歡選項二

150
00:04:55,733 --> 00:04:56,800
Feed特性

151
00:04:56,800 --> 00:05:00,000
是所有的箭頭都指向它

152
00:05:00,000 --> 00:05:01,900
意味著它不依賴於任何事物

153
00:05:01,900 --> 00:05:04,466
我認為這是一個好的候選者

154
00:05:04,466 --> 00:05:07,666
來開始好吧並且在這

155
00:05:07,666 --> 00:05:08,300
系列的結尾

156
00:05:08,300 --> 00:05:10,466
我們可能會有五個不同的

157
00:05:10,466 --> 00:05:12,300
模組意味著五個不同的

158
00:05:12,300 --> 00:05:13,166
框架

159
00:05:13,166 --> 00:05:16,000
但我們首先從一個模組化的單體開始

160
00:05:16,000 --> 00:05:17,900
讓我們保持代碼模組化但是代碼

161
00:05:17,900 --> 00:05:18,300
能夠

162
00:05:18,300 --> 00:05:21,266
暫時都居住在同一個項目裡

163
00:05:21,266 --> 00:05:22,066
我同意這個見解

164
00:05:22,066 --> 00:05:25,166
我喜歡做的是創建一個macOS

165
00:05:25,166 --> 00:05:26,066
目標

166
00:05:26,066 --> 00:05:29,333


174
00:05:44,466 --> 00:05:46,633
確實，所以我們可以在macOS上運行

175
00:05:46,633 --> 00:05:48,866
目標並更快地運行我們的測試

176
00:05:48,866 --> 00:05:50,300
不需要模擬器

177
00:05:50,300 --> 00:05:53,100
對，我喜歡這個，好的，那有道理

178
00:05:53,100 --> 00:05:53,666
所以

179
00:05:53,666 --> 00:05:57,600
讓我們從macOS框架開始

180
00:05:57,600 --> 00:06:01,666
我們稱之為EssentialFeed，好的

181
00:06:01,666 --> 00:06:05,433
好的，清理專案，讓我們創建一個文件

182
00:06:05,433 --> 00:06:08,800
這是我們第一個FeedItem，好的，那麼我們的

183
00:06:08,800 --> 00:06:09,666
FeedItem

184
00:06:09,666 --> 00:06:15,500
有一個id

185
00:06:15,500 --> 00:06:18,866
那是個UUID對吧，它不是可選的

186
00:06:18,866 --> 00:06:22,633
描述，描述是一個

187
00:06:22,633 --> 00:06:23,900
可選的String

188
00:06:23,900 --> 00:06:28,000
是的，位置也是可選的

189
00:06:28,000 --> 00:06:30,000
還有imageURL，這是一個

190
00:06:30,000 --> 00:06:31,833
非可選的URL

191
00:06:31,833 --> 00:06:34,233
很好，現在這個FeedItem是

192
00:06:34,233 --> 00:06:35,333
內部的

193
00:06:35,333 --> 00:06:37,500
我們希望有多個模塊來創建

194
00:06:37,500 --> 00:06:38,400
這個FeedItem

195
00:06:38,400 --> 00:06:40,800
對吧，它可能是從遠程

196
00:06:40,800 --> 00:06:41,733
表示形式創建的

197
00:06:41,733 --> 00:06:43,166
或者它可能是從本地

198
00:06:43,166 --> 00:06:44,800
緩存表示形式創建的

199
00:06:44,800 --> 00:06:47,433
對，如果我們希望外部模塊能夠

200
00:06:47,433 --> 00:06:48,633
能夠創建

201
00:06:48,633 --> 00:06:51,433
FeedItems我們需要提供一個公開的

202
00:06:51,433 --> 00:06:52,633
initializer

203
00:06:52,633 --> 00:06:54,233
這是我們需要決定的事情嗎

204
00:06:54,233 --> 00:06:55,833
現在我們不需要馬上做

205
00:06:55,833 --> 00:06:56,233
現在

206
00:06:56,233 --> 00:06:58,800
我們為何不等到我們遇到

207
00:06:58,800 --> 00:07:00,000
編譯器錯誤

208
00:07:00,000 --> 00:07:03,266
好的，讓我們提交，好的所以我們有

209
00:07:03,266 --> 00:07:04,633
實際上有很多事情在這裏，讓我們

210
00:07:04,633 --> 00:07:06,466
先提交專案

211
00:07:06,466 --> 00:07:09,500
好的，創建EssentialFeed

212
00:07:09,500 --> 00:07:13,266
框架，現在我們讓提交到Feed裏

213
00:07:13,266 --> 00:07:14,700
項目

214
00:07:14,700 --> 00:07:18,866
創建FeedItem模型，好的

215
00:07:18,866 --> 00:07:22,400
美麗，所以我們有FeedItem和

216
00:07:22,400 --> 00:07:25,500
介面，對的，這將分隔

217
00:07:25,500 --> 00:07:28,133
模組對，邊界介面

218
00:07:28,133 --> 00:07:29,433
對

219
00:07:29,433 --> 00:07:32,400
我們稱之為FeedLoader，對，我們談了

220
00:07:32,400 --> 00:07:33,166
廣泛地

221
00:07:33,166 --> 00:07:36,400
關於閉包版本的

222
00:07:36,400 --> 00:07:39,166
或者它的協議版本，我認為我們

223
00:07:39,166 --> 00:07:42,133
可以走協議版本這裡

224
00:07:42,133 --> 00:07:45,833
好的，所以協議FeedLoader

225
00:07:45,833 --> 00:07:48,066
對，我們想要什麼樣的行為

226
00:07:48,066 --> 00:07:50,233
在此載入項目

227
00:07:50,233 --> 00:07:52,700
所以我們將傳遞完成塊

228
00:07:52,700 --> 00:07:53,733
對

229
00:07:53,733 --> 00:07:56,066
現在需要逃出來, 我們需要

230
00:07:56,066 --> 00:07:56,933
去思考

231
00:07:56,933 --> 00:07:59,566
返回的部分，因為我們之前只

232
00:07:59,566 --> 00:08:00,233
展示過

233
00:08:00,233 --> 00:08:02,466
正確的路徑，當它作用並且

234
00:08:02,466 --> 00:08:04,133
返回一個飼料項目陣列為

235
00:08:04,133 --> 00:08:04,933
例子

236
00:08:04,933 --> 00:08:07,733
對， 現在可能失敗，裝載飼料

237
00:08:07,733 --> 00:08:08,400
可能失敗

238
00:08:08,400 --> 00:08:11,433
對，確切地說，我們可以

239
00:08:11,433 --> 00:08:14,066
創建一個結果類型，我們知道那對於

240
00:08:14,066 --> 00:08:15,666
成功的

241
00:08:15,666 --> 00:08:19,033
情況， 我們想要傳遞飼料

242
00:08:19,033 --> 00:08:20,233
項目

243
00:08:20,233 --> 00:08:22,933
而現在的錯誤情況是有趣的

244
00:08:22,933 --> 00:08:24,400
許多事情可能會出錯

245
00:08:24,400 --> 00:08:27,100
是啊, 你如何表示那樣的情況? 好的,

246
00:08:27,100 --> 00:08:29,100
Swift的常規做法是使用

247
00:08:29,100 --> 00:08:31,733
錯誤協議，由此交給

248
00:08:31,733 --> 00:08:32,300
客戶端

249
00:08:32,300 --> 00:08:35,033
轉換成特定的錯誤類型

250
00:08:35,033 --> 00:08:35,566
對

251
00:08:35,566 --> 00:08:38,700
如果他們關心錯誤類型，所以

252
00:08:38,700 --> 00:08:41,100
我很樂意現在就這樣做，但是

253
00:08:41,100 --> 00:08:42,933
從 Feed 功能開始

254
00:08:42,933 --> 00:08:43,733
從這些

255
00:08:43,733 --> 00:08:47,333
抽象化開始，它可以承擔風險，因為

256
00:08:47,333 --> 00:08:49,833
例如，我們可以提供我們自己的

257
00:08:49,833 --> 00:08:51,100
錯誤類型在這裡

258
00:08:51,100 --> 00:08:53,433
也許我們可以提供一堆案例

259
00:08:53,433 --> 00:08:54,933
基於

260
00:08:54,933 --> 00:08:56,700
用戶案例和我們已經有的需求

261
00:08:56,700 --> 00:08:59,266
已經可以代表一些的

262
00:08:59,266 --> 00:09:02,633
不良情節，但我覺得這個項目太

263
00:09:02,633 --> 00:09:03,833
太早

264
00:09:03,833 --> 00:09:06,133
來這麼做，對吧？我們應該現在就

265
00:09:06,133 --> 00:09:07,666
採用協議，然後在未來更改

266
00:09:07,666 --> 00:09:08,700
我以為會

267
00:09:08,700 --> 00:09:11,733
對，我也這麼認為，所以，在呼叫它的時候

268
00:09:11,733 --> 00:09:14,066
Result可能不是一個好的名稱

269
00:09:14,066 --> 00:09:15,266
因為結果是

270
00:09:15,266 --> 00:09:19,200
什麼，對了，那我們為何不稱它為Load

271
00:09:19,200 --> 00:09:22,000
FeedResult對，這在這裡更具體

272
00:09:22,000 --> 00:09:22,300
如果

273
00:09:22,300 --> 00:09:25,033
在某一點，我們決定使用一個通用結果類型

274
00:09:25,033 --> 00:09:27,333
我們可以有一個類型別名

275
00:09:27,333 --> 00:09:30,466
對，我覺得這樣做是有意義的，所以


276
00:09:30,466 --> 00:09:32,633
這就是FeedLoader應該返回的

277
00:09:32,633 --> 00:09:34,866
一個LoadFeedResult它要麼是成功的

278
00:09:34,866 --> 00:09:36,700
帶有一個FeedItems的數組

279
00:09:36,700 --> 00:09:39,600
或者是一個錯誤，是的，太棒了，所以我想

280
00:09:39,600 --> 00:09:40,366
就是這樣

281
00:09:40,366 --> 00:09:43,100
這就是我們將要使用的初始界面

282
00:09:43,100 --> 00:09:44,466
我們要使用的

283
00:09:44,466 --> 00:09:48,066
我們只定義我們的數據類型和

284
00:09:48,066 --> 00:09:51,500
我們的協議邊界，所以我們不需要

285
00:09:51,500 --> 00:09:52,533
進行任何測試

286
00:09:52,533 --> 00:09:54,133
這裡沒有任何行為

287
00:09:54,133 --> 00:09:55,600
我們在這裡聲明的所有東西

288
00:09:55,600 --> 00:09:58,366
都將由編譯器檢查，是的，我們

289
00:09:58,366 --> 00:09:59,266
可以提交

290
00:09:59,266 --> 00:10:01,733
然後將這兩個文件打包在一個

291
00:10:01,733 --> 00:10:02,633
文件夾中

292
00:10:02,633 --> 00:10:05,900
太棒了，讓我們提交創建的

293
00:10:05,900 --> 00:10:08,933
FeedLoader協議

294
00:10:08,933 --> 00:10:12,300
邊界，是的，正如你說的，我們應該

295
00:10:12,300 --> 00:10:14,066
可能將這兩件事包裝在一起

296
00:10:14,066 --> 00:10:17,200
把它放到一個文件夾裡，我們稱之為Feed

297
00:10:17,200 --> 00:10:18,366
功能，是的

298
00:10:18,366 --> 00:10:22,700
好的，你可以總是稍後改變它

299
00:10:22,700 --> 00:10:25,733
群組Feed特性

300
00:10:25,733 --> 00:10:29,100
文件，是的，完美

301
00:10:29,100 --> 00:10:32,066
所以我認為我們現在就到這裡，下次

302
00:10:32,066 --> 00:10:33,333
我們可以

303
00:10:33,333 --> 00:10:36,133
開始進行 networking part

304
00:10:36,133 --> 00:10:36,800
聽起來不錯

305
00:10:36,800 --> 00:10:50,000
完美，我們下次見
