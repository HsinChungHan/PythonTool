

1
00:00:00,466 --> 00:00:04,133
你好 Mike，嘿 Caio，所以在這門課程中

2
00:00:04,133 --> 00:00:06,066
我們將完成這款應用程式的

3
00:00:06,066 --> 00:00:07,200
最後細節

4
00:00:07,200 --> 00:00:09,833
並將其推送到 App Store Connect

5
00:00:09,833 --> 00:00:10,400
好的

6
00:00:10,400 --> 00:00:13,100
讓我們開始吧 在發布這款

7
00:00:13,100 --> 00:00:14,000
應用程式之前

8
00:00:14,000 --> 00:00:15,100
我們首先需要處理的幾件事情

9
00:00:15,100 --> 00:00:17,333
首先，我們還沒有圖示

10
00:00:17,333 --> 00:00:20,533
如果你沒有圖示

11
00:00:20,533 --> 00:00:23,900
Apple 會拒絕你的 binary

12
00:00:23,900 --> 00:00:26,866
所以，讓我們先把圖示加到資源

13
00:00:26,866 --> 00:00:28,533
目錄中

14
00:00:28,533 --> 00:00:31,566
好的，我們執行一下

15
00:00:31,566 --> 00:00:34,933
現在你能看到我們有一個漂亮的

16
00:00:34,933 --> 00:00:39,600
圖示，好了，讓我們提交一下

17
00:00:39,600 --> 00:00:43,033
加入應用程式圖示

18
00:00:43,033 --> 00:00:45,033
接下來我不確定你是否有注意到，但是

19
00:00:45,033 --> 00:00:46,866
當我們運行應用程式時，

20
00:00:46,866 --> 00:00:48,466
會從一個空白的

21
00:00:48,466 --> 00:00:51,033
畫面過渡到嵌入於

22
00:00:51,033 --> 00:00:52,933
導航控制器中的餵送

23
00:00:52,933 --> 00:00:56,233
讓我們再運行一次，對的，這不是個

24
00:00:56,233 --> 00:00:57,433
問題

25
00:00:57,433 --> 00:01:00,933
但如果我們的啟動畫面與

26
00:01:00,933 --> 00:01:03,600
這個初始畫面的風格相符，它就會

27
00:01:03,600 --> 00:01:06,066
讓人覺得應用程式加載得更快

28
00:01:06,066 --> 00:01:08,866
這就是更好的用戶體驗，準確地說，

29
00:01:08,866 --> 00:01:10,766
我們可以更改啟動畫面，

30
00:01:10,766 --> 00:01:12,766
讓它與

31
00:01:12,766 --> 00:01:13,833
第一個畫面

32
00:01:13,833 --> 00:01:15,333
嵌入在

33
00:01:15,333 --> 00:01:17,033
navigation controller中的feed

34
00:01:17,033 --> 00:01:20,233
盡可能相似，所以

35
00:01:20,233 --> 00:01:23,833
我們也可以將啟動畫面嵌入

36
00:01:23,833 --> 00:01:26,633
navigation controller中，現在我們

37
00:01:26,633 --> 00:01:28,533
運行應用時，會看起來加載得更快

38
00:01:28,533 --> 00:01:29,333
因為啟動

39
00:01:29,333 --> 00:01:32,700
畫面與第一個視圖非常相似，

40
00:01:32,700 --> 00:01:34,633
這只是你可以做的一點小改動，

41
00:01:34,633 --> 00:01:35,833
讓你的應用程式看起來

42
00:01:35,833 --> 00:01:38,300
更好，更快，過渡更流暢，

43
00:01:38,300 --> 00:01:39,200
我十分喜歡這種方式，讓我們

44
00:01:39,200 --> 00:01:41,200
提交

45
00:01:41,200 --> 00:01:42,533
就是把啟動畫面

46
00:01:42,533 --> 00:01:45,666
嵌入到navigation controller中

47
00:01:45,666 --> 00:01:48,766
為了更流暢的

48
00:01:48,766 --> 00:01:50,133
初始應用過渡，

49
00:01:50,133 --> 00:01:53,600
提交，好的，夠了。

51
00:01:56,700 --> 00:01:58,466
但我還想做一件事

52
00:01:58,466 --> 00:02:00,366
就是要移除 Main

53
00:02:00,366 --> 00:02:01,200
storyboard

54
00:02:01,200 --> 00:02:04,300
因為我們預設並未使用它

55
00:02:04,300 --> 00:02:05,900
當你建立一個應用程式時

56
00:02:05,900 --> 00:02:08,800
你會得到這個 Main storyboard，但所有的

57
00:02:08,800 --> 00:02:10,133
configuration

58
00:02:10,133 --> 00:02:13,333
都在 code 中發生

59
00:02:13,333 --> 00:02:15,033
所以如果你不需要 Main storyboard

60
00:02:15,033 --> 00:02:16,700
最好就不要放在那裡

61
00:02:16,700 --> 00:02:19,900
沒錯，所以我們需要做幾件事

62
00:02:19,900 --> 00:02:22,400
來移除 storyboard

63
00:02:22,400 --> 00:02:24,933
對，僅僅刪掉檔案還不夠

64
00:02:24,933 --> 00:02:25,433
不足夠

65
00:02:25,433 --> 00:02:26,466
因為如果你現在試著執行

66
00:02:26,466 --> 00:02:29,333
應用程式就會出錯

67
00:02:29,333 --> 00:02:32,800
確實，因為這個 Main storyboard

68
00:02:32,800 --> 00:02:35,733
在應用程式加載的過程中被自動加載

69
00:02:35,733 --> 00:02:37,566
所以我們需要在這裡選擇 app

70
00:02:37,566 --> 00:02:40,400
project

71
00:02:40,400 --> 00:02:41,266
the app target，然後去 general 並且首先

72
00:02:41,266 --> 00:02:44,233
你需要移除

73
00:02:44,233 --> 00:02:45,500
主介面，Main 從

74
00:02:45,500 --> 00:02:48,466
應用程式目標

75
00:02:48,466 --> 00:02:49,566
中刪除

76
00:02:49,566 --> 00:02:52,866
配置，如果你正在使用的是

77
00:02:52,866 --> 00:02:54,800
新的 iOS 13

78
00:02:54,800 --> 00:02:57,566
SceneDelegate APIs，你也需要

79
00:02:57,566 --> 00:02:58,800
移除它

80
00:02:58,800 --> 00:03:01,733
從應用程式的 Info.plist 中的

81
00:03:01,733 --> 00:03:03,100
場景清單(Scene Manifest)

82
00:03:03,100 --> 00:03:05,666
場景配置(Scene Configuration)，應用程式會話(Application Session)

83
00:03:05,666 --> 00:03:07,200
角色(Role)

84
00:03:07,200 --> 00:03:10,233
故事版名稱(Storyboard Name)，只需將該行從

85
00:03:10,233 --> 00:03:11,500
配置中移除

86
00:03:11,500 --> 00:03:13,833
好的，這不應會讓

87
00:03:13,833 --> 00:03:14,633
應用程式當機

88
00:03:14,633 --> 00:03:16,300
因為它不會再試圖載入

89
00:03:16,300 --> 00:03:17,900
不存在的主故事版(Main storyboard)

90
00:03:17,900 --> 00:03:19,266
了

91
00:03:19,266 --> 00:03:20,933
但如你所見，應用程式

92
00:03:20,933 --> 00:03:22,300
已經無法再載入

93
00:03:22,300 --> 00:03:26,066
它沒有窗口，全部都是黑的

94
00:03:26,066 --> 00:03:27,566
那是因為當你從主

95
00:03:27,566 --> 00:03:29,033
故事版截開始載入的時候

96
00:03:29,033 --> 00:03:29,733
故事版

97
00:03:29,733 --> 00:03:32,000
會自動為你建立窗口

98
00:03:32,000 --> 00:03:33,266
自動的

99
00:03:33,266 --> 00:03:35,033
但如果你在程式碼中這麼做，你需要

100
00:03:35,033 --> 00:03:37,333
也在程式碼中建立你的窗口

101
00:03:37,333 --> 00:03:40,866
因此，當我們即將

102
00:03:40,866 --> 00:03:43,200
連接到一個會話

103
00:03:43,200 --> 00:03:46,066
我們需要用

104
00:03:46,066 --> 00:03:48,066
window scene

105
00:03:48,066 --> 00:03:51,200
來創建我們的視窗

106
00:03:51,200 --> 00:03:54,400
這裡好了，讓我們運行應用程式

107
00:03:54,400 --> 00:03:56,300
再次

108
00:03:56,300 --> 00:03:58,133
而它還是不能工作因為當

109
00:03:58,133 --> 00:03:59,566
你創建你自己的視窗時

110
00:03:59,566 --> 00:04:02,400
你還需要將它作為關鍵視窗

111
00:04:02,400 --> 00:04:04,400
並且你還需要讓它可見

112
00:04:04,400 --> 00:04:07,200
所以我們為何不測試這種行為呢

113
00:04:07,200 --> 00:04:08,000
因為

114
00:04:08,000 --> 00:04:09,833
如果它沒有正確的設置會

115
00:04:09,833 --> 00:04:12,133
損壞我們的應用程式

116
00:04:12,133 --> 00:04:16,300
沒錯，所以讓我們加入一個測試

117
00:04:16,300 --> 00:04:19,666
configure window 是我們即將

118
00:04:19,666 --> 00:04:21,100
調用的方法

119
00:04:21,100 --> 00:04:24,633
設置視窗為關鍵

120
00:04:24,633 --> 00:04:27,666
並且可見

121
00:04:27,666 --> 00:04:30,933
好的，所以讓我們在這裡創建我們的視窗

122
00:04:30,933 --> 00:04:34,000
創建系統測試下

123
00:04:34,000 --> 00:04:37,733
SceneDelegate 讓我們設定

124
00:04:37,733 --> 00:04:40,300
SceneDelegate 的視窗為我們的

125
00:04:40,300 --> 00:04:41,433
視窗

126
00:04:41,433 --> 00:04:44,533
然後我們調用 configure window 和我們

127
00:04:44,533 --> 00:04:45,900
預期

128
00:04:45,900 --> 00:04:52,933
視窗將會成為關鍵視窗


129
00:04:52,933 --> 00:04:56,233
並確保它

130
00:04:56,233 --> 00:04:59,033
不被隱藏，所以斷言 false window 是

131
00:04:59,033 --> 00:04:59,900
隱藏的

132
00:04:59,900 --> 00:05:04,933
所以期待 window 是可見的

133
00:05:04,933 --> 00:05:08,400
好，讓我們來運行這個測試

134
00:05:08,400 --> 00:05:12,400
兩個都應該失敗，好

135
00:05:12,400 --> 00:05:15,033
所以當我們設置 SceneDelegate 

136
00:05:15,033 --> 00:05:17,500
window時，我們還需要使其

137
00:05:17,500 --> 00:05:21,100
首先，使其成為主窗口，讓我們運行測試

138
00:05:21,100 --> 00:05:23,333
再次

139
00:05:23,333 --> 00:05:25,833
好的，第一個斷言通過了，它現在是

140
00:05:25,833 --> 00:05:26,700
主窗口

141
00:05:26,700 --> 00:05:29,033
但是第二個斷言，它是

142
00:05:29,033 --> 00:05:31,666
可見的並未通過，所以

143
00:05:31,666 --> 00:05:35,033
使其成為主並可見的視窗 makeKeyAndVisible 

144
00:05:35,033 --> 00:05:38,466
讓我們再次運行這個測試

145
00:05:38,466 --> 00:05:41,833
驗證通過，太好了，讓我們運行

146
00:05:41,833 --> 00:05:44,133
應用程式再次

147
00:05:44,133 --> 00:05:46,133
現在一切都正常，我們有

148
00:05:46,133 --> 00:05:48,233
測試保證 window 的設置

149
00:05:48,233 --> 00:05:49,100
配置正確

150
00:05:49,100 --> 00:05:52,700
沒有 Main storyboard 情況下正確

151
00:05:52,700 --> 00:05:56,300
太好了，讓我們提交

152
00:05:56,300 --> 00:06:00,700
移除不必要的 Main storyboard

153
00:06:00,700 --> 00:06:05,433
初始化設定在代碼中完成

154
00:06:05,433 --> 00:06:06,400
因為我們不需要 Main


155
00:06:06,400 --> 00:06:08,066
故事板，但如果你需要它，就毫無

156
00:06:08,066 --> 00:06:08,633
問題

157
00:06:08,633 --> 00:06:12,000
就讓它留在那裡，好嗎

158
00:06:12,000 --> 00:06:14,533
我在這裡注意到的另一件事是

159
00:06:14,533 --> 00:06:15,333
第二次

160
00:06:15,333 --> 00:06:18,133
測試名稱提到它正在測試

161
00:06:18,133 --> 00:06:20,233
場景將連接到 session method

162
00:06:20,233 --> 00:06:21,433
但我們實際上正在測試

163
00:06:21,433 --> 00:06:24,233
configure window，所以我們可以重新命名它

164
00:06:24,233 --> 00:06:27,433
改為 configure window 以更準確

165
00:06:27,433 --> 00:06:29,433
是的，每次你在一個

166
00:06:29,433 --> 00:06:31,100
測試和測試名

167
00:06:31,100 --> 00:06:33,033
需要改進它，就像你的

168
00:06:33,033 --> 00:06:34,533
代碼一樣準確

169
00:06:34,533 --> 00:06:36,866
測試也是代碼，你需要保持

170
00:06:36,866 --> 00:06:37,833
改進它

171
00:06:37,833 --> 00:06:40,533
改善名稱，重構就像

172
00:06:40,533 --> 00:06:43,033
你在生產代碼時一樣

173
00:06:43,033 --> 00:06:47,433
所以改進一個測試名稱

174
00:06:47,433 --> 00:06:50,000
現在我們準備好部署這個

175
00:06:50,000 --> 00:06:50,800
應用程式

176
00:06:50,800 --> 00:06:54,000
到 App Store Connect，然後我們可以

177
00:06:54,000 --> 00:06:54,933
選擇

178
00:06:54,933 --> 00:06:57,266
將其發送到 App Store 或發送到 Test

179
00:06:57,266 --> 00:06:58,800
Flight testers

180
00:06:58,800 --> 00:07:00,933
它可以是客戶、利益相關者

181
00:07:00,933 --> 00:07:02,633
朋友，家人

182
00:07:02,633 --> 00:07:05,900
你想要的任何人，很棒，那麼

183
00:07:05,900 --> 00:07:08,000
讓我們轉到 App Store Connect

184
00:07:08,000 --> 00:07:09,566
網站

185
00:07:09,566 --> 00:07:13,566
讓我們創建一個新的應用程式

186
00:07:13,566 --> 00:07:16,066
在我們的案例中，它是一個 iOS 應用程式，所以讓我們

187
00:07:16,066 --> 00:07:18,633
只選擇 iOS 平台

188
00:07:18,633 --> 00:07:22,000
讓我們給它一個名字 Essential

189
00:07:22,000 --> 00:07:25,166
App, 語言

190
00:07:25,166 --> 00:07:29,266
英語，讓我們選擇 bundle ID

191
00:07:29,266 --> 00:07:31,433
在我們的案例中，它是由 Xcode 產生的

192
00:07:31,433 --> 00:07:33,566
這就是為什麼它有 xc

193
00:07:33,566 --> 00:07:36,933
前綴，但如果你想要，你可以創建

194
00:07:36,933 --> 00:07:38,066
你自己的 bundle ID

195
00:07:38,066 --> 00:07:40,533
它只需要是獨一無二的並且需要

196
00:07:40,533 --> 00:07:42,000
符合在 Xcode 中設置的 bundle ID

197
00:07:42,000 --> 00:07:45,333
所以對於我們來說

198
00:07:45,333 --> 00:07:48,133
它是 EssentialAppCaseStudy 的 bundle

199
00:07:48,133 --> 00:07:49,433
ID

200
00:07:49,433 --> 00:07:51,733
然後你可以設定一個 SKU，不管什麼

201
00:07:51,733 --> 00:07:53,566
對你的應用程式有意義

202
00:07:53,566 --> 00:07:57,166
對我們來說就是 EssentialAppCaseStudy

203
00:07:57,166 --> 00:07:58,933
並選擇一個適合的使用者訪問權限

204
00:07:58,933 --> 00:08:00,800
對於你的應用程式來說有意義的內容

205
00:08:00,800 --> 00:08:03,833
完全的訪問權限，好的，我們來創建

206
00:08:03,833 --> 00:08:05,100
應用程式

207
00:08:05,100 --> 00:08:06,400
他們正在填寫全部的

208
00:08:06,400 --> 00:08:09,566
資訊，包含隱私政策，URL

209
00:08:09,566 --> 00:08:12,700
字幕，主要分類，次要

210
00:08:12,700 --> 00:08:14,300
分類

211
00:08:14,300 --> 00:08:17,100
但是我們有興趣發送一個版本給

212
00:08:17,100 --> 00:08:18,233
TestFlight的使用者

213
00:08:18,233 --> 00:08:21,433
讓我們前往TestFlight

214
00:08:21,433 --> 00:08:24,866
並填寫遺漏的資訊

215
00:08:24,866 --> 00:08:26,400
這裡同樣你需要填寫任何

216
00:08:26,400 --> 00:08:29,433
對於你應用程式有意義的內容

217
00:08:29,433 --> 00:08:32,866
儲存，成功了 

218
00:08:32,866 --> 00:08:35,666
現在我們需要上傳一個版本，你可以

219
00:08:35,666 --> 00:08:36,466
看到我們沒有任何佈建

220
00:08:36,466 --> 00:08:39,900
那麼讓我們來完成它，我們回到

221
00:08:39,900 --> 00:08:41,333
Xcode

222
00:08:41,333 --> 00:08:44,533
且 Bundle Identifier 必須和

223
00:08:44,533 --> 00:08:46,766
在 App Store Connect中的Bundle Identifier 一致

224
00:08:46,766 --> 00:08:48,066
Connect

225
00:08:48,066 --> 00:08:52,833
也就是 EssentialAppCaseStudy

226
00:08:52,833 --> 00:08:55,333
完全一致。所以更新應用程式的 bundle ID

227
00:08:55,333 --> 00:08:59,500
來配合App Store Connect

228
00:08:59,500 --> 00:09:02,866
請確定你選擇了 Generic

229
00:09:02,866 --> 00:09:05,900
iOS裝置，不然你將無法

230
00:09:05,900 --> 00:09:09,266
生成檔案，如你所見

231
00:09:09,266 --> 00:09:13,266
除非你選擇了，存檔將會被禁止

232
00:09:13,266 --> 00:09:17,500
Generic iOS裝置或者一台真實的裝置

233
00:09:17,500 --> 00:09:20,533
所以讓我們選擇一個通用的

234
00:09:20,533 --> 00:09:23,266
現在我們可以生成一個可以

235
00:09:23,266 --> 00:09:23,733
被

236
00:09:23,733 --> 00:09:26,233
上載到App Store Connect的檔案，讓我們

237
00:09:26,233 --> 00:09:28,700
存檔

238
00:09:28,700 --> 00:09:31,433
這就是，我們現在有一個檔案

239
00:09:31,433 --> 00:09:32,700
我們可以分佈

240
00:09:32,700 --> 00:09:35,666
到App Store，所以選擇你想上載的檔案

241
00:09:35,666 --> 00:09:37,100
然後按下分發應用程序，App Store

242
00:09:37,100 --> 00:09:40,133
Connect

243
00:09:40,133 --> 00:09:42,366
上載

244
00:09:42,366 --> 00:09:45,733
然後你選擇適合你的應用程序的設置

245
00:09:45,733 --> 00:09:47,333
在這個例子中，我們使用自動

246
00:09:47,333 --> 00:09:49,433
簽名，但是如果你有

247
00:09:49,433 --> 00:09:51,500
手動簽名，你需要選擇

248
00:09:51,500 --> 00:09:52,866
適合你的應用程序的東西

249
00:09:52,866 --> 00:09:54,800
確保所有事項都符合規定，用於簽名的

250
00:09:54,800 --> 00:09:57,433
檔案符合你的應用程序的設置

251
00:09:57,433 --> 00:09:59,666
確保所有東西都正確，用於簽名的

252
00:09:59,666 --> 00:10:02,066
設定檔

253
00:10:02,066 --> 00:10:05,500
所選的團隊，包名稱（bundle Identifier）

254
00:10:05,500 --> 00:10:10,000
權限（entitlements），然後按上載


255
00:10:10,000 --> 00:10:12,133
如果一切都順利，您將會獲得一個

256
00:10:12,133 --> 00:10:14,133
成功的回應

257
00:10:14,133 --> 00:10:17,200
就是這樣，就是這樣

258
00:10:17,200 --> 00:10:19,900
讓我們回到 App Store Connect

259
00:10:19,900 --> 00:10:22,366
刷新頁面

260
00:10:22,366 --> 00:10:25,900
就在那裡，我們的建構正在處理中

261
00:10:25,900 --> 00:10:28,000
太好了，需要幾分鐘的時間

262
00:10:28,000 --> 00:10:29,833
才能處理完畢

263
00:10:29,833 --> 00:10:32,800
讓我們再次更新，砰，就在那裡

264
00:10:32,800 --> 00:10:33,733
一切

265
00:10:33,733 --> 00:10:36,533
成功完成。現在我們有一個建構版本，我們

266
00:10:36,533 --> 00:10:37,266
可以

267
00:10:37,266 --> 00:10:39,500
直接傳送到 App Store 給

268
00:10:39,500 --> 00:10:40,300
客戶

269
00:10:40,300 --> 00:10:42,800
或者我們可以先發送到TestFlight供一

270
00:10:42,800 --> 00:10:44,233
群人測試這個

271
00:10:44,233 --> 00:10:45,833
應用程式，然後才

272
00:10:45,833 --> 00:10:47,733
將它發布到App Store 

273
00:10:47,733 --> 00:10:49,500
所以我們可以選擇一個群組或者

274
00:10:49,500 --> 00:10:52,133
著個別測試人員來測試那個構建

275
00:10:52,133 --> 00:10:54,533
一旦你滿意，就把它發布給

276
00:10:54,533 --> 00:10:55,833
App Store的所有用戶

277
00:10:55,833 --> 00:10:58,933
太好了，這實在是太棒了，但需要大量的

278
00:10:58,933 --> 00:11:00,533
人工操作

279
00:11:00,533 --> 00:11:02,866
確實，理想的話，這個過程應該能夠



280
00:11:02,866 --> 00:11:04,466
自動化

281
00:11:04,466 --> 00:11:06,800
而它可以像我們

282
00:11:06,800 --> 00:11:08,066
有 CI 服務器

283
00:11:08,066 --> 00:11:10,366
用於自動化構建和測試

284
00:11:10,366 --> 00:11:11,433
的應用程序

285
00:11:11,433 --> 00:11:14,533
我們也可以自動化構建並

286
00:11:14,533 --> 00:11:15,100
部署

287
00:11:15,100 --> 00:11:17,833
到 App Store 或 TestFlight，所以

288
00:11:17,833 --> 00:11:18,633
無論

289
00:11:18,633 --> 00:11:20,800
您正在使用的構建服務器，您都應該能夠

290
00:11:20,800 --> 00:11:22,066
自動化

291
00:11:22,066 --> 00:11:25,333
此過程，例如，每次

292
00:11:25,333 --> 00:11:28,233
您推送代碼到 master，它會自動

293
00:11:28,233 --> 00:11:29,266
發送構建

294
00:11:29,266 --> 00:11:31,333
給測試人員或給客戶，給

295
00:11:31,333 --> 00:11:32,800
持份者

296
00:11:32,800 --> 00:11:35,200
所以你在不斷的提供價值給

297
00:11:35,200 --> 00:11:36,466
他們

298
00:11:36,466 --> 00:11:39,200
每天幾次，每週幾次

299
00:11:39,200 --> 00:11:40,533
他們可以看到新的更新，並且

300
00:11:40,533 --> 00:11:42,300
可以與其互動

301
00:11:42,300 --> 00:11:45,733
而這一切都是自動的，確實如此

302
00:11:45,733 --> 00:11:48,700
加上你隨時都可以提交到

303
00:11:48,700 --> 00:11:49,900
App Store

304
00:11:49,900 --> 00:11:52,000
你隨時都只需一擊就能提交

305
00:11:52,000 --> 00:11:53,666
它

306
00:11:53,666 --> 00:11:55,333
這就是你應該總是做好準備去推送

307
00:11:55,333 --> 00:11:56,933
的夢想

308
00:11:56,933 --> 00:11:59,733
準確地轉移到生產環境，這應該是

309
00:11:59,733 --> 00:12:01,600
僅僅是一個商業決策

310
00:12:01,600 --> 00:12:04,133
例如，在你的股東們對一個構建

311
00:12:04,133 --> 00:12:05,833
感到滿意後，

312
00:12:05,833 --> 00:12:08,233
它應該只是按一個按鈕，

313
00:12:08,233 --> 00:12:10,066
就可以在App Store中釋放，

314
00:12:10,066 --> 00:12:12,066
你不應該有任何的儀式感。

315
00:12:12,066 --> 00:12:14,633
將構建發送到App Store應該非常容易，

316
00:12:14,633 --> 00:12:15,666
到App Store。

317
00:12:15,666 --> 00:12:18,000
它應該被自動化並且應該

318
00:12:18,000 --> 00:12:19,433
產生構建，

319
00:12:19,433 --> 00:12:22,533
一週幾次，一天幾次，

320
00:12:22,533 --> 00:12:24,933
所以我們總是有一個準備好的構建來

321
00:12:24,933 --> 00:12:26,366
進行測試或推向

322
00:12:26,366 --> 00:12:28,700
生產環境，這就是持續

323
00:12:28,700 --> 00:12:30,533
交付，你正在持續地

324
00:12:30,533 --> 00:12:34,000
傳送價值，一天多次，

325
00:12:34,000 --> 00:12:37,033
然後再次，你可以達成這個目標

326
00:12:37,033 --> 00:12:37,433
通過

327
00:12:37,433 --> 00:12:40,700
任何你正在使用的構建伺服器，對，你

328
00:12:40,700 --> 00:12:41,666
可以用它來

329
00:12:41,666 --> 00:12:44,866
任何你有的構建伺服器，也許是本地的

330
00:12:44,866 --> 00:12:48,000
或者像Circle CI，Travis的遠程伺服器，

331
00:12:48,000 --> 00:12:48,466
Travis CI

332
00:12:48,466 --> 00:12:52,066
Bitrise，所以我們將要顯示你如何

333
00:12:52,066 --> 00:12:52,800
我們做到了

334
00:12:52,800 --> 00:12:55,200
透過免費的 GitHub Actions

335
00:12:55,200 --> 00:12:56,233
這是一種解決方案

336
00:12:56,233 --> 00:12:59,900
由 GitHub 提供，因此在 GitHub上

337
00:12:59,900 --> 00:13:03,266
我們創建了這個 .github 文件夾

338
00:13:03,266 --> 00:13:05,500
您可以為您的 

339
00:13:05,500 --> 00:13:07,666
GitHub Actions 設置工作流

340
00:13:07,666 --> 00:13:11,333
要部署應用程序需要

341
00:13:11,333 --> 00:13:14,466
三件事情：一個 Apple 分發

342
00:13:14,466 --> 00:13:16,000
證書

343
00:13:16,000 --> 00:13:19,666
供應配置檔案和您需要

344
00:13:19,666 --> 00:13:22,866
輸出選項以導出您的

345
00:13:22,866 --> 00:13:24,000
存檔

346
00:13:24,000 --> 00:13:25,733
所有這些都有教程 

347
00:13:25,733 --> 00:13:27,600
你只需要遵循 Apple 的

348
00:13:27,600 --> 00:13:30,233
文件 演講鏈接我將設置在

349
00:13:30,233 --> 00:13:31,433
此演講

350
00:13:31,433 --> 00:13:33,200
但重要的是你

351
00:13:33,200 --> 00:13:34,533
不想只是上傳

352
00:13:34,533 --> 00:13:36,800
證書在供應

353
00:13:36,800 --> 00:13:37,833
配置檔案為

354
00:13:37,833 --> 00:13:41,733
明文到 GitHub 那些都是秘密的

355
00:13:41,733 --> 00:13:44,700
所以我們做了什麼 我們加密了它們兩個

356
00:13:44,700 --> 00:13:46,133
用 GPG

357
00:13:46,133 --> 00:13:48,533
所以這是一個需要的加密區塊

358
00:13:48,533 --> 00:13:50,000
被解密之前

359
00:13:50,000 --> 00:13:52,800
確切的使用 那些是我們需要的資產

360
00:13:52,800 --> 00:13:53,500
我們需要

361
00:13:53,500 --> 00:13:55,266
部署我們的應用程序的

362
00:13:55,266 --> 00:13:58,066
認證設定文件

363
00:13:58,066 --> 00:14:01,666
並匯出選項

364
00:14:01,666 --> 00:14:04,933
然後我們設定工作流程

365
00:14:04,933 --> 00:14:06,533
所以我們有持續整合

366
00:14:06,533 --> 00:14:08,533
只需要建立和測試的工作流程

367
00:14:08,533 --> 00:14:09,600
應用程序

368
00:14:09,600 --> 00:14:12,866
並且我們有一個部署工作流程

369
00:14:12,866 --> 00:14:15,100
只是一個 YAML 設定文件來告訴 GitHub

370
00:14:15,100 --> 00:14:16,300
操作步驟

371
00:14:16,300 --> 00:14:19,166
在您的工作流自動化中

372
00:14:19,166 --> 00:14:20,933
部署自動化

373
00:14:20,933 --> 00:14:23,433
我們設置的方式是每次

374
00:14:23,433 --> 00:14:24,933
主控台有新的推送每次

375
00:14:24,933 --> 00:14:26,866
主控台有新的變更

376
00:14:26,866 --> 00:14:30,000
我們將運行這個工作流程，那是因為

377
00:14:30,000 --> 00:14:30,366
因為

378
00:14:30,366 --> 00:14:33,600
主控台是我們的主要分支，是我們的主線

379
00:14:33,600 --> 00:14:35,833
每次我們合併到主分支時

380
00:14:35,833 --> 00:14:37,433
我們希望產生一個建構

381
00:14:37,433 --> 00:14:39,500
並上載到 App Store Connect，所以我們

382
00:14:39,500 --> 00:14:41,733
可以將其發送到 TestFlight 或部署

383
00:14:41,733 --> 00:14:45,033
給我們的客戶，但這取決於您使用的

384
00:14:45,033 --> 00:14:47,033
分支策略

385
00:14:47,033 --> 00:14:48,366
或許你會選擇每次


386
00:14:48,366 --> 00:14:50,133
你推至一個發布分支

387
00:14:50,133 --> 00:14:52,233
或任何開發分支

388
00:14:52,233 --> 00:14:53,433
無論你使用何種分支策略

389
00:14:53,433 --> 00:14:55,900
你需要在這裡為我們設置每次

390
00:14:55,900 --> 00:14:57,433
我們合併到 master

391
00:14:57,433 --> 00:14:59,733
你希望向

392
00:14:59,733 --> 00:15:02,300
App Store Connect 部署一個新版本

393
00:15:02,300 --> 00:15:04,366
所以每次我們推送到 master，我們將

394
00:15:04,366 --> 00:15:05,600
運行

395
00:15:05,600 --> 00:15:09,166
構建和部署任務

396
00:15:09,166 --> 00:15:13,500
因此，它將在 macOS 映像上運行

397
00:15:13,500 --> 00:15:15,266
然後我們設定工作流程的

398
00:15:15,266 --> 00:15:16,633
步驟

399
00:15:16,633 --> 00:15:18,533
首先，我們需要查看

400
00:15:18,533 --> 00:15:20,800
存儲庫

401
00:15:20,800 --> 00:15:22,466
然後我們需要安裝供應

402
00:15:22,466 --> 00:15:24,000
配置文件

403
00:15:24,000 --> 00:15:27,266
我們需要用我們的秘密

404
00:15:27,266 --> 00:15:27,600
鑰匙來解密它

405
00:15:27,600 --> 00:15:30,233
你可以設置任何構建

406
00:15:30,233 --> 00:15:31,266
服務器你正在使用

407
00:15:31,266 --> 00:15:34,366
你有空間添加秘密

408
00:15:34,366 --> 00:15:36,866
並在我們解密它之後，我們可以安裝

409
00:15:36,866 --> 00:15:37,600
它

410
00:15:37,600 --> 00:15:40,133
在正確的文件夾中，然後同樣的事情，

411
00:15:40,133 --> 00:15:41,166
我們需要進行安裝

412
00:15:41,166 --> 00:15:43,100
我們將要使用的鑰匙鏈證書

413
00:15:43,100 --> 00:15:44,800
解密它

414
00:15:44,800 --> 00:15:47,033
然後按照這裡的步驟

415
00:15:47,033 --> 00:15:48,633
安裝此證書

416
00:15:48,633 --> 00:15:51,600
在映像檔的keychain中，然後我們將

417
00:15:51,600 --> 00:15:52,300
選取

418
00:15:52,300 --> 00:15:55,100
我們這裡的最新Xcode，就是

419
00:15:55,100 --> 00:15:57,266
11.4.1

420
00:15:57,266 --> 00:15:59,100
然後我們需要設定編譯號碼並且

421
00:15:59,100 --> 00:16:00,933
這需要是一個連續的

422
00:16:00,933 --> 00:16:03,266
獨特號碼，每個構建都需要有

423
00:16:03,266 --> 00:16:04,700
一個獨特號碼

424
00:16:04,700 --> 00:16:06,633
否則Apple將會拒絕，所以我們

425
00:16:06,633 --> 00:16:08,233
只使用GitHub

426
00:16:08,233 --> 00:16:11,266
的運行號碼，每個構建服務器都有

427
00:16:11,266 --> 00:16:13,733
類似這樣的事情

428
00:16:13,733 --> 00:16:18,533
然後我們為發布構建存檔

429
00:16:18,533 --> 00:16:22,000
然後我們導出存檔並將

430
00:16:22,000 --> 00:16:24,700
它部署到App Store Connect就這麼簡單

431
00:16:24,700 --> 00:16:25,500
就是這麼簡單

432
00:16:25,500 --> 00:16:28,233
就是這樣，無論你使用什麼構建服務器

433
00:16:28,233 --> 00:16:29,733
你可以設置一個

434
00:16:29,733 --> 00:16:30,633
配置

435
00:16:30,633 --> 00:16:33,500
像這樣一步一步來，無論你

436
00:16:33,500 --> 00:16:34,933
使用什麼解決方案

437
00:16:34,933 --> 00:16:38,133
您可以自動化部署您的

438
00:16:38,133 --> 00:16:39,666
應用程式

439
00:16:39,666 --> 00:16:41,733
好，讓我們看一下工作流程

440
00:16:41,733 --> 00:16:44,300
在實際運作中

441
00:16:44,300 --> 00:16:47,600
您可以看到部署工作流程運行

442
00:16:47,600 --> 00:16:49,900
一次，當我們將這些更改合併到

443
00:16:49,900 --> 00:16:53,500
主幹(master)

444
00:16:53,500 --> 00:16:57,100
並且所有步驟都成功執行了，例如檢出

445
00:16:57,100 --> 00:16:59,600
安裝供應描述文件，安裝

446
00:16:59,600 --> 00:17:01,600
金鑰鏈證書

447
00:17:01,600 --> 00:17:04,000
選擇了適合的Xcode，設定建置

448
00:17:04,000 --> 00:17:05,033
編號

449
00:17:05,033 --> 00:17:08,133
建立存檔，導出IPA

450
00:17:08,133 --> 00:17:11,033
並部署至App Store，全部

451
00:17:11,033 --> 00:17:12,133
都運作正常

452
00:17:12,133 --> 00:17:14,400
因此，如果我們回到App Store

453
00:17:14,400 --> 00:17:16,066
Connect網站的話

454
00:17:16,066 --> 00:17:19,100
嘖嘖，它就在這里，建置編號2

455
00:17:19,100 --> 00:17:21,666
當我們合併時

456
00:17:21,666 --> 00:17:22,133
自動上傳的

457
00:17:22,133 --> 00:17:25,733
將該變更合併到主幹，自此

458
00:17:25,733 --> 00:17:27,733
每次我們合併到主幹，我們就會

459
00:17:27,733 --> 00:17:29,566
自動生成一個可以發送到TestFlight或者

460
00:17:29,566 --> 00:17:31,566
直接發送到我們客戶的建置

461
00:17:31,566 --> 00:17:33,733
我們一直只是按鍵距離發布

462
00:17:33,733 --> 00:17:35,666
應用程式

463
00:17:35,666 --> 00:17:37,900
全天候都可執行

464
00:17:37,900 --> 00:17:40,000
並且每天我們都會做好幾次

465
00:17:40,000 --> 00:17:41,200
merge到master

466
00:17:41,200 --> 00:17:43,266
我們可以将这个构建发送给利益相關者

467
00:17:43,266 --> 00:17:44,466
他们可以测试它

468
00:17:44,466 --> 00:17:47,266
在他们自己的手机上，测试者可以测试它

469
00:17:47,266 --> 00:17:48,700
QA可以测试它

470
00:17:48,700 --> 00:17:52,133
所以你的工作隨時都是可見的

471
00:17:52,133 --> 00:17:54,000
这将大大提高你与每个人的

472
00:17:54,000 --> 00:17:55,733
溝通效果

473
00:17:55,733 --> 00:17:58,000
在業務中，因為相比於

474
00:17:58,000 --> 00:17:59,266
建立起焦慮感

475
00:17:59,266 --> 00:18:01,900
他们等待几周，几个月

476
00:18:01,900 --> 00:18:02,633
以获取构建

477
00:18:02,633 --> 00:18:04,400
去测试应用程序，他们得到它

478
00:18:04,400 --> 00:18:06,633
每日，一天好几次，一個禮拜好幾次

479
00:18:06,633 --> 00:18:07,333
一周

480
00:18:07,333 --> 00:18:09,333
而且當有一個他們測試的

481
00:18:09,333 --> 00:18:10,400
並且他們認為那個 

482
00:18:10,400 --> 00:18:12,533
相当不错，他们就很乐意发送给你

483
00:18:12,533 --> 00:18:14,133
你只需要按一个按钮

484
00:18:14,133 --> 00:18:16,466
就可以将它发送给客户，這就是 

485
00:18:16,466 --> 00:18:18,233
continuous delivery

486
00:18:18,233 --> 00:18:21,033
你總是准备好发货，你只需要 

487
00:18:21,033 --> 00:18:22,066
按一个按钮

488
00:18:22,066 --> 00:18:25,200
就能將你的應用程式部署到prod


489
00:18:25,200 --> 00:18:26,300
客戶

490
00:18:26,300 --> 00:18:28,300
太棒了，這個講座就到此為止

491
00:18:28,300 --> 00:18:30,133
我們下次再見

492
00:18:30,133 --> 00:18:43,900
下次見，再見