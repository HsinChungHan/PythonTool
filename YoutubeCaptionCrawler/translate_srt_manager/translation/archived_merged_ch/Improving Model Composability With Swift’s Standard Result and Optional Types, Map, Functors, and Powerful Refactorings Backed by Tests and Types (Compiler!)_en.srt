

1
00:00:00,766 --> 00:00:03,166
你好 Mike，嘿 Caio

2
00:00:03,166 --> 00:00:05,033
在這個講座中，你將學習如何

3
00:00:05,033 --> 00:00:06,933
提高並簡化你的代碼

4
00:00:06,933 --> 00:00:10,233
使用標準的 Swift Result 類型

5
00:00:10,233 --> 00:00:12,533
使用標準的 Swift Result 類型

6
00:00:12,533 --> 00:00:15,833
你需要 Swift 5 或以上版本，所以我們開始吧

7
00:00:15,833 --> 00:00:18,300
首先，讓我們顯示如何遷移你的代碼庫

8
00:00:18,300 --> 00:00:20,933
只需打開 Xcode

9
00:00:20,933 --> 00:00:22,533
10.2 或更高版本

10
00:00:22,533 --> 00:00:25,033
我們已經獲得所有

11
00:00:25,033 --> 00:00:26,400
必要步驟的警告

12
00:00:26,400 --> 00:00:29,833
我們需要採取的步驟來更新到 Swift 5。

13
00:00:29,833 --> 00:00:34,466
確保選擇所有目標

14
00:00:34,466 --> 00:00:37,266
好的，不需要改變源碼，所以讓我們

15
00:00:37,266 --> 00:00:38,866
只需按更新

16
00:00:38,866 --> 00:00:41,733
我們在 CI scheme 中運行所有測試

17
00:00:41,733 --> 00:00:43,266
因為在遷移過程中，我們希望確保

18
00:00:43,266 --> 00:00:44,466
所有目標都通過，所有

19
00:00:44,466 --> 00:00:46,633
行為保持不變

20
00:00:46,633 --> 00:00:48,800
的行為

21
00:00:48,800 --> 00:00:51,900
確實，所有測試均通過，讓我們

22
00:00:51,900 --> 00:00:53,600
提交

23
00:00:53,600 --> 00:00:56,833
遷移到 Swift 5 不需要變更原始碼

24
00:00:56,833 --> 00:00:58,000
需要的

25
00:00:58,000 --> 00:01:00,933
接下來，讓我們先解決警告

26
00:01:00,933 --> 00:01:01,433
首先

27
00:01:01,433 --> 00:01:04,633
讓我們啟用新的推薦設定

28
00:01:04,633 --> 00:01:07,333
進行全面國際化運行所有的

29
00:01:07,333 --> 00:01:09,666
測試再次

30
00:01:09,666 --> 00:01:15,333
通過，太好了，讓我們提交

31
00:01:15,333 --> 00:01:17,666
下一步，Swift編譯器正在產生一個

32
00:01:17,666 --> 00:01:19,266
對於多餘的

33
00:01:19,266 --> 00:01:22,000
內部宣告的警告到目前為止我們

34
00:01:22,000 --> 00:01:23,333
進行了明確的

35
00:01:23,333 --> 00:01:25,900
內部範疇宣告以便於控制訪問權限

36
00:01:25,900 --> 00:01:27,100
讓你清楚

37
00:01:27,100 --> 00:01:29,200
在講座過程中，然而這不是

38
00:01:29,200 --> 00:01:31,666
必需的，因為內部訪問權限控制是

39
00:01:31,666 --> 00:01:33,266
預設的訪問權限控制

40
00:01:33,266 --> 00:01:36,700
正確的，所以從現在開始我們將省略它

41
00:01:36,700 --> 00:01:38,933
所以讓我們全搜尋內部的

42
00:01:38,933 --> 00:01:40,133
並移除它

43
00:01:40,133 --> 00:01:44,866
全球性的，如你所見，它現在消失了

44
00:01:44,866 --> 00:01:46,466
讓我們跑測試，因為這是預設值，所以不該有任何變動

45
00:01:46,466 --> 00:01:48,700
好的，測試通過，內部的警告已經消失

46
00:01:48,700 --> 00:01:51,333
非常好，測試通過且內部

47
00:01:51,333 --> 00:01:52,633
警告消失

48
00:01:52,633 --> 00:01:55,333
讓我們提交，移除多餘的內部


49
00:01:55,333 --> 00:01:57,833
存取控制宣告

50
00:01:57,833 --> 00:01:59,833
接下來我們有幾個被棄用的

51
00:01:59,833 --> 00:02:00,866
初始化器

52
00:02:00,866 --> 00:02:02,466
如你所看，新的初始化器

53
00:02:02,466 --> 00:02:04,300
不再需要具名參數

54
00:02:04,300 --> 00:02:04,933
了

55
00:02:04,933 --> 00:02:07,433
所以我們可以在

56
00:02:07,433 --> 00:02:09,100
兩處都把 bytes 名稱移除

57
00:02:09,100 --> 00:02:12,000
讓我們來執行測試，都通過了，很好

58
00:02:12,000 --> 00:02:15,100
讓我們來提交

59
00:02:15,100 --> 00:02:18,300
沒有更多的警告，移轉完成了

60
00:02:18,300 --> 00:02:20,300
非常好，但是由於我們正在進行這個測試

61
00:02:20,300 --> 00:02:22,466
我想起我們使用 reduce 方法

62
00:02:22,466 --> 00:02:23,100
來移除

63
00:02:23,100 --> 00:02:25,833
在 Swift 中可選的字典

64
00:02:25,833 --> 00:02:26,533
但是從 Swift 5 開始

65
00:02:26,533 --> 00:02:29,333
你可以使用新的 compactMapValues

66
00:02:29,333 --> 00:02:30,133
來替代

67
00:02:30,133 --> 00:02:32,300
刪除所有可選值，這是一種

68
00:02:32,300 --> 00:02:33,666
更簡單的方式

69
00:02:33,666 --> 00:02:36,533
讓我們來執行測試，或者

70
00:02:36,533 --> 00:02:37,566
通過的話

71
00:02:37,566 --> 00:02:41,266
讓我們來提交

72
00:02:41,266 --> 00:02:43,100
最後讓我們來處理標準的

73
00:02:43,100 --> 00:02:45,333
Result 類型，讓我們搜尋

74
00:02:45,333 --> 00:02:47,566
我們創建的自定義 Result 類型，並且

75
00:02:47,566 --> 00:02:48,400
重構

76
00:02:48,400 --> 00:02:50,933
這些自定義的 Result 類型，一個一個來

77
00:02:50,933 --> 00:02:51,433
好的

78
00:02:51,433 --> 00:02:53,266
這似乎是一個很好的策略首先

79
00:02:53,266 --> 00:02:54,700
我們有 LoadFeed

80
00:02:54,700 --> 00:02:56,866
Result 這是我們創建的第一種 Result 類型

81
00:02:56,866 --> 00:02:57,733
我們創建的

82
00:02:57,733 --> 00:03:00,400
它有一個成功的案例，包含一個

83
00:03:00,400 --> 00:03:01,500
FeedImages 的數組以及失敗的

84
00:03:01,500 --> 00:03:03,433
使用 Error 協議，這非常

85
00:03:03,433 --> 00:03:04,533
類似於 Swift 的

86
00:03:04,533 --> 00:03:07,033
Result 類型，如你所見 Swift 的

87
00:03:07,033 --> 00:03:08,300
標準 Result 類型

88
00:03:08,300 --> 00:03:10,933
也有成功和失敗，其中

89
00:03:10,933 --> 00:03:11,566
成功

90
00:03:11,566 --> 00:03:14,233
包含一個 Success 泛型值，而

91
00:03:14,233 --> 00:03:14,866
失敗

92
00:03:14,866 --> 00:03:17,833
包含一個 Failure 泛型值，其中

93
00:03:17,833 --> 00:03:18,466
失敗

94
00:03:18,466 --> 00:03:21,100
需要符合 Error 協議，所以

95
00:03:21,100 --> 00:03:22,066
我們可以替換

96
00:03:22,066 --> 00:03:24,300
LoadFeedResult 用新的 result

97
00:03:24,300 --> 00:03:25,100
類型，並

98
00:03:25,100 --> 00:03:26,766
由於我們希望避免破壞過多

99
00:03:26,766 --> 00:03:29,266
現有的代碼，我們可以將

100
00:03:29,266 --> 00:03:31,666
LoadFeedResult enum 轉換為類型

101
00:03:31,666 --> 00:03:32,633
別名

102
00:03:32,633 --> 00:03:36,633
為帶有 FeedImages 數組的結果

103
00:03:36,633 --> 00:03:38,866
作為 Success 類型以及 Error


104
00:03:38,866 --> 00:03:40,766
對於 Failure 類型的 protocol

105
00:03:40,766 --> 00:03:43,200
所以這樣應該就可以了，讓我們開始運行

106
00:03:43,200 --> 00:03:43,900
測試

107
00:03:43,900 --> 00:03:46,300
好的，建構成功並且測試

108
00:03:46,300 --> 00:03:47,333
通過了，並且沒有

109
00:03:47,333 --> 00:03:50,466
需要額外的變更，太棒了，讓我們

110
00:03:50,466 --> 00:03:51,333
提交

111
00:03:51,333 --> 00:03:54,066
所以我們使用自定義的 LoadFeedResult 枚舉

112
00:03:54,066 --> 00:03:55,266
代替標準的

113
00:03:55,266 --> 00:03:58,766
Swift Result，我們現在可以進行的另一個改進是

114
00:03:58,766 --> 00:03:59,566
現在實施

115
00:03:59,566 --> 00:04:02,133
將 LoadFeedResult 嵌入

116
00:04:02,133 --> 00:04:03,433
FeedLoader 協議中

117
00:04:03,433 --> 00:04:05,500
因為他們有密切的關係，我們

118
00:04:05,500 --> 00:04:06,633
只需要這樣調用

119
00:04:06,633 --> 00:04:08,933
現在只需調用 Result，因為它已經在範疇內

120
00:04:08,933 --> 00:04:11,666
FeedLoader 中

121
00:04:11,666 --> 00:04:14,466
但是由於此結果與標準類型 Result 名稱

122
00:04:14,466 --> 00:04:16,000
發生衝突

123
00:04:16,000 --> 00:04:18,366
我們可以添加 Swift 模塊名稱以幫助

124
00:04:18,366 --> 00:04:19,833
編譯器理解

125
00:04:19,833 --> 00:04:21,900
這種類型的聲明，對，我真的很喜歡

126
00:04:21,900 --> 00:04:23,666
從客戶的角度看這種變化

127
00:04:23,666 --> 00:04:24,300
視圖

128
00:04:24,300 --> 00:04:26,800
它現在讀取 FeedLoader.Result，這在

129
00:04:26,800 --> 00:04:28,233
描述方面好多了

130
00:04:28,233 --> 00:04:30,700
確實，但這是一個破壞性的變更

131
00:04:30,700 --> 00:04:32,700
而編譯器將會幫助我們

132
00:04:32,700 --> 00:04:40,833
所以 LoadFeedResult 現在是

133
00:04:40,833 --> 00:04:43,733
FeedLoader.Result

134
00:04:43,733 --> 00:04:45,333
好的，我們已經完成了 FeedLoader

135
00:04:45,333 --> 00:04:49,733
Result，讓我們提交

136
00:04:49,733 --> 00:04:52,533
接下來讓我們對 HTTP 也做同樣的事

137
00:04:52,533 --> 00:04:54,000
ClientResult

138
00:04:54,000 --> 00:04:56,633
讓我們按照相同的過程處理

139
00:04:56,633 --> 00:04:57,900
將它定義為 typealias

140
00:04:57,900 --> 00:05:01,033
極其 Result 型別，其中成功

141
00:05:01,033 --> 00:05:04,233
是 Data 和 HTTPURL 的元組

142
00:05:04,233 --> 00:05:04,933
回應

143
00:05:04,933 --> 00:05:07,333
好的，而失敗則為 Error

144
00:05:07,333 --> 00:05:10,133
協議。好的，這個改變會產生問題

145
00:05:10,133 --> 00:05:11,333
而編譯器將會幫助我們

146
00:05:11,333 --> 00:05:13,100
找出我們需要修正類型的地方

147
00:05:13,100 --> 00:05:13,900
資訊

148
00:05:13,900 --> 00:05:16,066
在這裏我們只需要將值放入元組即可

149
00:05:16,066 --> 00:05:17,733
在測試目標中我們也需要這麼做

150
00:05:17,733 --> 00:05:19,433
同樣的操作

151
00:05:19,433 --> 00:05:21,500
好馬上進行測試，確定都通過

152
00:05:21,500 --> 00:05:24,533
好的，測試都順利通過，我們也可以將

153
00:05:24,533 --> 00:05:27,600
typealias 嵌套在協議中

154
00:05:27,600 --> 00:05:28,866
我們就稱其為 Result

155
00:05:28,866 --> 00:05:32,466
的確，我們建立並運行測試

156
00:05:32,466 --> 00:05:35,033
並解決任何類型資訊的需求

157
00:05:35,033 --> 00:05:36,400
由編譯器

158
00:05:36,400 --> 00:05:37,600
所以在這種情況下我們只需要添加一個

159
00:05:37,600 --> 00:05:42,933
點符號

160
00:05:42,933 --> 00:05:46,633
再次運行測試，傳遞awesome

161
00:05:46,633 --> 00:05:50,533
讓我們提交

162
00:05:50,533 --> 00:05:53,500
現在最後的自定義Result類型是

163
00:05:53,500 --> 00:05:54,133
Retrieve

164
00:05:54,133 --> 00:05:57,600
CachedFeedResult確實，但是我們有

165
00:05:57,600 --> 00:05:58,933
三個情況在這裡

166
00:05:58,933 --> 00:06:01,733
而不是兩個所以它並不符合

167
00:06:01,733 --> 00:06:03,900
標準的Swift Result類型

168
00:06:03,900 --> 00:06:06,233
所以我們可以讓它維持原樣，它運行得很好

169
00:06:06,233 --> 00:06:07,433
完全沒問題

170
00:06:07,433 --> 00:06:08,933
然而，保持一致性會更好

171
00:06:08,933 --> 00:06:10,633
在整個應用程序中

172
00:06:10,633 --> 00:06:12,933
通過使用標準

173
00:06:12,933 --> 00:06:15,333
Result類型來表示運行結果

174
00:06:15,333 --> 00:06:17,900
為了這是我們可以將

175
00:06:17,900 --> 00:06:18,400
拆分

176
00:06:18,400 --> 00:06:21,166
這個自定義的Result類型拆分為成功和

177
00:06:21,166 --> 00:06:21,833
失敗

178
00:06:21,833 --> 00:06:24,400
其中空和找到的情況都

179
00:06:24,400 --> 00:06:25,333
代表

180
00:06:25,333 --> 00:06:29,666
成功。對，所以空是一種成功的情況，

181
00:06:29,666 --> 00:06:32,400
因為它表示檢索

182
00:06:32,400 --> 00:06:33,433
成功，

183
00:06:33,433 --> 00:06:36,000
但是緩存裡沒有任何東西。找到的情況，

184
00:06:36,000 --> 00:06:37,100
找到的情況

185
00:06:37,100 --> 00:06:40,233
也代表成功，但有一個發現的

186
00:06:40,233 --> 00:06:42,866
cache與收集LocalFeed的

187
00:06:42,866 --> 00:06:43,600
項目

188
00:06:43,600 --> 00:06:46,066
和cache的時間戳，所以我們有兩個

189
00:06:46,066 --> 00:06:47,500
成功的情況

190
00:06:47,500 --> 00:06:52,233
可以被一個enum表示

191
00:06:52,233 --> 00:06:55,666
例如 CachedFeed，確切地說

192
00:06:55,666 --> 00:06:58,800
現在我們有一個持有成功的場景

193
00:06:58,800 --> 00:07:00,933
CachedFeed可能是空的或者是找到的，還有一個失敗的場景

194
00:07:00,933 --> 00:07:02,933
代表著錯誤，確實如此

195
00:07:02,933 --> 00:07:06,300
現在這匹配到了標準的 Result

196
00:07:06,300 --> 00:07:08,933
類型

197
00:07:08,933 --> 00:07:09,900
我們然後可以把它轉換成一種類型

198
00:07:09,900 --> 00:07:11,566
別名為 Result

199
00:07:11,566 --> 00:07:13,266
成功的類型為 CachedFeed 

200
00:07:13,266 --> 00:07:15,500
錯誤的類型為 Error

201
00:07:15,500 --> 00:07:17,033
這當然是一種

202
00:07:17,033 --> 00:07:19,500
破壞性的變更

203
00:07:19,500 --> 00:07:20,400
因為我們有新的類型，所以編譯器

204
00:07:20,400 --> 00:07:22,533
要幫助我們

205
00:07:22,533 --> 00:07:23,666
解決類型錯誤，所以我們依然有

206
00:07:23,666 --> 00:07:27,566
找到的場景，但是它被

207
00:07:27,566 --> 00:07:29,033
包在一個成功的場景裡確實

208
00:07:29,033 --> 00:07:32,800
同樣在這裡，找到和成功

209
00:07:32,800 --> 00:07:36,633
是一致的。

210
00:07:36,633 --> 00:07:39,500
空的，這可以簡化為只是

211
00:07:39,500 --> 00:07:41,666
成功

212
00:07:41,666 --> 00:07:45,566
同樣在這裡找到成功

213
00:07:45,566 --> 00:07:49,500
和成功

214
00:07:49,500 --> 00:07:52,133
現在我們創建Result類型時需要

215
00:07:52,133 --> 00:07:53,033
包裹它

216
00:07:53,033 --> 00:07:56,233
在一個成功的情況下

217
00:07:56,233 --> 00:07:58,300
好的，讓我們運行測試，而且

218
00:07:58,300 --> 00:07:59,433
編譯器將幫助我們

219
00:07:59,433 --> 00:08:01,566
也在此處解決類型問題，即將

220
00:08:01,566 --> 00:08:02,466
被包裹

221
00:08:02,466 --> 00:08:05,033
將所有聲明包裹在一個成功的情況中

222
00:08:05,033 --> 00:08:06,300
也一樣

223
00:08:06,300 --> 00:08:10,133
我們在鏡頭下做這些工作，以節省您的時間

224
00:08:10,133 --> 00:08:12,533
好的，編譯錯誤已解決，讓我們運行

225
00:08:12,533 --> 00:08:13,666
這些測試

226
00:08:13,666 --> 00:08:16,933
成功通過，再來一次，

227
00:08:16,933 --> 00:08:19,100
我們可以將RetrieveCachedFeed

228
00:08:19,100 --> 00:08:20,066
Result

229
00:08:20,066 --> 00:08:22,466
放在FeedStore協議中這次

230
00:08:22,466 --> 00:08:23,566
因為我們有多於一種

231
00:08:23,566 --> 00:08:25,833
Result的類型，我們稱這個為

232
00:08:25,833 --> 00:08:26,800
Retrieval

233
00:08:26,800 --> 00:08:30,400
Result，讓我們修正類型資訊

234
00:08:30,400 --> 00:08:33,433
讀起來更加清晰，對，我也這麼認為

235
00:08:33,433 --> 00:08:36,633
再次運行測試，成功通過

236
00:08:36,633 --> 00:08:40,300
讓我們提交


237
00:08:40,300 --> 00:08:42,133
現在如果你看一下這個

238
00:08:42,133 --> 00:08:44,233
CachedFeed enum的結構

239
00:08:44,233 --> 00:08:46,700
它看起來與標準的

240
00:08:46,700 --> 00:08:48,366
optional type非常相似

241
00:08:48,366 --> 00:08:51,600
這表示沒有或缺少一個

242
00:08:51,600 --> 00:08:52,233
值的情況，

243
00:08:52,233 --> 00:08:55,500
或者有表示有一個值的情況，

244
00:08:55,500 --> 00:08:57,433
這就是我們在這裡所做的

245
00:08:57,433 --> 00:09:00,300
沒有就表示缺少了緩存，

246
00:09:00,300 --> 00:09:04,466
或者找到了就表示有了緩存

247
00:09:04,466 --> 00:09:06,800
所以我們可以用標準的Optional type

248
00:09:06,800 --> 00:09:07,666
來表示

249
00:09:07,666 --> 00:09:10,633
這種有或者沒有

250
00:09:10,633 --> 00:09:11,666
CachedFeed的概念

251
00:09:11,666 --> 00:09:13,433
所以我們甚至可以用一個

252
00:09:13,433 --> 00:09:14,866
struct來表示它，好的

253
00:09:14,866 --> 00:09:17,033
所以我們不再需要empty case了

254
00:09:17,033 --> 00:09:18,366
它就是一個struct

255
00:09:18,366 --> 00:09:22,700
包含了feed和一個時間戳

256
00:09:22,700 --> 00:09:25,266
這是公開的，因為它是由

257
00:09:25,266 --> 00:09:26,000
外部

258
00:09:26,000 --> 00:09:29,200
模塊所創建的，確實，那麼我們如何表示

259
00:09:29,200 --> 00:09:30,000
缺少

260
00:09:30,000 --> 00:09:33,033
一個CachedFeed，就是把它

261
00:09:33,033 --> 00:09:35,900
在 Result 中設置為 optional, 然後完成了

262
00:09:35,900 --> 00:09:37,666
您可能有或沒有欄位但他們都是

263
00:09:37,666 --> 00:09:38,233
雙方

264
00:09:38,233 --> 00:09:40,000
成功擷取的代表

265
00:09:40,000 --> 00:09:42,466
讓我們進行建構，然後編譯器

266
00:09:42,466 --> 00:09:42,933
將會

267
00:09:42,933 --> 00:09:46,133
引導我們解決型別錯誤

268
00:09:46,133 --> 00:09:47,333
所以不是找到

269
00:09:47,333 --> 00:09:49,200
現在我們有些東西，這就是

270
00:09:49,200 --> 00:09:51,333
Optional用於表示

271
00:09:51,333 --> 00:09:58,366
值存在的術語

272
00:09:58,366 --> 00:10:02,066
現在當我們創建Result類型一些

273
00:10:02,066 --> 00:10:04,366
CachedFeed，而不是空的現在是

274
00:10:04,366 --> 00:10:06,000
沒有

275
00:10:06,000 --> 00:10:08,466
但我們甚至可以在存在值的情況下簡化

276
00:10:08,466 --> 00:10:10,800
當物件存在值時，我們不需要說些什麼

277
00:10:10,800 --> 00:10:13,666
編譯器可以推斷出來，這很好

278
00:10:13,666 --> 00:10:15,200
讓我們執行測試

279
00:10:15,200 --> 00:10:17,833
並解決那裡的類型錯誤

280
00:10:17,833 --> 00:10:19,433
我們將會在鏡頭後進行

281
00:10:19,433 --> 00:10:22,800
節省您的時間，好的讓我們執行

282
00:10:22,800 --> 00:10:24,000
測試

283
00:10:24,000 --> 00:10:27,100
全數通過，同樣的，這可以

284
00:10:27,100 --> 00:10:27,433
僅僅是

285
00:10:27,433 --> 00:10:31,266
在元組上的別名

286
00:10:31,266 --> 00:10:34,866
閱讀和時間戳記

287
00:10:34,866 --> 00:10:37,733
讓我們運行所有的測試，並確認我們

288
00:10:37,733 --> 00:10:39,733
有一個更簡單的定義方式

289
00:10:39,733 --> 00:10:45,100
來建立我們的資料模型，太棒了，讓我們提交成果

290
00:10:45,100 --> 00:10:47,433
讓我們繼續添加 typealias 以

291
00:10:47,433 --> 00:10:48,233
更精確地定義

292
00:10:48,233 --> 00:10:50,800
Result 的型別，針對插入

293
00:10:50,800 --> 00:10:51,833
的操作

294
00:10:51,833 --> 00:10:54,000
我們到目前為止使用一個 optional Error 來

295
00:10:54,000 --> 00:10:55,333
描述結果

296
00:10:55,333 --> 00:10:58,366
此插入操作的結果，同樣對於

297
00:10:58,366 --> 00:11:00,533
刪除操作

298
00:11:00,533 --> 00:11:03,500
讓我們運行所有的測試，並提交結果

299
00:11:03,500 --> 00:11:06,533
提交成果

300
00:11:06,533 --> 00:11:09,266
好的，到目前為止我們把這些

301
00:11:09,266 --> 00:11:10,366
操作的

302
00:11:10,366 --> 00:11:13,666
結果都表示為 optional Errors，因為它們

303
00:11:13,666 --> 00:11:14,300
並未

304
00:11:14,300 --> 00:11:17,600
真正產生值，只有可能出現錯誤

305
00:11:17,600 --> 00:11:20,300
然而，為了使我們的代碼更具有可組合性

306
00:11:20,300 --> 00:11:22,066
我們可以使用標準的 Result 型別

307
00:11:22,066 --> 00:11:22,800
就像

308
00:11:22,800 --> 00:11:25,200
針對結束並無成功的操作

309
00:11:25,200 --> 00:11:26,233
你可以宣告一個帶有

310
00:11:26,233 --> 00:11:28,533
成功案例的 Result 型別

311
00:11:28,533 --> 00:11:30,366
成功案例的型別為

312
00:11:30,366 --> 00:11:33,033
Void 而錯誤型別為失敗的

313
00:11:33,033 --> 00:11:34,133
案例


314
00:11:34,133 --> 00:11:36,533
現在他們都代表著與

315
00:11:36,533 --> 00:11:38,300
標準的Result型別相對應的結果

316
00:11:38,300 --> 00:11:40,133
這樣你就可以更好地傳達你的

317
00:11:40,133 --> 00:11:41,733
在程式碼中的意圖

318
00:11:41,733 --> 00:11:44,300
因為這是一種操作的結果且

319
00:11:44,300 --> 00:11:45,600
同時，

320
00:11:45,600 --> 00:11:47,833
使你的程式碼更具有

321
00:11:47,833 --> 00:11:50,000
與採用標準

322
00:11:50,000 --> 00:11:51,433
Result型別的其他API匹配的可能性，

323
00:11:51,433 --> 00:11:54,000
所以使用標準類型如Optional

324
00:11:54,000 --> 00:11:55,100
和Result

325
00:11:55,100 --> 00:11:57,200
讓你的程式碼更具有

326
00:11:57,200 --> 00:11:58,233
與其他模塊匹配的可能性，

327
00:11:58,233 --> 00:12:00,300
同時也使用標準類型來

328
00:12:00,300 --> 00:12:02,866
表示他們的數據模型，

329
00:12:02,866 --> 00:12:04,866
所以現在編譯器將引導我們

330
00:12:04,866 --> 00:12:05,900
來解決

331
00:12:05,900 --> 00:12:08,800
型別錯誤，而這裡有另一個

332
00:12:08,800 --> 00:12:10,000
Result型別

333
00:12:10,000 --> 00:12:12,533
可以替換成Result Void

334
00:12:12,533 --> 00:12:14,633
錯誤因此它可以被組成

335
00:12:14,633 --> 00:12:16,533
所以現在在調用deleteCached

336
00:12:16,533 --> 00:12:17,733
Feed方法時，

337
00:12:17,733 --> 00:12:20,700
你获得一个删除结果在 

338
00:12:20,700 --> 00:12:21,733
回调闭包中，

339
00:12:21,733 --> 00:12:25,033
然后你可以使用一个正常的切换

340
00:12:25,033 --> 00:12:28,366
处理成功的情況

341
00:12:28,366 --> 00:12:31,600
我们就执行成功分支的情况，处理失败

342
00:12:31,600 --> 00:12:34,366
當出錯時，我們用失敗來完成

343
00:12:34,366 --> 00:12:37,200
當出錯時

344
00:12:37,200 --> 00:12:41,100
好的，其他地方也一樣

345
00:12:41,100 --> 00:12:43,600
好的，所有類型信息都已修正

346
00:12:43,600 --> 00:12:45,500
我們來執行這些測試

347
00:12:45,500 --> 00:12:48,466
所有測試通過，做一次提交並替換

348
00:12:48,466 --> 00:12:50,366
出現的選擇性錯誤

349
00:12:50,366 --> 00:12:52,800
用於表示操作的成功或者

350
00:12:52,800 --> 00:12:53,433
失敗

351
00:12:53,433 --> 00:12:56,866
以成功時的 Result 類型為 Void

352
00:12:56,866 --> 00:12:57,500
失敗時為 Error

353
00:12:57,500 --> 00:13:01,266
現在所有的 API 都使用一個

354
00:13:01,266 --> 00:13:02,466
標準的 Result 類型

355
00:13:02,466 --> 00:13:04,466
我們可以改進和簡化一些

356
00:13:04,466 --> 00:13:06,233
實現代碼

357
00:13:06,233 --> 00:13:09,833
例如在 CoreDataFeedStore 中

358
00:13:09,833 --> 00:13:12,466
我們有許多調用的分支

359
00:13:12,466 --> 00:13:13,333
完成回調，並創建一種箭頭

360
00:13:13,333 --> 00:13:16,066
代碼的類型

361
00:13:16,066 --> 00:13:16,866
代碼

362
00:13:16,866 --> 00:13:20,866
當用 do catch 塊連接時

363
00:13:20,866 --> 00:13:22,933
只要有標準的 Result 類型，我們就可以

364
00:13:22,933 --> 00:13:24,933
透過只需要

365
00:13:24,933 --> 00:13:29,100
一個完成並使用結果

366
00:13:29,100 --> 00:13:32,700
類型的捕獲初始化器，讓你傳遞

367
00:13:32,700 --> 00:13:35,500
可能拋出錯誤的閉包，所以我們

368
00:13:35,500 --> 00:13:36,633
不需要 do catch 塊


369
00:13:36,633 --> 00:13:38,933
你不再需要移動這段程式碼

370
00:13:38,933 --> 00:13:39,733
於do裡面

371
00:13:39,733 --> 00:13:43,166
這裡我們認為這是捕捉塊

372
00:13:43,166 --> 00:13:43,833
closure

373
00:13:43,833 --> 00:13:46,533
因為當你在捕捉的closure裡面丟出錯誤

374
00:13:46,533 --> 00:13:47,666
捕捉的closure

375
00:13:47,666 --> 00:13:50,133
它會自動將其包裹為一個失敗

376
00:13:50,133 --> 00:13:50,800
case

377
00:13:50,800 --> 00:13:53,100
屬於 Result 類型，所以我們的失敗就走了

378
00:13:53,100 --> 00:13:53,833
failure

379
00:13:53,833 --> 00:13:57,033
準確地完成，我們不需要去

380
00:13:57,033 --> 00:13:57,666
invoke

381
00:13:57,666 --> 00:14:01,033
這個完成，因為它包裹返回的

382
00:14:01,033 --> 00:14:01,833
values

383
00:14:01,833 --> 00:14:06,933
在一個成功的 case 裡面，讓我們執行測試

384
00:14:06,933 --> 00:14:09,900
很好，我們甚至可以省略所有的

385
00:14:09,900 --> 00:14:10,933
if else

386
00:14:10,933 --> 00:14:13,733
statements 通過將optional

387
00:14:13,733 --> 00:14:15,033
回傳值進行映射

388
00:14:15,033 --> 00:14:18,533
在定義的方法中

389
00:14:18,533 --> 00:14:22,300
讓我們再跑一次測試全部通過了

390
00:14:22,300 --> 00:14:25,433
我們甚至可以省略捕捉擋的名稱

391
00:14:25,433 --> 00:14:28,800
以及 cache 的命名參數，只用

392
00:14:28,800 --> 00:14:30,300
$0

393
00:14:30,300 --> 00:14:33,033
完全正確，非常好，讓我們再次執行

394
00:14:33,033 --> 00:14:34,933
測試

395
00:14:34,933 --> 00:14:36,700
這看起來好多了，這段程式碼裡沒有

396
00:14:36,700 --> 00:14:38,133
branching

397
00:14:38,133 --> 00:14:40,700
完全正確，我們只是組成並鏈接這些

398
00:14:40,700 --> 00:14:41,500
操作


399
00:14:41,500 --> 00:14:44,700
和真正體現了

400
00:14:44,700 --> 00:14:47,333
極快單元測試的強大之處，我們改變了

401
00:14:47,333 --> 00:14:48,800
整個實現方式

402
00:14:48,800 --> 00:14:51,100
並確保系統仍然

403
00:14:51,100 --> 00:14:53,266
按照預期工作

404
00:14:53,266 --> 00:14:55,900
很棒，我們可以對

405
00:14:55,900 --> 00:14:57,033
其他方法也做同樣的事

406
00:14:57,033 --> 00:15:03,600
讓我們快點做

407
00:15:03,600 --> 00:15:06,466
再次運行測試，全部通過，而且

408
00:15:06,466 --> 00:15:07,500
程式碼更為

409
00:15:07,500 --> 00:15:10,800
精簡，沒有分支，厲害

410
00:15:10,800 --> 00:15:13,266
提交變更，簡化CoreDataFeed

411
00:15:13,266 --> 00:15:13,833
儲存處

412
00:15:13,833 --> 00:15:17,600
與新結果的API一起簡化代碼

413
00:15:17,600 --> 00:15:20,133
你可以在URLSession中也做同樣的事情

414
00:15:20,133 --> 00:15:21,666
HTTPClient

415
00:15:21,666 --> 00:15:24,066
取代三個完成，我們可以只有

416
00:15:24,066 --> 00:15:25,666
一個

417
00:15:25,666 --> 00:15:27,900
看看，好多了，讓我們

418
00:15:27,900 --> 00:15:30,466
再次運行測試

419
00:15:30,466 --> 00:15:35,600
通過，現在提交

420
00:15:35,600 --> 00:15:38,466
最後讓我們更新我們的CI設置

421
00:15:38,466 --> 00:15:39,033
為

422
00:15:39,033 --> 00:15:41,033
與圖像一起構建和測試

423
00:15:41,033 --> 00:15:43,433
支持Swift 5.

424
00:15:43,433 --> 00:15:47,333
提交變更，太棒了，本次

425
00:15:47,333 --> 00:15:48,000
講座就到此為止

426
00:15:48,000 --> 00:15:50,300
下次再見，大家再見。

427
00:15:50,300 --> 00:16:02,233
各位，再見。