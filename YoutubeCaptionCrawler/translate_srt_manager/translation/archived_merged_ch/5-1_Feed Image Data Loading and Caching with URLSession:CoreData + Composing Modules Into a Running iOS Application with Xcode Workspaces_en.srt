

1
00:00:00,233 --> 00:00:03,166
你好 Mike，嗨 Caio

2
00:00:03,166 --> 00:00:06,233
在這場演講中，我們將創建我們的主要

3
00:00:06,233 --> 00:00:09,266
iOS應用程式項目，我們將會

4
00:00:09,266 --> 00:00:10,400
組建

5
00:00:10,400 --> 00:00:12,766
所有的模組，唯一缺失的是

6
00:00:12,766 --> 00:00:14,466
FeedImageDataLoader的實現，

7
00:00:14,466 --> 00:00:18,233
正確的，

8
00:00:18,233 --> 00:00:21,033
它也需要被移動到

9
00:00:21,033 --> 00:00:21,433
Feed

10
00:00:21,433 --> 00:00:24,133
功能模組中，連同Feed

11
00:00:24,133 --> 00:00:24,633
Loader

12
00:00:24,633 --> 00:00:27,833
協議和FeedImage數據模型

13
00:00:27,833 --> 00:00:29,733
因為基本上它並不應該

14
00:00:29,733 --> 00:00:30,866
存在於UI中

15
00:00:30,866 --> 00:00:32,766
它也不應該存在在展示部分

16
00:00:32,766 --> 00:00:34,233
是的，它是一種抽象

17
00:00:34,233 --> 00:00:36,533
並且覆蓋了Feed Feature的核心功能

18
00:00:36,533 --> 00:00:37,266
模組

19
00:00:37,266 --> 00:00:41,033
加載圖像數據，因此可以將它與Feed Feature模組一同移動

20
00:00:41,033 --> 00:00:43,266
非常好

21
00:00:43,266 --> 00:00:44,133
太棒了

22
00:00:44,133 --> 00:00:45,666
就像我們有遠程

23
00:00:45,666 --> 00:00:47,200
FeedLoader的實現

24
00:00:47,200 --> 00:00:49,600
和本地Feed

25
00:00:49,600 --> 00:00:50,866
Loader的實現，我們也需要

26
00:00:50,866 --> 00:00:52,933
FeedImageDataLoader的遠程實現

27
00:00:52,933 --> 00:00:54,233


28
00:00:54,233 --> 00:00:56,866
從網路和一個

29
00:00:56,866 --> 00:00:57,600
本地來獲取圖片

30
00:00:57,600 --> 00:01:01,100
從快取中確實地獲取它

31
00:01:01,100 --> 00:01:02,933
所以讓我們來看看協議

32
00:01:02,933 --> 00:01:04,400
首先，我們已經移動了它

33
00:01:04,400 --> 00:01:07,666
到 Feed Feature 文件夾，因此當需要時，我們可以將它

34
00:01:07,666 --> 00:01:09,333
移動到自己的

35
00:01:09,333 --> 00:01:11,600
封包，與其他功能

36
00:01:11,600 --> 00:01:13,600
抽象化一起

37
00:01:13,600 --> 00:01:15,733
所以 FeedImageDataLoader 協議

38
00:01:15,733 --> 00:01:17,100
只有一種方法

39
00:01:17,100 --> 00:01:20,000
從 URL 和一個

40
00:01:20,000 --> 00:01:21,833
完成塊加載圖像數據

41
00:01:21,833 --> 00:01:24,866
返回的型別是 Data

42
00:01:24,866 --> 00:01:28,066
帶有圖像數據或者 Error，並且它

43
00:01:28,066 --> 00:01:29,500
返回

44
00:01:29,500 --> 00:01:33,100
一個可以被取消的 Task

45
00:01:33,100 --> 00:01:36,400
就像我們為加載創建了用例一樣

46
00:01:36,400 --> 00:01:37,033
正在加載

47
00:01:37,033 --> 00:01:40,633
我們也為加載創建了用例

48
00:01:40,633 --> 00:01:41,433
正在加載

49
00:01:41,433 --> 00:01:46,233
圖像數據的第一個用例

50
00:01:46,233 --> 00:01:49,433
從遠程加載圖像數據，數據￼

51
00:01:49,433 --> 00:01:50,766
提供者給用例

52
00:01:50,766 --> 00:01:53,733
只是一個URL在樂觀的情况下，我們

53
00:01:53,733 --> 00:01:55,900
執行載入圖像數據的命令

54
00:01:55,900 --> 00:01:58,300
這是協議中的方法

55
00:01:58,300 --> 00:01:59,333
系統下載

56
00:01:59,333 --> 00:02:01,600
從URL獲取數據，驗證該

57
00:02:01,600 --> 00:02:02,933
下載的數據

58
00:02:02,933 --> 00:02:06,000
並提供圖像數據相當

59
00:02:06,000 --> 00:02:07,100
直接

60
00:02:07,100 --> 00:02:09,500
如果取消操作，系統應該不會

61
00:02:09,500 --> 00:02:10,300
提供

62
00:02:10,300 --> 00:02:12,300
任何結果，它不應該提供圖像

63
00:02:12,300 --> 00:02:13,333
數據

64
00:02:13,333 --> 00:02:17,266
當數據無效時，也不應該出現錯誤

65
00:02:17,266 --> 00:02:20,466
系統提供無效數據錯誤

66
00:02:20,466 --> 00:02:22,466
或者當沒有連接時，

67
00:02:22,466 --> 00:02:23,666
系統提供

68
00:02:23,666 --> 00:02:26,700
連接性錯誤確切的說

69
00:02:26,700 --> 00:02:28,233
讓我們看一下這個用例的實現

70
00:02:28,233 --> 00:02:30,800
好的，這個用例呢

71
00:02:30,800 --> 00:02:33,733
所以我們創建了一個新的DataLoader，

72
00:02:33,733 --> 00:02:35,500
這是RemoteFeedImageDataLoader

73
00:02:35,500 --> 00:02:38,533
類別，它遵從用例

74
00:02:38,533 --> 00:02:41,333
的抽象FeedImageDataLoader

75
00:02:41,333 --> 00:02:43,433
並且既然它是遠程組件

76
00:02:43,433 --> 00:02:46,700
那麼它應被分組到Feed API

77
00:02:46,700 --> 00:02:48,866
文件夾中，與其他遠程

78
00:02:48,866 --> 00:02:50,066
組件一起

79
00:02:50,066 --> 00:02:52,233
所以 RemoteFeedImageDataLoader 

80
00:02:52,233 --> 00:02:54,300
執行 HTTP 請求

81
00:02:54,300 --> 00:02:57,033
所以我們正在使用相同的HTTPClient

82
00:02:57,033 --> 00:02:59,433
我們在RemoteFeedLoader中使用的那一個

83
00:02:59,433 --> 00:03:01,666
確切地說，HTTPClient只是一個

84
00:03:01,666 --> 00:03:03,500
協議，現在已經在各處被重複使用

85
00:03:03,500 --> 00:03:04,400
組件

86
00:03:04,400 --> 00:03:06,000
FeedLoader和FeedImageData

87
00:03:06,000 --> 00:03:08,133
Loader，因為他們都進行GET

88
00:03:08,133 --> 00:03:09,833
請求

89
00:03:09,833 --> 00:03:11,433
所以現在加載的實現

90
00:03:11,433 --> 00:03:13,833
來自URL的ImageData命令

91
00:03:13,833 --> 00:03:16,233
非常簡單，我們創建一個可以被

92
00:03:16,233 --> 00:03:17,500
取消的工作

93
00:03:17,500 --> 00:03:20,800
我們開始對於

94
00:03:20,800 --> 00:03:21,833
URL的HTTP GET請求

95
00:03:21,833 --> 00:03:24,000
當我們獲得結果時，我們完成

96
00:03:24,000 --> 00:03:26,133
這個工作，不管是

97
00:03:26,133 --> 00:03:27,833
連接錯誤如果有一個

98
00:03:27,833 --> 00:03:30,133
錯誤，或者我們驗證

99
00:03:30,133 --> 00:03:32,400
應該沒有問題的反應，數據不能是空的

100
00:03:32,400 --> 00:03:34,066
如果驗證有效，我們成功完成

101
00:03:34,066 --> 00:03:36,400
帶有圖像數據

102
00:03:36,400 --> 00:03:37,733
或者帶有無效數據的失敗，就這樣

103
00:03:37,733 --> 00:03:40,633
而且那是

104
00:03:40,633 --> 00:03:41,200
它

105
00:03:41,200 --> 00:03:44,233
真棒，非常簡單的東西

106
00:03:44,233 --> 00:03:47,100
在下一個用例中，加載feed圖像

107
00:03:47,100 --> 00:03:48,400
來自快取的資料

108
00:03:48,400 --> 00:03:50,866
使用情境，你首先從一個

109
00:03:50,866 --> 00:03:51,500
URL開始

110
00:03:51,500 --> 00:03:54,533
來辨識快取中的物品

111
00:03:54,533 --> 00:03:57,100
我們會建立載入圖片資料的指令

112
00:03:57,100 --> 00:03:58,533
使用這個URL

113
00:03:58,533 --> 00:04:00,233
系統應該會提取該資料

114
00:04:00,233 --> 00:04:02,300
從快取中取出並傳遞

115
00:04:02,300 --> 00:04:05,833
給客戶端，如果客戶端取消了

116
00:04:05,833 --> 00:04:06,866
請求

117
00:04:06,866 --> 00:04:08,933
則使用情境應該不會提供任何

118
00:04:08,933 --> 00:04:11,033
結果，所以它不應該傳遞圖片

119
00:04:11,033 --> 00:04:11,900
資料或者

120
00:04:11,900 --> 00:04:14,866
任何錯誤，如果有取得錯誤的

121
00:04:14,866 --> 00:04:16,766
情況發生，我們會傳遞錯誤

122
00:04:16,766 --> 00:04:18,700
而如果快取是空的，那也算作一個

123
00:04:18,700 --> 00:04:20,700
悲哀的路徑，我們會傳送找不到

124
00:04:20,700 --> 00:04:23,600
錯誤的結果。好，讓我們看一下

125
00:04:23,600 --> 00:04:26,000
實作方面的

126
00:04:26,000 --> 00:04:29,033
所以LocalFeedImageDataLoader

127
00:04:29,033 --> 00:04:30,866
實作了FeedImageDataLoader

128
00:04:30,866 --> 00:04:32,133
這個抽象化的接口

129
00:04:32,133 --> 00:04:34,000
開始於一個Store，這是一個新的

130
00:04:34,000 --> 00:04:35,900
抽象化的接口

131
00:04:35,900 --> 00:04:38,133
在這裡你可以插入與給定的

132
00:04:38,133 --> 00:04:39,500
URL相關的資料

133
00:04:39,500 --> 00:04:45,833
你可以提取與給定的URL相關的資料

134
00:04:45,833 --> 00:04:48,866
所以 loadImageData 從 URL 命令

135
00:04:48,866 --> 00:04:52,233
將創建一個可以被取消的任務

136
00:04:52,233 --> 00:04:54,300
它會開始從

137
00:04:54,300 --> 00:04:55,500
存儲庫檢索數據

138
00:04:55,500 --> 00:04:57,733
當我們得到結果回退時，我們完成

139
00:04:57,733 --> 00:04:59,666
任務要么

140
00:04:59,666 --> 00:05:03,333
是 LoadError.failed 或者我們發現

141
00:05:03,333 --> 00:05:06,066
返回的數據我們以成功結束

142
00:05:06,066 --> 00:05:06,800
否則

143
00:05:06,800 --> 00:05:10,866
結果沒有找到，好的

144
00:05:10,866 --> 00:05:13,266
而且我們還實現了

145
00:05:13,266 --> 00:05:14,233
FeedImage

146
00:05:14,233 --> 00:05:17,433
DataStore 基礎設施與 Core

147
00:05:17,433 --> 00:05:18,133
Data

148
00:05:18,133 --> 00:05:21,433
實施，這非常簡單

149
00:05:21,433 --> 00:05:24,233
insert data for URL 執行

150
00:05:24,233 --> 00:05:24,933
此任務

151
00:05:24,933 --> 00:05:28,233
在背景上下文中，它只是

152
00:05:28,233 --> 00:05:28,933
找出

153
00:05:28,933 --> 00:05:31,100
與 URL 匹配的第一個 feed 圖像，

154
00:05:31,100 --> 00:05:32,000
URL

155
00:05:32,000 --> 00:05:34,800
如果找到它，則存儲帶有

156
00:05:34,800 --> 00:05:36,300
該圖像模型的數據

157
00:05:36,300 --> 00:05:41,033
並且儲存並檢索 URL 的數據

158
00:05:41,033 --> 00:05:44,133
只是嘗試找到 feed 圖像

159
00:05:44,133 --> 00:05:47,600
通過給定的 URL 並返回其數據

160
00:05:47,600 --> 00:05:50,133
那就是了所以我們增加了數據選項

161
00:05:50,133 --> 00:05:51,033
屬性

162
00:05:51,033 --> 00:05:53,266
僅僅對於Core Data模型因為

163
00:05:53,266 --> 00:05:55,500
這是我們存儲數據的一個細節

164
00:05:55,500 --> 00:05:56,400
這些數據

165
00:05:56,400 --> 00:05:59,433
通過Core Data實現

166
00:05:59,433 --> 00:06:02,700
因此FeedImage模型保持不變

167
00:06:02,700 --> 00:06:04,533
它不需要知道這個Core

168
00:06:04,533 --> 00:06:06,633
Data 實現的細節

169
00:06:06,633 --> 00:06:08,133
這就是為什麼它重要分離

170
00:06:08,133 --> 00:06:10,866
模型，因為每個模塊

171
00:06:10,866 --> 00:06:13,033
可能因不同的原因而改變這個

172
00:06:13,033 --> 00:06:14,700
Core Data模塊現在

173
00:06:14,700 --> 00:06:16,466
必須改變以適應這個新的

174
00:06:16,466 --> 00:06:18,533
要求，但其他模塊不需要

175
00:06:18,533 --> 00:06:19,600
知道它

176
00:06:19,600 --> 00:06:21,333
所以我們不需要重新編譯再部署

177
00:06:21,333 --> 00:06:23,666
所有模塊，因為這個變更

178
00:06:23,666 --> 00:06:26,633
確實，這一點非常重要好的

179
00:06:26,633 --> 00:06:28,000
讓我們來看一下依賴關係

180
00:06:28,000 --> 00:06:29,600
現在的圖表

181
00:06:29,600 --> 00:06:32,133
所以，在中間，我們有功能

182
00:06:32,133 --> 00:06:33,500
抽象

183
00:06:33,500 --> 00:06:36,000
FeedLoader協議與Remote

184
00:06:36,000 --> 00:06:37,666
FeedLoader的實現和Local

185
00:06:37,666 --> 00:06:39,900
FeedLoader的實現

186
00:06:39,900 --> 00:06:42,000
我們也移動了FeedImageData

187
00:06:42,000 --> 00:06:43,666
Loader的抽象

188
00:06:43,666 --> 00:06:46,866
該協定移到了這個Feed Feature模塊

189
00:06:46,866 --> 00:06:49,500
我們實現了RemoteFeedImageData

190
00:06:49,500 --> 00:06:50,866
Loader

191
00:06:50,866 --> 00:06:53,733
它與同一個HTTPClient

192
00:06:53,733 --> 00:06:54,866
抽象共享

193
00:06:54,866 --> 00:06:58,300
和RemoteFeedLoader一樣，我們也

194
00:06:58,300 --> 00:06:59,033
實現了

195
00:06:59,033 --> 00:07:01,900
一個LocalFeedImageDataLoader，他們也

196
00:07:01,900 --> 00:07:03,433
對話到一個抽象

197
00:07:03,433 --> 00:07:05,666
FeedImageDataStore是

198
00:07:05,666 --> 00:07:06,533
實現

199
00:07:06,533 --> 00:07:09,033
由CoreDataFeedStore實現，如你

200
00:07:09,033 --> 00:07:10,800
所見，CoreDataFeedStore

201
00:07:10,800 --> 00:07:13,500
類別實現了FeedStore和

202
00:07:13,500 --> 00:07:15,500
FeedImageDataStore

203
00:07:15,500 --> 00:07:17,333
所以和Feed API模組不同

204
00:07:17,333 --> 00:07:19,033
我們在這兩個組件間共享HTTPClient

205
00:07:19,033 --> 00:07:21,900
在高速緩存

206
00:07:21,900 --> 00:07:22,400
模塊裡

207
00:07:22,400 --> 00:07:25,166
我們並未分享同一個儲存庫

208
00:07:25,166 --> 00:07:27,033
因為它們完全不同

209
00:07:27,033 --> 00:07:29,166
介面，因為他們不共享

210
00:07:29,166 --> 00:07:30,800
相同的操作

211
00:07:30,800 --> 00:07:33,733
對，這就是ISP

212
00:07:33,733 --> 00:07:34,633
的典型範例

213
00:07:34,633 --> 00:07:37,166
介面隔離原則

214
00:07:37,166 --> 00:07:38,400
雖然

215
00:07:38,400 --> 00:07:41,166
兩組行為都與

216
00:07:41,166 --> 00:07:42,066
儲存

217
00:07:42,066 --> 00:07:45,266
資料到快取有關，但我們會將它們

218
00:07:45,266 --> 00:07:45,833
分開

219
00:07:45,833 --> 00:07:48,700
成為兩種協議，因為雖然

220
00:07:48,700 --> 00:07:49,166
我們

221
00:07:49,166 --> 00:07:52,300
在兩種情況下都儲存資料，但一種是我們

222
00:07:52,300 --> 00:07:53,100
儲存

223
00:07:53,100 --> 00:07:55,566
feed資料，另一種是我們

224
00:07:55,566 --> 00:07:57,100
儲存feed圖像

225
00:07:57,100 --> 00:08:01,100
資料，如我們在這裡所見，FeedStore

226
00:08:01,100 --> 00:08:04,000
使您能夠插入feed並附上

227
00:08:04,000 --> 00:08:05,733
時間戳

228
00:08:05,733 --> 00:08:08,300
檢索feed並且也能刪除

229
00:08:08,300 --> 00:08:09,500
已快取的feed

230
00:08:09,500 --> 00:08:11,833
這是一個專門為

231
00:08:11,833 --> 00:08:14,000
客戶端設計的界面

232
00:08:14,000 --> 00:08:16,233
並且FeedImageDataStore只

233
00:08:16,233 --> 00:08:17,733
暴露操作

234
00:08:17,733 --> 00:08:20,066
在這種情況下，使用案例所需的

235
00:08:20,066 --> 00:08:21,900
插入URL的資料

236
00:08:21,900 --> 00:08:24,300
並檢索URL的資料，我們不

237
00:08:24,300 --> 00:08:25,266
需要刪除

238
00:08:25,266 --> 00:08:28,633
例如，完全地基設施

239
00:08:28,633 --> 00:08:31,566
抽象化應該按照客戶的需求來

240
00:08:31,566 --> 00:08:32,533
設計

241
00:08:32,533 --> 00:08:36,000
需要，而在這種情況下，我們只想要

242
00:08:36,000 --> 00:08:36,533
插入

243
00:08:36,533 --> 00:08:39,566
並且檢索，就這樣

244
00:08:39,566 --> 00:08:41,566
如果未來我們需要刪除

245
00:08:41,566 --> 00:08:43,100
在用例中

246
00:08:43,100 --> 00:08:45,600
我們可能在此處添加一個刪除方法，但是

247
00:08:45,600 --> 00:08:46,700
只有在需要的時候

248
00:08:46,700 --> 00:08:49,600
根據客戶的需求，就是這樣，我們已經擁有了全部

249
00:08:49,600 --> 00:08:51,266
我們所需的實現

250
00:08:51,266 --> 00:08:54,366
現在該創建主要的iOS應用程式了

251
00:08:54,366 --> 00:08:57,033
好極了，讓我們開始吧

252
00:08:57,033 --> 00:08:59,033
以創建新項目開始

253
00:08:59,033 --> 00:09:02,000
讓我們選擇iOS單視圖應用程式

254
00:09:02,000 --> 00:09:03,900
模板

255
00:09:03,900 --> 00:09:07,266
我們把它稱為EssentialApp

256
00:09:07,266 --> 00:09:12,466
好的，就等那兒呢，我們不需要橫向的視圖

257
00:09:12,466 --> 00:09:14,633
運行並看看我們是否有個空的

258
00:09:14,633 --> 00:09:18,933
應用程式

259
00:09:18,933 --> 00:09:22,133
好的，這就是空的應用程式

260
00:09:22,133 --> 00:09:25,433
所以，讓我們提交

261
00:09:25,433 --> 00:09:29,200
增加空的EssentialApp項目

262
00:09:29,200 --> 00:09:32,633
就這樣，但是我們所有的模塊

263
00:09:32,633 --> 00:09:35,100
都在不同的項目中，所以我們需要

264
00:09:35,100 --> 00:09:35,666
結合

265
00:09:35,666 --> 00:09:39,433
這兩個項目合併成一個工作空間，對，

266
00:09:39,433 --> 00:09:42,700
所以EssentialApp將依賴於

267
00:09:42,700 --> 00:09:45,900
在其他模組上以及方式去實現他

268
00:09:45,900 --> 00:09:46,300
的

269
00:09:46,300 --> 00:09:49,433
做法就是將一個Xcode的專案拖曳到

270
00:09:49,433 --> 00:09:50,233
另一個

271
00:09:50,233 --> 00:09:52,133
所以在這個例子裡，我們將

272
00:09:52,133 --> 00:09:54,233
EssentialFeed專案

273
00:09:54,233 --> 00:09:57,266
拖曳到EssentialApp專案，然後

274
00:09:57,266 --> 00:09:58,533
Xcode會問你

275
00:09:58,533 --> 00:10:01,200
是否要創建新的workspace

276
00:10:01,200 --> 00:10:02,133
因為你不能增加

277
00:10:02,133 --> 00:10:04,466
專案到專案裡，但是你可以

278
00:10:04,466 --> 00:10:06,700
創建一個結合多個專案的workspace

279
00:10:06,700 --> 00:10:10,066
這就是它，正如你所看到的

280
00:10:10,066 --> 00:10:11,900
在同一個workspace裡，我們有

281
00:10:11,900 --> 00:10:14,233
EssentialFeed專案和

282
00:10:14,233 --> 00:10:15,266
EssentialApp

283
00:10:15,266 --> 00:10:18,866
專案。現在在EssentialApp專案中

284
00:10:18,866 --> 00:10:22,366
我們可以加入我們的模組作為內嵌框架

285
00:10:22,366 --> 00:10:25,033
所以我們需要加入

286
00:10:25,033 --> 00:10:26,133
EssentialFeed

287
00:10:26,133 --> 00:10:29,266
和EssentialFeediOS框架

288
00:10:29,266 --> 00:10:31,833
就這樣。現在從Essential

289
00:10:31,833 --> 00:10:33,733
App專案中，我們可以使用 

290
00:10:33,733 --> 00:10:36,366
EssentialFeed的組件。現在我們

291
00:10:36,366 --> 00:10:37,666
可以組成

292
00:10:37,666 --> 00:10:40,233
全部都可以去運行一個應用程序使用

293
00:10:40,233 --> 00:10:41,600
EssentialFeed

294
00:10:41,600 --> 00:10:45,033
太棒了，讓我們提交並開始組成

295
00:10:45,033 --> 00:10:47,200
我們的應用程序

296
00:10:47,200 --> 00:10:50,000
因此創建EssentialApp工作區

297
00:10:50,000 --> 00:10:51,033
結合

298
00:10:51,033 --> 00:10:53,833
EssentialApp和EssentialFeed

299
00:10:53,833 --> 00:10:55,100
項目

300
00:10:55,100 --> 00:10:58,300
就這樣，讓我們來組成

301
00:10:58,300 --> 00:11:01,200
將Feed組成進應用程序，所以我們需要

302
00:11:01,200 --> 00:11:02,233
導入

303
00:11:02,233 --> 00:11:05,433
EssentialFeed和Essential

304
00:11:05,433 --> 00:11:06,000
Feed

305
00:11:06,000 --> 00:11:09,433
iOS模塊，所以讓我們創建

306
00:11:09,433 --> 00:11:12,833
用FeedUI來創建FeedViewController 

307
00:11:12,833 --> 00:11:14,300
Composer

308
00:11:14,300 --> 00:11:16,533
並在這裡我們需要FeedLoader和一個

309
00:11:16,533 --> 00:11:19,333
ImageLoader

310
00:11:19,333 --> 00:11:21,900
所以ImageLoader我們將使用遠程的

311
00:11:21,900 --> 00:11:22,700
Feed

312
00:11:22,700 --> 00:11:25,200
ImageDataLoader，嗯，我們需要一個

313
00:11:25,200 --> 00:11:26,233
客戶端

314
00:11:26,233 --> 00:11:30,533
好的，FeedLoader是需要URL的遠程

315
00:11:30,533 --> 00:11:34,066
FeedLoader

316
00:11:34,066 --> 00:11:36,633
還需要一個客戶端，所以讓我們創建一個客戶端

317
00:11:36,633 --> 00:11:38,133
這是URL

318
00:11:38,133 --> 00:11:41,433
需要SessionHTTPClient的

319
00:11:41,433 --> 00:11:45,100
會話，讓我們創建一個會話

320
00:11:45,100 --> 00:11:48,066
那就是配置URLSession的

321
00:11:48,066 --> 00:11:49,100
構造。

322
00:11:49,100 --> 00:11:52,000
讓我們使用一個短暫的配置

323
00:11:52,000 --> 00:11:53,833
因為我們有自己的緩存策略

324
00:11:53,833 --> 00:11:57,266
太棒了，最後我們需要一個URL

325
00:11:57,266 --> 00:12:01,100
在我們的情況下，它是這個長URL

326
00:12:01,100 --> 00:12:02,933
好的，現在我們需要將其加入

327
00:12:02,933 --> 00:12:04,933
到屏幕上，所以讓我們加入它

328
00:12:04,933 --> 00:12:07,600
到窗口作為根視圖

329
00:12:07,600 --> 00:12:08,866
控制器

330
00:12:08,866 --> 00:12:12,933
現在讓我們執行

331
00:12:12,933 --> 00:12:17,666
爆炸吧，所以整個組合運作正常

332
00:12:17,666 --> 00:12:20,700
它加載資訊源和圖片

333
00:12:20,700 --> 00:12:24,233
當我們滾動時，它加載圖片

334
00:12:24,233 --> 00:12:27,200
並預取圖片，對的

335
00:12:27,200 --> 00:12:28,800
動畫也同樣運作正常

336
00:12:28,800 --> 00:12:32,700
這很棒，但我們只組成

337
00:12:32,700 --> 00:12:36,533
遠程方面的Feed API模塊

338
00:12:36,533 --> 00:12:39,433
與用戶界面完全符合，但我們

339
00:12:39,433 --> 00:12:40,466
站在另一邊

340
00:12:40,466 --> 00:12:42,933
我們也希望組成，所以如果

341
00:12:42,933 --> 00:12:44,233
網路連接失敗

342
00:12:44,233 --> 00:12:47,200
我們可以從緩存中加載數據

343
00:12:47,200 --> 00:12:49,433
當然，我們現在還不能這樣做

344
00:12:49,433 --> 00:12:51,733
因為我們需要一種新的類型來組合

345
00:12:51,733 --> 00:12:52,866
這兩種

346
00:12:52,866 --> 00:12:55,733
然後把這個組合注入到

347
00:12:55,733 --> 00:12:56,933
Feed UI

348
00:12:56,933 --> 00:12:59,333
確實，我們需要一個組件，

349
00:12:59,333 --> 00:13:00,233
來引用

350
00:13:00,233 --> 00:13:02,066
RemoteFeedLoader 和

351
00:13:02,066 --> 00:13:03,733
LocalFeedLoader 

352
00:13:03,733 --> 00:13:07,433
它包含了策略，何時使用

353
00:13:07,433 --> 00:13:10,700
遠程載入器，何時使用本地載入器

354
00:13:10,700 --> 00:13:12,366
對 FeedImage DataLoader 也是一樣的

355
00:13:12,366 --> 00:13:14,800
我們需要組合

356
00:13:14,800 --> 00:13:17,100
遠程載入器和本地載入器為一個

357
00:13:17,100 --> 00:13:18,300
新的類型

358
00:13:18,300 --> 00:13:20,800
配合策略來決定哪一種來

359
00:13:20,800 --> 00:13:21,500
使用

360
00:13:21,500 --> 00:13:24,800
視情況而定，因為我們有一個

361
00:13:24,800 --> 00:13:26,466
好的抽象階層

362
00:13:26,466 --> 00:13:28,933
在這些組件之間，我們可以增加這種

363
00:13:28,933 --> 00:13:30,300
行為，

364
00:13:30,300 --> 00:13:32,466
而不必改變遠程或本地的

365
00:13:32,466 --> 00:13:34,800
載入器

366
00:13:34,800 --> 00:13:37,200
我們可以用一個

367
00:13:37,200 --> 00:13:38,066
新的類型,

368
00:13:38,066 --> 00:13:40,000
來不同的組合他們，得到不同的行為，這就是

369
00:13:40,000 --> 00:13:41,100
開放封閉原則

370
00:13:41,100 --> 00:13:44,300
正確，這就是它的力量

371
00:13:44,300 --> 00:13:47,033
關於開放封閉原則，那就是這樣

372
00:13:47,033 --> 00:13:48,133
下一步

373
00:13:48,133 --> 00:13:50,866
是創建那些策略或者那些

374
00:13:50,866 --> 00:13:52,933
複合類型

375
00:13:52,933 --> 00:13:55,166
太好了，這將會是下個主題

376
00:13:55,166 --> 00:13:56,466
在下次的課程中

377
00:13:56,466 --> 00:13:59,666
我們下次再見，再見大家

378
00:13:59,666 --> 00:14:03,832
再見