

1
00:00:00,960 --> 00:00:06,880
大家好，歡迎來到工具系列的另一集。

2
00:00:08,240 --> 00:00:15,760
這次我們將研究建構設定檔，或者他們以擴展名稱為XC config。

3
00:00:15,760 --> 00:00:22,640
XC config 檔案可能是一種非常優雅的管理、重用，

4
00:00:22,640 --> 00:00:28,000
以及組成建構設定的方式，所以專門用一session來瞭解它是值得的。

5
00:00:28,000 --> 00:00:36,320
今天的計劃是解釋 XC config 檔案的機制，看看它相比於管理設置的標準方式，也就是建構

6
00:00:36,320 --> 00:00:41,680
設定編輯器，有什麼優缺點，理解何時應該選擇其中一種方式，

7
00:00:41,680 --> 00:00:50,320
解釋何時以及如何將所有的建構設置從Xcode項目移到單獨的XC config 檔案，

8
00:00:50,320 --> 00:00:57,440
並展示這個過程。

9
00:00:57,440 --> 00:01:05,120
實際應用中XC配置文件的效用。結束時我們將像往常一樣進行問答環節。

10
00:01:07,760 --> 00:01:15,680
首先，我們將對建構設定和其機制進行一次快速回顧。所以一種建構設定

11
00:01:16,240 --> 00:01:21,600
是您可以應用到您的Xcode項目以配置它們如何被建構的屬性。

12
00:01:21,600 --> 00:01:27,200
Xcode中有許多設定，而完整的清單可以在

13
00:01:27,200 --> 00:01:33,920
Apple Docs中找到。管理建構設定有兩種方式。一種是透過建構設定

14
00:01:33,920 --> 00:01:39,840
編輯器，這是我們在上一講中已經講過的，另一種是透過配置

15
00:01:40,720 --> 00:01:44,960
設定文件，也就是XC配置，這就是我們今天的主題。

16
00:01:44,960 --> 00:01:52,640
也回顧一下Xcode建構設定是如何解析的。所以在每次建構之前，系統必須解析所有的

17
00:01:52,640 --> 00:01:58,560
為每個建構的目標設定建構設定。建構設定是使用倒退的方式進行解析

18
00:01:58,560 --> 00:02:04,640
基於系統的方法，解析器由高到低尋找一個值，直到找到

19
00:02:04,640 --> 00:02:12,080
一個或以平台預設值結束。在你看到的圖形表示中，

20
00:02:12,080 --> 00:02:16,480
以及在Xcode建構設定標籤中，優先級從右到左增加。

21
00:02:18,480 --> 00:02:24,720
所以第一欄將是平台的預設值，如果沒有任何其他的明確設定，

22
00:02:24,720 --> 00:02:32,960
解析器將使用這些預設值。接下來是項目配置文件層級，

23
00:02:33,680 --> 00:02:39,760
這個只能覆寫平台的預設值，並被預設值覆寫。

24
00:02:39,760 --> 00:02:49,680
接著，如果目標設定遺失，則使用項目級設定。項目設定

25
00:02:49,680 --> 00:02:55,680
覆寫來自項目配置文件（如有）和平台預設的設定。下一步，如果

26
00:02:55,680 --> 00:03:01,680
我們有一個目標配置文件，這會覆蓋所有的專案級和平台級

27
00:03:01,680 --> 00:03:10,240
設定。最後，目標明確的設定覆蓋任何其他設定，因為他們具有最高的 

28
00:03:10,240 --> 00:03:17,680
優先順序。Xcode建構配置文件或XC config允許您的應用程式的建構設定能夠 

29
00:03:17,680 --> 00:03:25,840
根據與管理之間不需Xcode。他們是純文字檔案，這意味他們對於

30
00:03:25,840 --> 00:03:33,600
源碼控制系統更友好，並可以用任何編輯器修改。使用

31
00:03:33,600 --> 00:03:40,480
XC config檔案的一些優點包括更好的源碼控制管理，跨目標，

32
00:03:40,480 --> 00:03:47,760
組態或甚至專案的設定共享，建構設定組成以及包含額外

33
00:03:47,760 --> 00:03:55,760
基於環境的配置設定檔案。第二個是Xcode建構配置。

34
00:03:55,760 --> 00:04:01,840
讓我們來看看XC config檔案的運作機制。就如我們之前提到的，建立配置

35
00:04:01,840 --> 00:04:08,000
檔案是一種文本檔案，其有一個XC config的檔案名副檔名，您需要加入至您的項目中。

36
00:04:08,960 --> 00:04:14,000
您可以創建多個建立配置檔案，儲存並配置不同的

37
00:04:14,000 --> 00:04:20,240
設定在每一個檔案中。舉例來說，您可能為了偵錯設置而使用一個建立配置檔案，

38
00:04:20,240 --> 00:04:28,880
另一個則做為發布用途。要指定一個新值的形式，您需要使用

39
00:04:28,880 --> 00:04:37,280
設定名稱相等於設定值的形式。幻燈片底部您可以看到一個短篇的範例，

40
00:04:37,280 --> 00:04:46,960
這是一個設定了三個設定值的XC config檔案。我們在以前的講座提到過，

41
00:04:46,960 --> 00:04:52,160
但僅為了回顧，每個建立設定允許不同類型的值。

42
00:04:53,920 --> 00:05:02,640
可能的類型有boolean, String, String List, path或path List以及enumeration。

43
00:05:04,080 --> 00:05:09,200
在定義設置值時，我們可以參考其他設置，就像此案例一樣。

44
00:05:09,200 --> 00:05:18,160
為此，我們使用美元符號和括號來引用其他值。一個明確的例子是

45
00:05:18,160 --> 00:05:25,920
install path設置，該設置使用local library directory設置及其framework子文件夾。

46
00:05:28,880 --> 00:05:35,360
除此之外，所有設置都支持使用變量dollar inherited，該變量將解析為

47
00:05:35,360 --> 00:05:41,520
由較低優先級設定的任何值，包括平台默認值。要追加而不是替換現有定義，請使用dollar inherited變量，如這些例子所示。

48
00:05:41,520 --> 00:05:47,280
首先，我們有設置名稱等於dollar inherited，這意味著我們將獲取任何在較低優先級設定的值，

49
00:05:49,120 --> 00:05:55,760
以及我們想要附加的額外值。另一個例子

50
00:05:55,760 --> 00:06:04,000
如下面的例子。

51
00:06:04,000 --> 00:06:12,400
將是我們在每個層級上設定 dollar inherited，並將所有值組成一個整體

52
00:06:13,440 --> 00:06:21,440
實際上的例子是我們明確地設定框架的搜索路徑

53
00:06:21,920 --> 00:06:26,160
通過使用繼承值並添加我們的項目目錄。

54
00:06:26,160 --> 00:06:31,360
在引用值時，我們可以始終設定默認值，以防該引用不存在

55
00:06:31,360 --> 00:06:38,800
在這個例子中，我們也使用了最後一次我們傳遞一個額外的標記給Swift編譯器

56
00:06:38,800 --> 00:06:45,520
這將對花費太長時間來進行類型檢查的表達式發出警告。在這種情況下，我們已經設定

57
00:06:45,520 --> 00:06:52,480
200毫秒的預設值，但我們可以用簡單的條件來覆蓋它。

58
00:06:52,480 --> 00:06:58,240
200毫秒，但我們可以在例如 CI 的地方覆蓋它，那裡的構建速度較慢

59
00:06:59,280 --> 00:07:07,680
如果我們定義了最大表達式檢查時間設置。該設置只會存在


60
00:07:07,680 --> 00:07:13,680
在CI上，我們可以使用腳本生成它。

61
00:07:13,680 --> 00:07:21,600
也回顧了我們可以適用於數值的變換。可用的運算符包括字符串，

62
00:07:22,160 --> 00:07:32,320
操作符、路徑和替換操作符。在我們這裡的兩個例子中，首先我們對targetName應用C99X

63
00:07:32,320 --> 00:07:40,720
識別運算符，而在第二個例子中，我們又應用了C99X識別運算符。

64
00:07:40,720 --> 00:07:51,600
而在第二個例子中，我們又組合了多個運算符，所以對於產品名稱構建設置，

65
00:07:51,600 --> 00:07:56,960
我們應用Intel 1034識別運算符，並全部改為小寫。

66
00:08:02,000 --> 00:08:08,960
您可以根據其SDK架構和/或配置將建設設置條件化。

67
00:08:08,960 --> 00:08:16,160
根據以下語法。在幻燈片底部的例子中，

68
00:08:17,440 --> 00:08:25,440
我們針對調試配置，任何SDK和任何架構都設定了相同的設置。

69
00:08:26,640 --> 00:08:28,640
所以是一種組合。

70
00:08:28,640 --> 00:08:41,200
要理解組成是如何運作的，讓我們來看這個例子。首先，我們定義

71
00:08:42,560 --> 00:08:51,200
一個自訂的建構設定是啟用建構設定，並將其設為否。然後我們定義兩個值

72
00:08:51,200 --> 00:08:58,720
到其他的建構設定。我的建構設定否，它有一個使用這個一個值，和我的建構設定是

73
00:08:58,720 --> 00:09:10,400
使用用這個代替。然後我們可以為我的建構設定創建一個條件組成值

74
00:09:10,400 --> 00:09:20,480
在那裡我們提及到兩個建構設定。這個非常有趣, 因為建構設定是內到外地被評估

75
00:09:20,480 --> 00:09:28,640
所以這個表達式是怎麼被解析的。首先解析器會看到美金符號是

76
00:09:28,640 --> 00:09:37,760
建構設定是啟用，並使其評估為否。所以新的表達式會被轉換為美金符號

77
00:09:37,760 --> 00:09:45,840
將被轉換為美金符號我的建構設定否。再次評估這個表達式將會

78
00:09:45,840 --> 00:09:50,320
轉變成使用這個的價值。這可以非常有力。

79
00:09:56,160 --> 00:10:01,200
配置文件的另一個特點是包含其他配置文件。

80
00:10:01,200 --> 00:10:07,360
因為當你在Xcode中為目標或項目指定了構建配置文件後，你必須

81
00:10:07,360 --> 00:10:13,600
只選擇一個文件。但該文件可以使用

82
00:10:13,600 --> 00:10:21,120
語法來包含來自其他配置文件的設置。要導入來自不同配置文件的設置，添加一個hash include

83
00:10:21,120 --> 00:10:29,520
聲明，就像第一個一樣。所以我們只需要配置文件的路徑。但請記住

84
00:10:29,520 --> 00:10:36,640
如果Xcode找不到包含的構建配置文件，它將生成一個構建警告。所以為了

85
00:10:36,640 --> 00:10:44,160
壓制這些警告，我們可以在include語句旁邊添加一個問號，如下圖所示

86
00:10:44,160 --> 00:10:53,680
第二個範例。這將對我們剛剛展示的CI專用配置文件的範例有所幫助。

87
00:10:53,680 --> 00:11:01,600
配置文件的另一個特性是他們允許透過註解來包括筆記或任何其他資訊

88
00:11:01,600 --> 00:11:07,920
對你來說這些是相關的。在兩個正斜線前面指定你的註解在單一行。

89
00:11:08,560 --> 00:11:16,400
建置系統忽略那之後的所有事物。所以我們可以只有註解的行或

90
00:11:16,400 --> 00:11:39,040
我們可以內嵌一些註解。讓我們對Xcode建置設定編輯器做一個小比較

91
00:11:39,040 --> 00:11:48,160
對比這些XC配置文件。所以預設Xcode會將所有建置設定儲存在

92
00:11:48,160 --> 00:11:56,320
Xcode proj PBX proj文件中，同時參考到檔案框架、建置階段和其他設定。

93
00:11:57,120 --> 00:12:05,600
我們在以前的一集中看過這個。這個setUp是由Xcode自動完成的，並且很容易

94
00:12:05,600 --> 00:12:12,000
使用。這並不容易理解，但大多數開發者對Xcode構建

95
00:12:12,000 --> 00:12:19,040
設定編輯器是非常熟悉的，所以這並不是問題。Xcode將設定存放在專案文件的方式

96
00:12:19,040 --> 00:12:25,200
導致了設定的重複，這點我們也通過保留一個單獨的設定組來證實。

97
00:12:25,200 --> 00:12:33,600
每種專案和配置以及目標和配置的組合都有一組設定。對於很多專案

98
00:12:33,600 --> 00:12:39,760
特別是小型的，這並不構成問題，因為Xcode內置的構建設定編輯器就足夠了。

99
00:12:39,760 --> 00:12:47,040
對於音頻操作來說。如果團隊不大，衝突將偶爾發生

100
00:12:47,040 --> 00:12:55,760
而且相對容易解決。查看專案文件的diff並且尤其是尋找

101
00:12:55,760 --> 00:13:03,920
這些改變建置設定略為困難。只看異動時並不清楚

102
00:13:03,920 --> 00:13:09,680
每個設定受到影響的程度，這是因為在

103
00:13:09,680 --> 00:13:17,920
項目檔案中所有設定的組別看起來一樣。對於不完全了解建置設定的

104
00:13:17,920 --> 00:13:24,320
方式和如何管理它們的開發者來說，由Xcode預先設定的默認值是非常合適的，

105
00:13:24,320 --> 00:13:29,200
這足夠並且讓他們專注於寫代碼和快速交付產品。

106
00:13:31,680 --> 00:13:37,120
我們總是建議您從最容易且最直接的方法開始著手。

107
00:13:38,320 --> 00:13:44,400
在這種情況下，這意味著在Xcode中保留您的設定，使用建置設定編輯器進行管理。

108
00:13:45,280 --> 00:13:47,520
這應該是您的預設方式。

109
00:13:47,520 --> 00:13:52,800
對於大型團隊，每個開發者都可能會在每次PR時編輯項目檔案。


110
00:13:53,520 --> 00:13:58,560
維護所有這些變更以及對專案文件所暗示的衝突可能會變得

111
00:13:58,560 --> 00:14:05,520
具有負面影響並減慢開發週期。在大型專案文件上進行此項查看以及

112
00:14:05,520 --> 00:14:10,480
注意到位於文件末尾的建立設定的變更可能相當困難。

113
00:14:10,480 --> 00:14:16,640
這就是 exe 設定文件顯得有用的地方，由於它們僅為普通文本文件，因此易於

114
00:14:16,640 --> 00:14:23,440
撰寫和維護。您可以按照自己想要的方式以分散的方式組織它們，並在

115
00:14:23,440 --> 00:14:30,720
配置目標、專案或事件存儲庫之間分享。由於它們只包含建立設定，

116
00:14:30,720 --> 00:14:37,520
因此查看變更要簡單得多。追蹤到特定專案文件的變更變得容易得多。

117
00:14:37,520 --> 00:14:41,840
追蹤到特定設定隨時間變化也相當容易執行。

118
00:14:42,960 --> 00:14:50,240
所以要理解基於exe配置文件或存儲在

119
00:14:50,240 --> 00:14:59,280
專案文件中的設定並不容易。雖然使用exe配置文件不能保證你避免設置的重複

120
00:14:59,280 --> 00:15:05,680
我們稍後會在例子中展示。這需要是一個刻意的方案讓你

121
00:15:05,680 --> 00:15:13,360
刪除這種重複。同樣，如果你需要訪問更進階的情境，如條件性的

122
00:15:13,360 --> 00:15:19,280
構建設定的值，值的組成或只是避免這種重複並有

123
00:15:19,280 --> 00:15:26,000
在專案配置文件的基礎設施中明確區分關注點，那麼配置文件就是一個被

124
00:15:26,000 --> 00:15:40,240
考慮的解決方案。這結束了理論部分，我現在想做一些快速示範。

125
00:15:40,960 --> 00:15:43,360
來顯示我們如何與配置文件一起工作。

126
00:15:43,360 --> 00:15:53,920
讓我們開始與我們的EssentialFeed演示專案一起工作。

127
00:15:59,280 --> 00:16:06,320
首先，我要檢查建置設定。所以我將選取

128
00:16:06,320 --> 00:16:15,520
在EssentialFeed專案中的所有目標，我想要看一下Swift語言版本

129
00:16:16,560 --> 00:16:25,120
的設定。我們可以看到所有的目標都使用相同的值。

130
00:16:27,680 --> 00:16:30,880
同樣地，如果我們看一下開發團隊

131
00:16:30,880 --> 00:16:45,120
的設定，我們也可以看到相同的vrj2值。所以對於這第一個示範，我希望移除

132
00:16:45,120 --> 00:16:57,280
這個重複性，並將這些設定移到中央的exe config檔案。讓我們看看我們怎麼

133
00:16:57,280 --> 00:17:12,800
可以做到。首先在EssentialFeed專案中我將加入一個新檔案，有一個

134
00:17:12,800 --> 00:17:21,120
配置設定檔案範本我將使用。我會把它命名為shared，因為我

135
00:17:21,120 --> 00:17:34,880
我想保留的共享設定，並將它放在我倉庫的根部。一個重要的提示

136
00:17:34,880 --> 00:17:40,480
這裡是我不會將其包含在任何目標中，因為這意味著嵌入 File

137
00:17:40,480 --> 00:17:45,360
和 exe 配置檔案不需要嵌入到目標中。他們只需要在

138
00:17:45,360 --> 00:17:56,800
項目內部能見到，這樣 Xcode 就可以看見他們並存取他們。我進行創建。

139
00:18:03,600 --> 00:18:13,040
我已經準備好我將需要的兩個設定值。所以現在我想要設定他們。

140
00:18:13,040 --> 00:18:24,960
我將前往這個項目，然後在編輯器層級同樣選擇項目並使用資訊標籤。

141
00:18:25,920 --> 00:18:36,880
在這裡我們有一個名為配置的區塊。如果我打開它，我看到我可以為每個


142
00:18:36,880 --> 00:18:46,000
項目和每個目標都設置了一組，有一組是用於調試配置，另一組是用於發布。

143
00:18:46,000 --> 00:18:54,400
當然，任何其他配置我也可能有。在這種情況下，我將設置共享的文件

144
00:18:54,400 --> 00:19:01,600
我剛在項目級別創建，因為我希望所有目標都使用這個。所以我會選擇該

145
00:19:01,600 --> 00:19:10,000
對於調試配置和發布，我都會選擇共享文件。此設置將擴散到各個目標，

146
00:19:10,000 --> 00:19:18,640
正如我所說。現在讓我們來看看我的目標的構建設置編輯器，在這裡是

147
00:19:18,640 --> 00:19:29,920
EssentialFeed。我們立即注意到有一個新的選項卡，那就是我剛添加的配置文件。

148
00:19:29,920 --> 00:19:42,880
尋找我的Swift語言版本，我可以看到配置文件的值是Swift 5，以及


149
00:19:42,880 --> 00:19:50,560
我的目標的覆蓋的明確設置也是 Swift 5。

150
00:19:50,560 --> 00:20:03,520
因此我將選擇所有我的目標，並使用刪除鍵刪除來自

151
00:20:03,520 --> 00:20:13,520
項目級別，目標級別的所有明確設置。但我馬上看到所有的值仍然是

152
00:20:13,520 --> 00:20:21,360
Swift 5.0。只是他們不再加粗了。所以這意味著他們不是在目標上明確設定的

153
00:20:21,360 --> 00:20:28,560
級別。並且查看一個目標，我可以看到這個值是來自

154
00:20:28,560 --> 00:20:41,200
我剛剛設定的配置文件。讓我們看看開發團隊的設定。

155
00:20:41,200 --> 00:20:50,160
我們將注意到一個相似的情況，那就是配置文件和目標的值是相同的

156
00:20:50,160 --> 00:20:59,760
相同。所以我會選擇所有的目標，點擊刪除，並再次檢查確認。我可以看到

157
00:20:59,760 --> 00:21:06,960
結果值仍然是來自配置文件的VRJ。

158
00:21:06,960 --> 00:21:15,120
也就是說這次它來自配置文件。這就是我想要的。我甚至可以

159
00:21:18,400 --> 00:21:26,000
建立一個檢查，以確保我沒有破壞任何東西。然後讓我們提交。

160
00:21:26,000 --> 00:21:35,520
如果我們看看變更部分，會看到我們剛剛添加的文件，群組的參照，

161
00:21:38,880 --> 00:21:47,360
每個在Xcode中設置的配置的參照。所以現在專案調試參考到這個

162
00:21:47,360 --> 00:21:58,880
值。專案釋出集也是如此。現在我們看到開發團隊也有對應的


163
00:21:58,880 --> 00:22:06,560
套件版本的設定已消失或被每個目標明確設定中刪除。

164
00:22:06,560 --> 00:22:18,080
我們有許多這樣的因為Xcode實際上為每個目標儲存一組設定。由於我們

165
00:22:18,080 --> 00:22:25,840
有五個目標和兩個配置，這就是我們實際上刪除的十個字典

166
00:22:25,840 --> 00:22:34,880
那兩個鍵值。我們可以看到目標仍然相同。我們可以看到

167
00:22:34,880 --> 00:22:49,040
目標是相同的。我們甚至可以引用我們從EssentialApp目標創建的文件

168
00:22:49,040 --> 00:23:03,200
通過拖放文件。我也將取消選中目標，所以文件不會被打包。

169
00:23:05,200 --> 00:23:10,640
我將會做同樣的練習。所以我會這次去EssentialApp的信息，

170
00:23:10,640 --> 00:23:19,760
並為我的專案調試和發布配置文件都使用我的共享文件。

171
00:23:23,760 --> 00:23:29,760
我將使用建置設定檢視器來查看Swift語言。

172
00:23:29,760 --> 00:23:45,600
刪除。仍然是3.5。我們很好。測試目標也一樣。

173
00:23:45,600 --> 00:24:01,600
刪除。開發團隊。和測試目標。並且數值仍然是

174
00:24:03,280 --> 00:24:10,800
如他們應該的。我進行了建置。一切看起來都很好。所以我將提交。而且差異

175
00:24:10,800 --> 00:24:22,320
看起來與我們之前的提交非常相似，當時File被添加到了項目中。

176
00:24:23,520 --> 00:24:30,480
我們得到了引用。而且所有的明確設定都已被移除。

177
00:24:30,480 --> 00:24:37,840
且請注意，由於我們使用的是同一個，所以沒有新的XC配置文件。

178
00:24:39,040 --> 00:24:47,040
從兩個項目中參考。這是我想走過的第一個例子。第二個例子

179
00:24:47,040 --> 00:24:56,720
將會繼續。所以我們在其中一次的講座中完成了一個理論實例，我將

180
00:24:56,720 --> 00:25:02,960
立即將其實踐。這是我們的端點環境不同的情況，

181
00:25:02,960 --> 00:25:09,040
比如說分為測試和生產兩種。我們希望使用用戶定義的構建設定來

182
00:25:09,040 --> 00:25:16,960
解決這些端點。所以我將使用我已經設定好的共享設定文件。

183
00:25:16,960 --> 00:25:29,680
而且我將預先填充一個我稱之為API Domain的構建設定。這利用了我

184
00:25:29,680 --> 00:25:38,240
在幻燈片中使用的條件語法。對於除錯配置，我們將其值設定為

185
00:25:38,240 --> 00:25:47,280
API.staging.example.com。對於發布，我們將其設為API.example.com。

186
00:25:49,520 --> 00:25:58,080
為了確保我們使用正確的語法，請前往其中一個項目，建立設定編輯器，

187
00:25:58,080 --> 00:26:08,720
並檢查UserDefinedSettings，該處顯示我的API Domain設定。我可以看到它具有

188
00:26:08,720 --> 00:26:17,360
對於debug和release配置，都有不同的值。所以我們好了。讀取這些

189
00:26:17,360 --> 00:26:28,080
從exe配置文件中讀取到程式碼的值並不那麼容易，但有一種不錯的方式可以做到，

190
00:26:28,080 --> 00:26:36,320
那就是通過Info.plist File。這是因為Info.plist File實際上在編譯

191
00:26:37,200 --> 00:26:44,880
在建立設定被解析後。所以這是一種不錯的方式。現在，讓我們看看

192
00:26:44,880 --> 00:26:51,840
建立設定被解析。所以這就是為什麼我們可以有所有這些建立設定，如美元。


193
00:26:51,840 --> 00:27:01,680
產品名稱設置為 Bundle 名稱和更多。所以我將在這裡添加一個新的設置，我會

194
00:27:01,680 --> 00:27:17,200
把它命名為 API 基礎 URL。我將將值設置為 HTTPS 美元 API 領域。其中的

195
00:27:17,200 --> 00:27:27,520
一個原因是，由於 HTTP 協議需要使用斜線，在配置文件中

196
00:27:27,520 --> 00:27:35,200
可能需要進行一些轉義，我想避免這一點。現在，這個謎底的最後一塊

197
00:27:35,200 --> 00:27:44,640
就是從 Info.plist 中讀取這些值，在代碼中讀取這個值。所以我會去我的

198
00:27:44,640 --> 00:28:04,160
SceneDelegate，並嘗試讀取並打印出該值。在應用程序中，我看到的第一行是

199
00:28:04,160 --> 00:28:13,200
控制台中的 URL 是 HTTP API staging。這是因為我的項目使用的是 debug


200
00:28:13,200 --> 00:28:31,200
配置執行動作。我將停止。並為了讓項目返回乾淨的狀態，

201
00:28:31,200 --> 00:28:42,080
我將復原我們所做的一切，因為在下一個範例中，我想讓我們一起經歷

202
00:28:43,280 --> 00:28:50,320
從Xcode項目移動所有設定到設定檔案的練習，而我不想要

203
00:28:51,680 --> 00:29:00,880
干擾。我在聊天框中看到一個問題，讓我看看。Seba說，我在想我們是否想要

204
00:29:00,880 --> 00:29:07,040
有其他的配置，像是測試，用戶驗證測試（UAT），等等。Swift Package manager在

205
00:29:07,600 --> 00:29:12,960
除了預設的debug和release外，有其他項目配置時不會運作。對，這是一個已知的問題

206
00:29:14,000 --> 00:29:21,840
對於Swift Package manager。這也是我們所推薦的，因此你不需要建立額外的配置。

207
00:29:21,840 --> 00:29:28,800
除非你真的需要，否則它只會使你的項目設置變得更複雜。所以，

208
00:29:28,800 --> 00:29:35,840
如果你需要不同的構建設置，我剛剛向你展示了如何使用配置文件來實現

209
00:29:35,840 --> 00:29:45,760
此、或者你可以查看其他選項，如複製目標，

210
00:29:45,760 --> 00:29:53,840
這也不是最好的解決方案，但實際情況取決於你的用途。是的，那個

211
00:29:53,840 --> 00:30:00,960
是一個很好的例子，所以這是避免額外配置的另一個原因。

212
00:30:08,320 --> 00:30:16,320
所以，回到我們的項目。一切都回復到原來的狀態。

213
00:30:16,320 --> 00:30:21,360
所以，讓我們看一下提取這些設置的過程會是什麼樣。

214
00:30:23,280 --> 00:30:29,920
我將使用一個開源工具，名稱叫做 build setting extractor，

215
00:30:33,120 --> 00:30:40,160
這個開源專案所做的是允許你拖曳一個Xcode專案

216
00:30:40,160 --> 00:30:49,360
到它裡面，然後它將提取所有設定成分開的XC config檔案。

217
00:30:51,600 --> 00:31:01,840
所以，我將拖曳我的EssentialFeed Xcode專案，然後我需要選擇一個資料夾，所以我選擇了

218
00:31:01,840 --> 00:31:11,600
EssentialFeed 資料夾，然後我可以看到它立即創建了一個XC config資料夾和一堆檔案

219
00:31:11,600 --> 00:31:22,240
在裡面，我們一會兒會看一下。我也將對EssentialApp做同樣的事

220
00:31:22,240 --> 00:31:34,080
專案，它也生成了XC config資料夾。非常有用的工具。所以，使用Finder，

221
00:31:36,640 --> 00:31:43,600
我想探索這個資料夾的內容，起初可能會非常複雜，但其實是

222
00:31:43,600 --> 00:31:52,240
使用 Finder。我想探索這個文件夾的內容，一開始可能會顯得有些困難。

223
00:31:54,880 --> 00:32:02,400
首先，我們注意到我們有一些專案文件，然後每一個

224
00:32:02,400 --> 00:32:06,880
我們的目標都有一些文件的名稱。由於我們有五個目標，每個目標都有一組文件。

225
00:32:06,880 --> 00:32:16,720
專案文件有一個用於debug，一個用於release，還有一個shared。shared文件包含

226
00:32:16,720 --> 00:32:23,520
所有適用於debug和release的設定。debug和release文件包含了

227
00:32:23,520 --> 00:32:30,720
只適用於該配置的設定，並且這適用於專案級別的

228
00:32:30,720 --> 00:32:38,000
三個專案文件，然後適用於每個目標。所以，這就是我們每個目標都有三個文件的原因。

229
00:32:38,000 --> 00:32:44,480
我們的目標和一個項目。我們稍後會查看這些文件。現在，讓我們

230
00:32:45,520 --> 00:32:52,320
假設他們包含了我們在Xcode項目中有的完全相同的設置，我們將驗證這一點。

231
00:32:52,320 --> 00:33:03,040
讓我們看看我們如何使用這些文件。首先，我們需要將它們添加到項目中。我將會

232
00:33:03,920 --> 00:33:13,360
將XC配置文件夾從EssentialFeed文件夾拖放到我的EssentialFeed項目中。

233
00:33:13,360 --> 00:33:20,560
我將取消選擇目標，因為跟以前一樣，我不希望有任何文件被添加到項目中。

234
00:33:20,560 --> 00:33:29,360
我不希望有任何文件被打包，然後我會點擊完成。這種方法的問題是，我正在

235
00:33:29,360 --> 00:33:38,160
我確定你們已經看到這個，我按照隨機順序獲取我剛剛添加的所有文件，我不喜歡這樣。

236
00:33:38,880 --> 00:33:46,000
所以，我將選擇所有的文件，點擊刪除以移除參考，然後去我的

237
00:33:46,000 --> 00:33:56,080
Finder，並選擇所有有序的文件，然後將它們拖回來。同樣的，我將取消選中目標

238
00:33:56,080 --> 00:34:05,840
然後點擊完成。現在，如果你在意這個，我有所有的文件都按照正確的順序。

239
00:34:05,840 --> 00:34:14,400
現在讓我們實際開始使用它們。所以，我會去我的EssentialFeed項目，項目層面的資訊，

240
00:34:14,400 --> 00:34:24,560
我希望設定這些配置。首先，我們在項目層面來設定。所以，

241
00:34:24,560 --> 00:34:35,280
我將選擇我的專案等級檔案，並使用專案偵錯作為偵錯配置，

242
00:34:35,280 --> 00:34:44,400
以及專案釋出作為釋出配置。現在，讓我們檢查一下專案的建置設定

243
00:34:44,400 --> 00:34:51,440
等級，因為這是我們剛剛改變的部分。同樣地，我們看見了配置檔案的額外欄位，

244
00:34:51,440 --> 00:34:59,120
我可以使用這個客製化的篩選器，它只會給我看到當前等級明確的設定，

245
00:34:59,120 --> 00:35:05,120
所以，我的當前等級為「專案」，那麼我就會看到所有專案等級

246
00:35:05,120 --> 00:35:12,080
的明確設定。讓我們比較一下EssentialFeed專案與

247
00:35:12,080 --> 00:35:20,080
我的導入檔案的明確設定。所以，我將選取所有的檔案，並選取所有的檔案，

248
00:35:20,080 --> 00:35:27,040
匯入的File。如果我們快速看一下，我們會發現他們是一樣的。

249
00:35:30,720 --> 00:35:38,720
這就是我們如果有可能出現問題，我們會在此階段幫這些檔案檢查，但我看起來沒有問題。

250
00:35:40,320 --> 00:35:48,560
所以，接下來我要做的是按 command A 選擇所有自訂的設定，然後按下

251
00:35:48,560 --> 00:35:58,080
刪除。這將刪除我 Xcode 項目中所有自定義設定。

252
00:36:02,720 --> 00:36:15,840
在我們提交之前，我們再看一次差異。所以，第一部分，我們有所有新添加的設定

253
00:36:15,840 --> 00:36:29,840
文件，然後是 exe 設定組，當然還有其文件。然後在底部，

254
00:36:29,840 --> 00:36:37,680
在我們有所有設定的地方，我們看到的並不是像我們過去那樣的設定列表。

255
00:36:37,680 --> 00:36:45,200
對於每個項目的debug和release配置，它們已經被替換成我剛剛選擇的

256
00:36:45,200 --> 00:36:54,240
基礎配置參考到文件。所以，所有這些設置現在都已經從

257
00:36:54,240 --> 00:37:14,960
項目文件中消失了。我想要提交變更。讓我們也設定每一個目標的配置

258
00:37:14,960 --> 00:37:20,960
文件，因為它們有自己的一些明確設定。所以，

259
00:37:23,360 --> 00:37:31,360
對於這一點，你需要耐心等待。我們將選擇每一個目標及其對應的

260
00:37:31,360 --> 00:37:35,760
配置文件。首先，我看的是debug配置。所以，

261
00:37:35,760 --> 00:37:44,560
我有EssentialFeed debug，還有EssentialFeedTests debug，以及EssentialFeedAPI end-to-end Tests

262
00:37:44,560 --> 00:37:52,640
debug，EssentialFeedCacheIntegration test debug，EssentialFeed iOS debug，以及EssentialFeed


263
00:37:52,640 --> 00:38:09,840
iOS 測試調試。我將迅速為發布版本做同樣的事。注意，我們並未包含

264
00:38:09,840 --> 00:38:24,720
共享檔案，因為該檔案已在調試和發布檔案中都被導入。

265
00:38:24,720 --> 00:38:35,920
完成。現在，讓我們檢查我的目標，即首先是 EssentialFeed 的構建設置。再次，

266
00:38:35,920 --> 00:38:42,240
我將使用自定義差異級。如果我們看看這裡的所有標籤，我們可以看到項目

267
00:38:42,240 --> 00:38:54,320
級的設置和目標級配置檔案都有。如果我們快速看一下這兩列，

268
00:38:54,320 --> 00:39:04,080
我們可以看到它們具有相同的值。所以，我們的導入成功了。再次，我將選擇所有的

269
00:39:04,080 --> 00:39:19,520
設置並按刪除。我會對所有目標做這件事。再次，這是你需要注意的地方。

270
00:39:19,520 --> 00:39:25,600
需要非常小心，並確保您從配置文件獲得的數值

271
00:39:25,600 --> 00:39:48,000
與您在Xcode中明確設定的數值完全相同。好的，我將進行構建。

272
00:39:48,000 --> 00:39:58,480
一切都好。所以，我會看看差異情況。

273
00:40:02,320 --> 00:40:05,920
由於我們在前次提交中已經導入了文件，所以沒有

274
00:40:07,280 --> 00:40:13,360
這個文件開頭的變動。所以，只有明確設置被我們剛剛增加的

275
00:40:13,360 --> 00:40:20,720
配置所取代。如您所記，這種XC構建配置設置的結構

276
00:40:20,720 --> 00:40:30,320
首先是項目，於是有項目调试，項目发布，然後就是每个目標。所以，我們看到那個

277
00:40:30,320 --> 00:40:38,640
每個目標都有一個設置，用於基本配置參考其中的一個XC配置。然後所有的

278
00:40:38,640 --> 00:40:48,880
右邊的設置已經不見了。我們剛剛從我們的專案檔案中刪去了200行。

279
00:40:48,880 --> 00:41:05,920
我也會提交這個。我們來快速對EssentialApp做同樣的練習。

280
00:41:05,920 --> 00:41:17,840
那麼，首先，到finder，拖曳xcconfig檔案夾。但由於順序錯誤，

281
00:41:17,840 --> 00:41:27,840
我將移除參照並重新加入。 再次確保我們沒有嵌入它們。

282
00:41:27,840 --> 00:41:31,280
這並不是問題。所以，如果它們被嵌入，它們只是

283
00:41:31,280 --> 00:41:36,320
在你的app Bundle裡的額外檔案。沒關係。但是它們不應該在那裡，特別是因為它們是

284
00:41:36,320 --> 00:41:56,480
純文字檔。這次，我會只做一次操作。所以，為了设置我的config檔案給此專案。

285
00:41:56,480 --> 00:42:02,640
調試。我將使用專案調試。至於專案發布，我將使用專案發布。然後對於

286
00:42:02,640 --> 00:42:10,720
EssentialApp目標，我將使用EssentialApp debug。EssentialApp測試調試。EssentialApp

287
00:42:10,720 --> 00:42:18,720
發布。EssentialApp測試發布。然後那就是配置。現在，我們將檢查構建

288
00:42:18,720 --> 00:42:26,640
如前所述的設置。因此，自定製。首先，對於專案層面，我們比較兩列。

289
00:42:28,560 --> 00:42:42,400
我看不出有什麼差別。我會做指令A並刪除。 然後，在專案，在目標層面，

290
00:42:42,400 --> 00:42:48,800
我也將檢查這兩列。所以，目標和目標的配置文件。

291
00:42:49,600 --> 00:42:58,000
確保它們是相同的。我認為它們是。所以，再次，command A，delete。至於測試目標

292
00:43:01,840 --> 00:43:08,320
也是一樣。進行一個構建。然後，對於測試目標，我將進行一個構建。

293
00:43:08,320 --> 00:43:17,040
也一樣。進行一個構建。仍然成功。這不能保證因為我還沒有構建全部的

294
00:43:17,040 --> 00:43:28,000
情景，但至少第一次構建看起來不錯。所以，我們來看一下差異。

295
00:43:28,000 --> 00:43:38,720
再次，我們有添加的配置文件的部分。新的exe配置組及其文件。

296
00:43:42,240 --> 00:43:51,120
所有設置都已被刪除。第一兩個是項目設置。所以，該項目

297
00:43:51,120 --> 00:44:02,720
進行除錯與項目發布。然後，設置EssentialApp的一組設置。這就是EssentialApp

298
00:44:02,720 --> 00:44:14,560
的測試目標。然後我將提交。

299
00:44:14,560 --> 00:44:25,120
然後我將提交。我們已經成功地將所有設定從匯出的項目文件中移到了

300
00:44:25,120 --> 00:44:34,880
指定的exe配置文件中。但我們並未編輯任何內容，我們只是從一端複製了數值到另一端

301
00:44:34,880 --> 00:44:42,720
我現在想快速看看我們剛剛生成的文件，看看我們是否可以做出更進一步的改善。我將使用EssentialFeed項目中的文件，因為他們

302
00:44:42,720 --> 00:44:50,800
更多。所以，EssentialFeed的除錯（這是EssentialFeed目標的文件）

303
00:44:50,800 --> 00:44:59,360
除錯配置，只有一個設置，也就是Swift優化級別設為無。

304
00:44:59,360 --> 00:45:06,720
除此之外，它沒有任何其他設置。

305
00:45:06,720 --> 00:45:13,680
此外，我們看到包含了EssentialFeed共享的部分。若我們打開該檔案，會看到一堆

306
00:45:13,680 --> 00:45:24,560
的設定是專門為我的目標設定的。如果你看release的檔案，我們會看到檔案是

307
00:45:24,560 --> 00:45:34,880
空的。這將是我們這裡許多檔案的情況。但由於我們希望未來能夠

308
00:45:34,880 --> 00:45:42,560
輕鬆添加設定至目標，所以我們不會刪除這些檔案。

309
00:45:49,440 --> 00:45:56,640
如果我們查看EssentialFeed共享和所有其他共享的檔案，我們會看到

310
00:45:56,640 --> 00:46:03,840
之前的例子都使用了Swift版本5.0。

311
00:46:08,240 --> 00:46:11,840
所以，這告訴我還有重複的地方。

312
00:46:14,160 --> 00:46:17,840
更甚者，如果我們看看來自EssentialApp的目標，

313
00:46:17,840 --> 00:46:27,680
我們可以看到他們也使用 Swift version 5.0。所以好的，讓我們去除這個重複項。

314
00:46:29,040 --> 00:46:35,760
這就是 XC config 文件有用處的地方，因為我們可以從任何路徑導入一個文件，一個配置文件，

315
00:46:35,760 --> 00:46:46,480
從任何路徑處。因此，由於我希望在這兩個項目之間分享，我會前往finder

316
00:46:46,480 --> 00:46:53,520
前往finder，並在我的存儲庫根目錄下建立一個 XC config 文件夾。所以，

317
00:46:55,280 --> 00:47:01,760
而不是在我的項目文件夾之一內建立它，我會在外面建立它。

318
00:47:01,760 --> 00:47:21,200
我會拖動它，你可以看到，它與我其他的項目在同一級別。

319
00:47:21,200 --> 00:47:33,120
在裡面，我會創建一個配置文件，我將其命名為Shared。

320
00:47:37,120 --> 00:47:44,640
而且由於這個組別不屬於任何項目，所以檔案並未被添加到

321
00:47:44,640 --> 00:47:54,880
任何的目標中。由於我說我想要將我的Swift版本移到此檔案，

322
00:47:54,880 --> 00:48:05,120
我會在這裡貼上設定的名稱和值。現在讓我們刪除所有其他的定義

323
00:48:05,120 --> 00:48:14,880
這個Swift版本。所以，我進行了指令移位F開啟在所有檔案中找尋並貼上了這個

324
00:48:14,880 --> 00:48:27,360
Swift版本設定，我將前往每一個並移除它。所以，目標，那些都是

325
00:48:27,360 --> 00:48:38,240
都是目標共享配置，我將確保我導入

326
00:48:43,040 --> 00:48:45,360
我的新Swift版本設定

327
00:48:48,400 --> 00:48:55,200
在我的項目共享中，這將將它們傳遞到所有的目標。

328
00:48:55,200 --> 00:49:03,760
所以，在開始分享的項目時，我會做一個包含（include），並且路徑需要回到兩個文件夾前，

329
00:49:04,320 --> 00:49:11,200
xcconfig 和我剛剛創建的 shared File。我將對 EssentialApp

330
00:49:11,200 --> 00:49:21,920
和 EssentialFeed 項目共享的文件執行這個動作。我會建立一個，一切正常，只是為了確保我們

331
00:49:21,920 --> 00:49:32,640
沒有破壞任何東西，現在我需要使用全過濾器並說 Swift 語言。然後我看到 Swift

332
00:49:32,640 --> 00:49:42,320
語言仍然是 Swift 5，並且它來自這個項目共享的配置文件，該文件將其

333
00:49:42,320 --> 00:50:02,960
從共享文件中導入。如果我們看看差異，首先我們在 Xcode 工作區中增加了一個引用

334
00:50:02,960 --> 00:50:18,480
到新的XC配置組，然後在針對目標共享設定的不同文件中，我們可以看到Swift

335
00:50:18,480 --> 00:50:25,600
版本已被移除，然後在項目共享中，我們會看到我們為導入這行而添加的這個額外行

336
00:50:25,600 --> 00:50:33,200
並且EssentialFeed也是如此。所以，我不會再全部查看，情況是一樣的，

337
00:50:34,400 --> 00:50:42,480
還有導入操作。而我們只有在一處定義了Swift版本。現在，如果我...讓我們提交

338
00:50:42,480 --> 00:50:55,840
然後告訴你如何輕鬆地將Swift版本更改為所有文件並一次將所有

339
00:50:55,840 --> 00:51:06,160
項目設為Swift 4，我們實際上會看到它。對。所以，配置文件


340
00:51:06,160 --> 00:51:19,040
config檔案將其設為Swift 4，這不是我們想要的，我會復原。

341
00:51:20,080 --> 00:51:26,720
此時，主要是為了展示出一個集中的地方控制所有設置

342
00:51:26,720 --> 00:51:37,360
在所有的專案中。接下來，我看到有一個與許多設置共享的專案在兩個專案中。

343
00:51:39,120 --> 00:51:48,080
所以，我很好奇這些文件之間有什麼差異，並且我是否可以重用任何東西。

344
00:51:48,080 --> 00:51:56,800
所以，我將使用一種差異工具，我這裡的例子是Araxis Merge，然後我將從

345
00:51:56,800 --> 00:52:05,600
EssentialApp和EssentialFeed專案中拖曳出共享的專案。然後我立即

346
00:52:05,600 --> 00:52:13,840
看到他們幾乎相同，只是在代碼簽名，當前專案中有一些差異，

347
00:52:13,840 --> 00:52:19,520
以及一些版本控制，當然，還有SDK路徑。在一個情況下是macOS，而在另一個情況下是iPhone OS。

348
00:52:19,520 --> 00:52:29,120
所以，我會使用...我會復制這裡的所有設置，因為它們...它們存在於兩個文件中，

349
00:52:29,680 --> 00:52:39,360
並且我將把它們移動到我共享的文件中，以避免重複。所以，我已經貼上，

350
00:52:39,360 --> 00:53:02,960
貼上之後，現在在這裡給出。是的。所以，我只保留了不同的設置。

351
00:53:02,960 --> 00:53:12,000
我把其他所有的東西都移到了我共享的文件中。我們移動的一個設定是iPhone

352
00:53:12,000 --> 00:53:18,960
部署目標14.0。所以，為了確保我沒有打亂任何東西，我將檢查一下

353
00:53:18,960 --> 00:53:32,720
部署目標。我看見它還是14.0。讓我們檢查 EssentialFeed 項目，以確保。

354
00:53:35,360 --> 00:53:42,400
確實。14.0。所以，再一次，我沒有破壞任何東西。讓我們看一下差異。

355
00:53:42,400 --> 00:53:50,480
所以，所有設定已經被移動，或者幾乎所有的設定，所有共用的設定都已經

356
00:53:50,480 --> 00:53:59,680
從這些文件移動到我的共享一個。所以，我要把這個移到我的共享一個。

357
00:53:59,680 --> 00:54:11,120
接下來，我將使用相同的差異工具。這次，我們比較 EssentialFeed 項目的項目除錯

358
00:54:11,120 --> 00:54:34,240
和 EssentialApp 項目的項目除錯。我們看到他們是相同的。所以，

359
00:54:34,240 --> 00:54:51,280
再一次，更多的重複。我將增加一個新的File，我將其命名為debug。然後我會移動

360
00:54:51,280 --> 00:55:03,520
所有我這裡的設定。然後確保我的其他files都包含這個新的File。所以，再一次，

361
00:55:03,520 --> 00:55:20,400
確保我的其他文件都包含這個新的文件。所以，再一次，我們已經移除了application。

362
00:55:20,400 --> 00:55:37,200
所以，我的新的File及新的files只包含imports。同時，看看

363
00:55:37,200 --> 00:55:48,720
每個項目中release檔案的比較。而再一次，只有一點差異，

364
00:55:49,520 --> 00:55:55,840
其中EssentialApp多了一個validate product。所以，我將把這些複製，

365
00:55:59,520 --> 00:56:02,320
在這裡創建一個新的File，config。

366
00:56:02,320 --> 00:56:14,400
Config。Release。並且貼上共用設定。

367
00:56:14,400 --> 00:56:35,280
對於項目的釋出，對於EssentialApp，我們將保留驗證產品設置，

368
00:56:35,280 --> 00:56:41,760
這並不常見。並且在釋出文件中，我們將刪除所有設置。

369
00:56:41,760 --> 00:56:46,640
所以，只是為了確保我們沒有破壞任何東西，

370
00:56:49,760 --> 00:56:57,040
我們需要看到在釋出配置上設置了DWARF與DSYM的調試信息格式。

371
00:56:57,040 --> 00:57:14,400
所以，我們確實可以忽略。只有幾點我想要指出

372
00:57:14,400 --> 00:57:22,720
在這一點上，由於我們有這種設置的共享。首先，這裡有個始終嵌入

373
00:57:22,720 --> 00:57:29,920
Swift標準程序庫的設置，現在不再需要，因為Swift現在已經是ABI穩定的。

374
00:57:30,800 --> 00:57:39,360
所以，我們可以做的是使用預設值，然後刪除那些已經設置為

375
00:57:39,360 --> 00:57:56,560
是的舊值。我們會看到，在我們剛剛建立的共享文件中，設置已經設為是，

376
00:57:56,560 --> 00:58:02,320
這意味著所有的目標自動獲得它。所以，我們可以去除它，

377
00:58:02,320 --> 00:58:09,520
因為它早就從所有目標明確文件中設置為是了。

378
00:58:16,640 --> 00:58:25,840
接下來是，Swift 優化等級。已經設置好了。所以，我們的共享調試將其設置為無，

379
00:58:25,840 --> 00:58:35,520
而我們的版本將其設置為我認為是為了速度的優化。所以，我們可以刪除任何明確的，

380
00:58:38,080 --> 00:58:45,920
特別是那些被設置為無的調試，因為無是已經被繼承的。

381
00:58:45,920 --> 00:58:57,280
再次，對於這個差異，我們只是移除了它。

382
00:59:02,480 --> 00:59:11,840
開發團隊。我們看到它被用在所有目標共享檔案中，並且數值相同。

383
00:59:11,840 --> 00:59:18,000
因此，與我們的第一個示例一樣，我認為這可以被移至共享檔案。

384
00:59:19,760 --> 00:59:26,800
那麼，我就在這裡粘貼它並將其移除

385
00:59:26,800 --> 00:59:50,640
從所有其他檔案中移除。為了要慎之又慎，

386
00:59:50,640 --> 00:59:56,880
我們只檢查開發團隊的設定，並看見它仍然解析為相同的數值。

387
00:59:57,600 --> 01:00:00,400
所以，我們並未破壞任何東西。

388
01:00:03,360 --> 01:00:10,400
提交。只有新的設定被添加到共享檔中。

389
01:00:10,400 --> 01:00:17,760
現在，一個更有趣的例子是代碼簽名樣式。所以，如果我們搜尋這個設定，我們會看到

390
01:00:17,760 --> 01:00:26,880
幾乎所有目標都設為自動，除了使用的EssentialApp發布配置 

391
01:00:26,880 --> 01:00:36,720
手動。我們仍然可以避免重複，只需將代碼簽名自動移至

392
01:00:36,720 --> 01:00:48,960
共享文件。但是，我們不是要刪除所有情況，我們只是打算移除

393
01:00:50,480 --> 01:00:52,720
被設定為自動的地方。

394
01:00:52,720 --> 01:01:03,600
所以，我們將保留EssentialApp發布配置的明確設定，而我們將要

395
01:01:03,600 --> 01:01:12,160
稍後檢查這一點，僅為了將代碼簽名自動移至共享文件。

396
01:01:12,160 --> 01:01:21,840
現在，如果我們使用建構設定編輯器，

397
01:01:22,640 --> 01:01:24,480
我們會看到

398
01:01:24,480 --> 01:01:40,480
除錯配置的風格設定為自動，而發布配置設為手動，因為我們有一個

399
01:01:40,480 --> 01:01:46,080
在config文件中對目標的明確手動值，將覆蓋來自

400
01:01:46,080 --> 01:01:52,000
默認設置的值。因此，我們可以看到樣式被設置為自動對於調試配置，

401
01:01:52,000 --> 01:02:02,720
它覆蓋了來自項目配置文件的值。那麼，讓我們提交這個。

402
01:02:10,960 --> 01:02:21,520
如果我們查看產品名稱設置，我們會看到它幾乎在所有目標中使用相同的值

403
01:02:21,520 --> 01:02:32,960
與Tests不同，它被設置為$targetName，而在像EssentialFeed

404
01:02:32,960 --> 01:02:40,240
或EssentialFeed iOS目標，這些是框架目標或在應用程序目標中，

405
01:02:41,440 --> 01:02:47,120
它正在使用C99X標識符轉換。

406
01:02:47,120 --> 01:02:55,680
現在，由於這並不改變targetName的值，我們可以提取所有的。

407
01:02:57,840 --> 01:03:03,040
使用 C99X 識別符並將其移至共享文件。

408
01:03:03,040 --> 01:03:14,880
再次，我們可以刪除所有的明確條件，因爲

409
01:03:14,880 --> 01:03:33,840
數值依然會被解析為前面相同的數值。

410
01:03:33,840 --> 01:03:45,360
現在，只需在一個地方管理。再次確保，這次讓我們看看 EssentialFeed 項目

411
01:03:46,480 --> 01:03:49,600
並說出產品名稱。

412
01:03:54,800 --> 01:03:58,080
產品名稱仍然是

413
01:03:58,080 --> 01:04:06,960
正確的。所以，EssentialFeed，EssentialFeedTests，EssentialFeed iOS等等。所以，再次的，我們做

414
01:04:06,960 --> 01:04:15,360
並未打破任何事物。把這一個也提交進去。所以，再次地，只需在一處，然後從

415
01:04:15,360 --> 01:04:26,000
所有其他檔案中移除。讓我們來看看目標設備家族，你還記得的，那是


416
01:04:26,000 --> 01:04:32,880
這個設定基本上是用來描述哪些設備可以運行我們的app。在EssentialFeed中，

417
01:04:32,880 --> 01:04:39,440
這個設定並不常被共享，因為它只是被設置在EssentialFeed的iOS目標

418
01:04:39,440 --> 01:04:46,480
和Tests上。但我們看到對於EssentialApp，這個設定是在 

419
01:04:46,480 --> 01:04:55,840
EssentialApp和EssentialAppTests之間共享的。所以，我的提議是將其移除

420
01:04:58,240 --> 01:05:04,080
並將其放在項目層級。所以，它將在項目共享中。

421
01:05:04,080 --> 01:05:19,120
再次確認。這仍然被解析為iPhone和iPad。這裡也是。

422
01:05:19,120 --> 01:05:29,920
我最後要看的是產品的BundleIdentifier。

423
01:05:34,240 --> 01:05:40,720
所以，我們看到這對於每個目標都是不同的，因為它組成


424
01:05:40,720 --> 01:05:43,440
com.essentialDeveloper 和目標的名稱。

425
01:05:43,440 --> 01:05:53,280
但是我們已經知道 targetName 可以解析為我們的變量。所以，我們可以利用

426
01:05:54,160 --> 01:06:04,800
這一點。唯一不符合設置與 targetName 的情況是 EssentialApp，

427
01:06:04,800 --> 01:06:13,200
我們使用了另一個字符串，而不是使用 EssentialApp 的 targetName，

428
01:06:13,200 --> 01:06:20,960
該字符串為 EssentialAppCaseStudy。因此，我們將把這個移到共享文件中。

429
01:06:20,960 --> 01:06:31,840
用 targetName 替換。並我們將刪除所有設置，除了不符合的那一個，

430
01:06:31,840 --> 01:06:42,240
也就是 EssentialApp。所以，我們將刪除所有設置，除了不符合的那一個，

431
01:06:42,240 --> 01:06:51,840
也就是 EssentialApp。因此，我們正在刪除這些。

432
01:06:57,840 --> 01:07:07,680
我們會保留這一個。我們也可以刪掉這個。所以，現在我們只剩下兩個項目。一個是共用的，

433
01:07:07,680 --> 01:07:13,600
我們在其中使用變量 targetName，另一個項目則是只專為

434
01:07:13,600 --> 01:07:24,160
EssentialApp target設定的明確不同值。為了確保一切正常運行，我們將使用 product BundleIdentifier。

435
01:07:25,600 --> 01:07:34,240
並且我們在EssentialDeveloper EssentialAppTests上看到了結果值。

436
01:07:34,240 --> 01:07:36,800
在EssentialDeveloper EssentialAppTests上。

437
01:07:40,080 --> 01:07:45,200
對於EssentialApp，它依然是EssentialAppCaseStudy。所以，這正是我們想要的。

438
01:07:46,000 --> 01:07:55,760
致於我們的EssentialFeed目標，我們將看到該值是正確的。

439
01:07:55,760 --> 01:08:09,840
對於EssentialFeed，EssentialFeed Test等等。所以，再一次，我將提交這個。

440
01:08:12,480 --> 01:08:21,760
而差異部分也極其簡單。現在，我希望這些例子能對你們如何

441
01:08:21,760 --> 01:08:28,320
使用xcconfig文件以及特別是如何檢測應用程序並解決它有所幫助。

442
01:08:32,320 --> 01:08:35,920
謝謝。現在，如果還有問題，

443
01:08:38,560 --> 01:08:42,240
你們有沒有遇到過這種方法的任何缺點？

444
01:08:42,240 --> 01:08:54,400
如我在比較部分提到的，那些未曾接觸過

445
01:08:54,400 --> 01:09:02,400
使用xcconfig文件的人可能對其工作方式感到困惑，尤其是當它們參照其他文件，像

446
01:09:02,400 --> 01:09:10,800
我展示的那樣，等等。但我認為每個使用案例都是不同的。所以，取決於

447
01:09:10,800 --> 01:09:19,200
你們的項目需求，它們可能有用也可能沒用。我在項目中使用過它們。

448
01:09:19,200 --> 01:09:27,120
在那裡，我不知道，我們有很多開發者，像50、60個開發者，他們非常樂於助人

449
01:09:27,120 --> 01:09:37,040
因為有時候會有人不知怎麼的，只是錯誤地更改了建構設定，我們就會

450
01:09:37,040 --> 01:09:45,600
直到很晚才發現，特別是當項目檔案太大，有些差異就不會

451
01:09:46,400 --> 01:09:51,360
工作。所以，即便是 GitHub 也會告訴你檔案太大而無法顯示差異。

452
01:09:52,400 --> 01:09:58,480
因此，我們結束了使用 xcconfig 檔案和一些 CI 規則，如果你更改了建構設定，

453
01:09:58,480 --> 01:10:03,840
你就需要添加一些解釋，說明為什麼你要更改設定。

454
01:10:03,840 --> 01:10:10,080
所以，是的，就像我說的，可能設置並了解它是如何運作的，會有一些不利之處。

455
01:10:11,040 --> 01:10:18,080
但我並沒有遇到任何問題，或者一旦你理解了語法，這非常簡單。

456
01:10:19,040 --> 01:10:25,760
再次強調，這並非建議每個人都應該開始使用xcconfig文件。

457
01:10:25,760 --> 01:10:38,400
只是理解它們的強大和何時適合你使用。另一個問題，對不起，

458
01:10:38,400 --> 01:10:45,920
我無法讀出這個名字，因為它是壓克力的。你知道如何在我們添加時自動排序檔案

459
01:10:45,920 --> 01:10:56,480
到一個專案？不幸的是，我不知道，但如果我沒有記錯的話，是的，有一種按名稱排序。所以，

460
01:10:57,840 --> 01:11:08,320
那可能，對，應該可以工作。所以，你可以只使用這個。我可能已經養成了習慣去


461
01:11:08,320 --> 01:11:17,840
重新加入它們，回到當初這個設置還未設定的情況。所以，是的，你可以使用，因為如果我試著

462
01:11:17,840 --> 01:11:23,680
試圖，我不知道，將它們無序放置在這裡，然後排序，對，它們會回到順序的。

463
01:11:27,040 --> 01:11:34,160
好的。我在聊天室見到另一個問題。如果我在測試目標上使用不同的DB，比如CoreData

464
01:11:34,160 --> 01:11:41,920
和debug，我可以配置在debug和Testing時使用哪個檔案嗎？透過xcconfig來完成，這是可能的，

465
01:11:41,920 --> 01:11:48,800
但我真的不確定為什麼你會想要在根據配置而變化DB。

466
01:11:48,800 --> 01:11:54,720
你可以將所有DB嵌入，並可以使用組合規則以不同方式組合它們。

467
01:11:54,720 --> 01:12:01,600
另一個問題，透過命令列來傳遞所有這些建構設定是否可行？是的，


468
01:12:01,600 --> 01:12:08,880
這是可能的，但我仍然建議你把它們存放在某處。所以，甚至是 Xcode 專案

469
01:12:08,880 --> 01:12:16,800
或者 xcconfig 檔案，但它們都儲存在源程序控制中。所以，如果我檢查你的專案，它應該

470
01:12:16,800 --> 01:12:24,480
準備好，而我應該能夠非常快速地構建它。所以，設置好 Xcode 專案非常重要

471
01:12:24,480 --> 01:12:31,280
這就是為什麼把它們傳遞到CommandLine並不真正

472
01:12:31,280 --> 01:12:39,520
有幫助。我覺得你希望的是在 Xcode 中配置所有的設定，並且從 CommandLine 

473
01:12:39,520 --> 01:12:48,080
你只需要調用你想要的動作，像是 Xcode build 或 archive。這些就是所有的問題。

474
01:12:48,080 --> 01:12:56,160
感謝你收看並在結束時參與Q&A環節。謝謝你，希望很快再見。

475
01:12:56,160 --> 01:13:10,720
再見。