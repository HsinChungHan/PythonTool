1
00:00:00.233 --> 00:00:03.166
Hello Mike, hey Caio

2
00:00:03.166 --> 00:00:06.233
in this lecture we'll create our main

3
00:00:06.233 --> 00:00:09.266
iOS application project where we're

4
00:00:09.266 --> 00:00:10.400
going to compose

5
00:00:10.400 --> 00:00:12.766
all the modules and the only thing

6
00:00:12.766 --> 00:00:14.466
missing is the implementation

7
00:00:14.466 --> 00:00:18.233
of the FeedImageDataLoader exactly

8
00:00:18.233 --> 00:00:21.033
which also needs to be moved into the

9
00:00:21.033 --> 00:00:21.433
Feed

10
00:00:21.433 --> 00:00:24.133
Feature module along with the Feed

11
00:00:24.133 --> 00:00:24.633
Loader

12
00:00:24.633 --> 00:00:27.833
protocol and the FeedImage data model

13
00:00:27.833 --> 00:00:29.733
and that's because it basically doesn't

14
00:00:29.733 --> 00:00:30.866
belong in the UI

15
00:00:30.866 --> 00:00:32.766
it doesn't belong in the Presentation

16
00:00:32.766 --> 00:00:34.233
yes it's an abstraction

17
00:00:34.233 --> 00:00:36.533
over a core feature of the Feed Feature

18
00:00:36.533 --> 00:00:37.266
module

19
00:00:37.266 --> 00:00:41.033
loading image data thus it can be moved

20
00:00:41.033 --> 00:00:43.266
along with the Feed Feature module

21
00:00:43.266 --> 00:00:44.133
awesome

22
00:00:44.133 --> 00:00:45.666
and just like we have a remote

23
00:00:45.666 --> 00:00:47.200
implementation of the FeedLoader

24
00:00:47.200 --> 00:00:49.600
and a local implementation of the Feed

25
00:00:49.600 --> 00:00:50.866
Loader we also need

26
00:00:50.866 --> 00:00:52.933
a remote implementation of the Feed

27
00:00:52.933 --> 00:00:54.233
ImageDataLoader

28
00:00:54.233 --> 00:00:56.866
to fetch images from the network and a

29
00:00:56.866 --> 00:00:57.600
local one

30
00:00:57.600 --> 00:01:01.100
to fetch it from the cache exactly

31
00:01:01.100 --> 00:01:02.933
so let's have a look at the protocol

32
00:01:02.933 --> 00:01:04.400
first of all we moved it

33
00:01:04.400 --> 00:01:07.666
to the Feed Feature folder so when it's

34
00:01:07.666 --> 00:01:09.333
time we can move it to its own

35
00:01:09.333 --> 00:01:11.600
package along with the other feature

36
00:01:11.600 --> 00:01:13.600
abstractions

37
00:01:13.600 --> 00:01:15.733
so the FeedImageDataLoader protocol

38
00:01:15.733 --> 00:01:17.100
has only one method

39
00:01:17.100 --> 00:01:20.000
load image data from URL and a

40
00:01:20.000 --> 00:01:21.833
completion block

41
00:01:21.833 --> 00:01:24.866
with a Result type of either Data

42
00:01:24.866 --> 00:01:28.066
with the image data or an Error and it

43
00:01:28.066 --> 00:01:29.500
returns

44
00:01:29.500 --> 00:01:33.100
a Task that can be cancelled okay

45
00:01:33.100 --> 00:01:36.400
and just like we created use cases for

46
00:01:36.400 --> 00:01:37.033
loading

47
00:01:37.033 --> 00:01:40.633
the feed we have also created use cases

48
00:01:40.633 --> 00:01:41.433
for loading

49
00:01:41.433 --> 00:01:46.233
the image data so first use case

50
00:01:46.233 --> 00:01:49.433
loading image data from remote the data

51
00:01:49.433 --> 00:01:50.766
provider to the use case

52
00:01:50.766 --> 00:01:53.733
is just a URL in the happy path we

53
00:01:53.733 --> 00:01:55.900
execute the load image data command

54
00:01:55.900 --> 00:01:58.300
which is the method in the protocol then

55
00:01:58.300 --> 00:01:59.333
the system downloads

56
00:01:59.333 --> 00:02:01.600
the data from the URL validates the

57
00:02:01.600 --> 00:02:02.933
downloaded data

58
00:02:02.933 --> 00:02:06.000
and delivers the image data pretty

59
00:02:06.000 --> 00:02:07.100
straightforward

60
00:02:07.100 --> 00:02:09.500
if you cancel it the system should not

61
00:02:09.500 --> 00:02:10.300
deliver

62
00:02:10.300 --> 00:02:12.300
any result it should not deliver image

63
00:02:12.300 --> 00:02:13.333
data nor

64
00:02:13.333 --> 00:02:17.266
error if the data is invalid

65
00:02:17.266 --> 00:02:20.466
the system delivers invalid data error

66
00:02:20.466 --> 00:02:22.466
or if there is no connectivity the

67
00:02:22.466 --> 00:02:23.666
system delivers

68
00:02:23.666 --> 00:02:26.700
connectivity error exactly

69
00:02:26.700 --> 00:02:28.233
so let's have a look at implementation

70
00:02:28.233 --> 00:02:30.800
of this use case okay

71
00:02:30.800 --> 00:02:33.733
so we created a new DataLoader the

72
00:02:33.733 --> 00:02:35.500
RemoteFeedImageDataLoader

73
00:02:35.500 --> 00:02:38.533
class that conforms to the use case

74
00:02:38.533 --> 00:02:41.333
abstraction the FeedImageDataLoader

75
00:02:41.333 --> 00:02:43.433
and since it's a remote component

76
00:02:43.433 --> 00:02:46.700
it is grouped in the Feed API

77
00:02:46.700 --> 00:02:48.866
folder along with the other remote

78
00:02:48.866 --> 00:02:50.066
components

79
00:02:50.066 --> 00:02:52.233
so the RemoteFeedImageDataLoader

80
00:02:52.233 --> 00:02:54.300
performs HTTP requests

81
00:02:54.300 --> 00:02:57.033
so we are using the same HTTPClient

82
00:02:57.033 --> 00:02:59.433
that we used in the RemoteFeedLoader

83
00:02:59.433 --> 00:03:01.666
exactly the HTTPClient is just a

84
00:03:01.666 --> 00:03:03.500
protocol and it's been reused now across

85
00:03:03.500 --> 00:03:04.400
components

86
00:03:04.400 --> 00:03:06.000
the FeedLoader and the FeedImageData

87
00:03:06.000 --> 00:03:08.133
Loader because they both perform GET

88
00:03:08.133 --> 00:03:09.833
requests

89
00:03:09.833 --> 00:03:11.433
so the implementation now of the load

90
00:03:11.433 --> 00:03:13.833
ImageData from URL command

91
00:03:13.833 --> 00:03:16.233
it's very simple we create a task that

92
00:03:16.233 --> 00:03:17.500
can be cancelled

93
00:03:17.500 --> 00:03:20.800
we start the HTTP GET request for the

94
00:03:20.800 --> 00:03:21.833
URL

95
00:03:21.833 --> 00:03:24.000
and when we get the result we complete

96
00:03:24.000 --> 00:03:26.133
the task with either

97
00:03:26.133 --> 00:03:27.833
a connectivity error if there was an

98
00:03:27.833 --> 00:03:30.133
error or we validate

99
00:03:30.133 --> 00:03:32.400
the response it should be okay and the

100
00:03:32.400 --> 00:03:34.066
data should not be empty

101
00:03:34.066 --> 00:03:36.400
if it's valid we compete with success

102
00:03:36.400 --> 00:03:37.733
with the image data

103
00:03:37.733 --> 00:03:40.633
or failure with invalid data and that's

104
00:03:40.633 --> 00:03:41.200
it

105
00:03:41.200 --> 00:03:44.233
awesome very simple stuff

106
00:03:44.233 --> 00:03:47.100
in the next use case the load feed image

107
00:03:47.100 --> 00:03:48.400
data from cache

108
00:03:48.400 --> 00:03:50.866
use case which again you start with a

109
00:03:50.866 --> 00:03:51.500
URL

110
00:03:51.500 --> 00:03:54.533
to identify the item in the cache

111
00:03:54.533 --> 00:03:57.100
we execute the load image data command

112
00:03:57.100 --> 00:03:58.533
with the URL

113
00:03:58.533 --> 00:04:00.233
the system should retrieve that data

114
00:04:00.233 --> 00:04:02.300
from cache and deliver it

115
00:04:02.300 --> 00:04:05.833
to the client, if the client cancels the

116
00:04:05.833 --> 00:04:06.866
request

117
00:04:06.866 --> 00:04:08.933
the use case should not deliver any

118
00:04:08.933 --> 00:04:11.033
result so it should not deliver image

119
00:04:11.033 --> 00:04:11.900
data nor

120
00:04:11.900 --> 00:04:14.866
error if there's a retrieval error of

121
00:04:14.866 --> 00:04:16.766
course we deliver the error

122
00:04:16.766 --> 00:04:18.700
and if the cache is empty that's also a

123
00:04:18.700 --> 00:04:20.700
sad path we deliver not found

124
00:04:20.700 --> 00:04:23.600
error result exactly so let's have a

125
00:04:23.600 --> 00:04:26.000
look at implementation

126
00:04:26.000 --> 00:04:29.033
so LocalFeedImageDataLoader

127
00:04:29.033 --> 00:04:30.866
implements the FeedImageDataLoader

128
00:04:30.866 --> 00:04:32.133
abstraction

129
00:04:32.133 --> 00:04:34.000
starts with a Store which is a new

130
00:04:34.000 --> 00:04:35.900
abstraction

131
00:04:35.900 --> 00:04:38.133
where you can insert data for a given

132
00:04:38.133 --> 00:04:39.500
URL

133
00:04:39.500 --> 00:04:45.833
you can retrieve data for a given URL

134
00:04:45.833 --> 00:04:48.866
so the loadImageData from URL command

135
00:04:48.866 --> 00:04:52.233
will create a task that can be cancelled

136
00:04:52.233 --> 00:04:54.300
it'll start retrieving the data from the

137
00:04:54.300 --> 00:04:55.500
store

138
00:04:55.500 --> 00:04:57.733
when we get a result back we complete

139
00:04:57.733 --> 00:04:59.666
the task with either

140
00:04:59.666 --> 00:05:03.333
a LoadError.failed or if we found

141
00:05:03.333 --> 00:05:06.066
the data we complete with success

142
00:05:06.066 --> 00:05:06.800
otherwise

143
00:05:06.800 --> 00:05:10.866
with a not found result okay

144
00:05:10.866 --> 00:05:13.266
and that's all and we also implemented

145
00:05:13.266 --> 00:05:14.233
the FeedImage

146
00:05:14.233 --> 00:05:17.433
DataStore infrastructure with a Core

147
00:05:17.433 --> 00:05:18.133
Data

148
00:05:18.133 --> 00:05:21.433
implementation which is very simple

149
00:05:21.433 --> 00:05:24.233
the insert data for URL performs the

150
00:05:24.233 --> 00:05:24.933
task

151
00:05:24.933 --> 00:05:28.233
in a background context all it does is

152
00:05:28.233 --> 00:05:28.933
to find

153
00:05:28.933 --> 00:05:31.100
the first feed image that matches the

154
00:05:31.100 --> 00:05:32.000
URL

155
00:05:32.000 --> 00:05:34.800
if it finds it it stores the data with

156
00:05:34.800 --> 00:05:36.300
that image model

157
00:05:36.300 --> 00:05:41.033
and save and the retrieve data for URL

158
00:05:41.033 --> 00:05:44.133
simply try to find a feed image

159
00:05:44.133 --> 00:05:47.600
with a given URL and return its data

160
00:05:47.600 --> 00:05:50.133
that's it so we added the data optional

161
00:05:50.133 --> 00:05:51.033
property

162
00:05:51.033 --> 00:05:53.266
only for the Core Data model because

163
00:05:53.266 --> 00:05:55.500
that's a detail of how we are storing

164
00:05:55.500 --> 00:05:56.400
the data

165
00:05:56.400 --> 00:05:59.433
with a Core Data implementation

166
00:05:59.433 --> 00:06:02.700
so the FeedImage model stays intact

167
00:06:02.700 --> 00:06:04.533
it doesn't need to know about this Core

168
00:06:04.533 --> 00:06:06.633
Data implementation detail

169
00:06:06.633 --> 00:06:08.133
that's why it's important to separate

170
00:06:08.133 --> 00:06:10.866
models because every module

171
00:06:10.866 --> 00:06:13.033
may change for different reasons the

172
00:06:13.033 --> 00:06:14.700
Core Data module now

173
00:06:14.700 --> 00:06:16.466
had to change to accommodate this new

174
00:06:16.466 --> 00:06:18.533
requirement but the other modules don't

175
00:06:18.533 --> 00:06:19.600
need to know about it

176
00:06:19.600 --> 00:06:21.333
so we don't need to recompile redeploy

177
00:06:21.333 --> 00:06:23.666
all the modules because of this change

178
00:06:23.666 --> 00:06:26.633
exactly that's pretty important okay

179
00:06:26.633 --> 00:06:28.000
let's have a look at the dependency

180
00:06:28.000 --> 00:06:29.600
diagram now

181
00:06:29.600 --> 00:06:32.133
so in the middle we have the Feature

182
00:06:32.133 --> 00:06:33.500
abstractions

183
00:06:33.500 --> 00:06:36.000
the FeedLoader protocol with the Remote

184
00:06:36.000 --> 00:06:37.666
FeedLoader implementation and the Local

185
00:06:37.666 --> 00:06:39.900
FeedLoader implementation

186
00:06:39.900 --> 00:06:42.000
and we also moved the FeedImageData

187
00:06:42.000 --> 00:06:43.666
Loader abstraction

188
00:06:43.666 --> 00:06:46.866
the protocol to this Feed Feature module

189
00:06:46.866 --> 00:06:49.500
and we implemented the RemoteFeedImage

190
00:06:49.500 --> 00:06:50.866
DataLoader

191
00:06:50.866 --> 00:06:53.733
that shares the same HTTPClient

192
00:06:53.733 --> 00:06:54.866
abstraction

193
00:06:54.866 --> 00:06:58.300
as the RemoteFeedLoader and we also

194
00:06:58.300 --> 00:06:59.033
implemented

195
00:06:59.033 --> 00:07:01.900
a LocalFeedImageDataLoader they also

196
00:07:01.900 --> 00:07:03.433
talks to an abstraction

197
00:07:03.433 --> 00:07:05.666
the FeedImageDataStore that is

198
00:07:05.666 --> 00:07:06.533
implemented

199
00:07:06.533 --> 00:07:09.033
by the CoreDataFeedStore and as you

200
00:07:09.033 --> 00:07:10.800
can see the CoreDataFeedStore

201
00:07:10.800 --> 00:07:13.500
class implements both the FeedStore and

202
00:07:13.500 --> 00:07:15.500
the FeedImageDataStore

203
00:07:15.500 --> 00:07:17.333
so different than the Feed API module

204
00:07:17.333 --> 00:07:19.033
where we share the HTTPClient

205
00:07:19.033 --> 00:07:21.900
between these two components in the

206
00:07:21.900 --> 00:07:22.400
cache

207
00:07:22.400 --> 00:07:25.166
module we do not share the same store

208
00:07:25.166 --> 00:07:27.033
because they have completely different

209
00:07:27.033 --> 00:07:29.166
interfaces because they don't share the

210
00:07:29.166 --> 00:07:30.800
same operations

211
00:07:30.800 --> 00:07:33.733
right so this is a prime example of the

212
00:07:33.733 --> 00:07:34.633
ISP

213
00:07:34.633 --> 00:07:37.166
the Interface Segregation Principle

214
00:07:37.166 --> 00:07:38.400
although

215
00:07:38.400 --> 00:07:41.166
both sets of behaviors have to do with

216
00:07:41.166 --> 00:07:42.066
storing

217
00:07:42.066 --> 00:07:45.266
data into the cache we are separating

218
00:07:45.266 --> 00:07:45.833
them

219
00:07:45.833 --> 00:07:48.700
into two protocols, yes because although

220
00:07:48.700 --> 00:07:49.166
we are

221
00:07:49.166 --> 00:07:52.300
storing data in both cases one we are

222
00:07:52.300 --> 00:07:53.100
storing

223
00:07:53.100 --> 00:07:55.566
the feed data and the other one we are

224
00:07:55.566 --> 00:07:57.100
storing the feed image

225
00:07:57.100 --> 00:08:01.100
data as we can see here the FeedStore

226
00:08:01.100 --> 00:08:04.000
allows you to insert feed with a

227
00:08:04.000 --> 00:08:05.733
timestamp

228
00:08:05.733 --> 00:08:08.300
retrieve the feed and also delete the

229
00:08:08.300 --> 00:08:09.500
cached feed

230
00:08:09.500 --> 00:08:11.833
it's a very specialized interface for

231
00:08:11.833 --> 00:08:14.000
the client

232
00:08:14.000 --> 00:08:16.233
and the FeedImageDataStore only

233
00:08:16.233 --> 00:08:17.733
expose the operations

234
00:08:17.733 --> 00:08:20.066
the use case needs in this case

235
00:08:20.066 --> 00:08:21.900
inserting the data for URL

236
00:08:21.900 --> 00:08:24.300
and retrieving data for URL we don't

237
00:08:24.300 --> 00:08:25.266
need to delete

238
00:08:25.266 --> 00:08:28.633
for example exactly infrastructure

239
00:08:28.633 --> 00:08:31.566
abstractions should have exactly what

240
00:08:31.566 --> 00:08:32.533
the clients

241
00:08:32.533 --> 00:08:36.000
need and in this case we just want to

242
00:08:36.000 --> 00:08:36.533
insert

243
00:08:36.533 --> 00:08:39.566
and retrieve that's it

244
00:08:39.566 --> 00:08:41.566
if in the future we need to delete

245
00:08:41.566 --> 00:08:43.100
inside the use case

246
00:08:43.100 --> 00:08:45.600
we might add a delete method here but

247
00:08:45.600 --> 00:08:46.700
only if required

248
00:08:46.700 --> 00:08:49.600
by the client and that's it we have all

249
00:08:49.600 --> 00:08:51.266
the implementations we need

250
00:08:51.266 --> 00:08:54.366
now it's time to create the main iOS app

251
00:08:54.366 --> 00:08:57.033
application awesome let's start by

252
00:08:57.033 --> 00:08:59.033
creating a new project

253
00:08:59.033 --> 00:09:02.000
let's select the iOS single view app

254
00:09:02.000 --> 00:09:03.900
template

255
00:09:03.900 --> 00:09:07.266
let's call it EssentialApp

256
00:09:07.266 --> 00:09:12.466
okay there it is we don't want landscape

257
00:09:12.466 --> 00:09:14.633
let's run and see if we have an empty

258
00:09:14.633 --> 00:09:18.933
application

259
00:09:18.933 --> 00:09:22.133
okay there it is an empty app

260
00:09:22.133 --> 00:09:25.433
so let's commit

261
00:09:25.433 --> 00:09:29.200
add empty EssentialApp project

262
00:09:29.200 --> 00:09:32.633
that's it but all of our modules

263
00:09:32.633 --> 00:09:35.100
are in a different project so we need to

264
00:09:35.100 --> 00:09:35.666
combine

265
00:09:35.666 --> 00:09:39.433
these two projects into a workspace yes

266
00:09:39.433 --> 00:09:42.700
so the EssentialApp will depend

267
00:09:42.700 --> 00:09:45.900
on the other modules and the way to do

268
00:09:45.900 --> 00:09:46.300
it

269
00:09:46.300 --> 00:09:49.433
is to drag an Xcode project into

270
00:09:49.433 --> 00:09:50.233
another

271
00:09:50.233 --> 00:09:52.133
so in this case we are going to drag the

272
00:09:52.133 --> 00:09:54.233
EssentialFeed project

273
00:09:54.233 --> 00:09:57.266
into the EssentialApp project then

274
00:09:57.266 --> 00:09:58.533
Xcode is going to ask you

275
00:09:58.533 --> 00:10:01.200
if you want to create a new workspace

276
00:10:01.200 --> 00:10:02.133
because you cannot add

277
00:10:02.133 --> 00:10:04.466
projects inside project but you can

278
00:10:04.466 --> 00:10:06.700
create a workspace that combines

279
00:10:06.700 --> 00:10:10.066
multiple projects that's it as you can

280
00:10:10.066 --> 00:10:11.900
see in the same workspace we have

281
00:10:11.900 --> 00:10:14.233
the EssentialFeed project and the

282
00:10:14.233 --> 00:10:15.266
EssentialApp

283
00:10:15.266 --> 00:10:18.866
project now in the EssentialApp project

284
00:10:18.866 --> 00:10:22.366
we can add our modules as embedded

285
00:10:22.366 --> 00:10:25.033
frameworks so we need to add the

286
00:10:25.033 --> 00:10:26.133
EssentialFeed

287
00:10:26.133 --> 00:10:29.266
and the EssentialFeediOS frameworks

288
00:10:29.266 --> 00:10:31.833
that's it now from within the Essential

289
00:10:31.833 --> 00:10:33.733
App project we have access

290
00:10:33.733 --> 00:10:36.366
to the EssentialFeed components now we

291
00:10:36.366 --> 00:10:37.666
can compose

292
00:10:37.666 --> 00:10:40.233
all of them to run an application with

293
00:10:40.233 --> 00:10:41.600
the EssentialFeed

294
00:10:41.600 --> 00:10:45.033
awesome let's commit and start composing

295
00:10:45.033 --> 00:10:47.200
our app

296
00:10:47.200 --> 00:10:50.000
so create the EssentialApp workspace

297
00:10:50.000 --> 00:10:51.033
combining

298
00:10:51.033 --> 00:10:53.833
the EssentialApp and EssentialFeed

299
00:10:53.833 --> 00:10:55.100
projects

300
00:10:55.100 --> 00:10:58.300
that's it so let's compose

301
00:10:58.300 --> 00:11:01.200
the feed into the application so we need

302
00:11:01.200 --> 00:11:02.233
to import

303
00:11:02.233 --> 00:11:05.433
the EssentialFeed and the Essential

304
00:11:05.433 --> 00:11:06.000
Feed

305
00:11:06.000 --> 00:11:09.433
iOS modules so let's create the

306
00:11:09.433 --> 00:11:12.833
FeedViewController using the FeedUI

307
00:11:12.833 --> 00:11:14.300
Composer

308
00:11:14.300 --> 00:11:16.533
and here we need a FeedLoader and an

309
00:11:16.533 --> 00:11:19.333
ImageLoader

310
00:11:19.333 --> 00:11:21.900
so the ImageLoader let's use the Remote

311
00:11:21.900 --> 00:11:22.700
Feed

312
00:11:22.700 --> 00:11:25.200
ImageDataLoader yeah and we need a

313
00:11:25.200 --> 00:11:26.233
client

314
00:11:26.233 --> 00:11:30.533
okay and the FeedLoader is a Remote

315
00:11:30.533 --> 00:11:34.066
FeedLoader that needs a URL

316
00:11:34.066 --> 00:11:36.633
and a client so let's create the client

317
00:11:36.633 --> 00:11:38.133
it's the URL

318
00:11:38.133 --> 00:11:41.433
SessionHTTPClient that needs

319
00:11:41.433 --> 00:11:45.100
a session let's create a session

320
00:11:45.100 --> 00:11:48.066
which is a URLSession with

321
00:11:48.066 --> 00:11:49.100
configuration

322
00:11:49.100 --> 00:11:52.000
and let's use an ephemeral configuration

323
00:11:52.000 --> 00:11:53.833
because we have our own caching

324
00:11:53.833 --> 00:11:57.266
strategy awesome finally we need a URL

325
00:11:57.266 --> 00:12:01.100
which in our case it's this long URL

326
00:12:01.100 --> 00:12:02.933
alright now we need to put this on the

327
00:12:02.933 --> 00:12:04.933
screen so let's put it

328
00:12:04.933 --> 00:12:07.600
on the window as the root view

329
00:12:07.600 --> 00:12:08.866
controller

330
00:12:08.866 --> 00:12:12.933
let's run now

331
00:12:12.933 --> 00:12:17.666
boom okay so the whole composition works

332
00:12:17.666 --> 00:12:20.700
it loads the feed and the images

333
00:12:20.700 --> 00:12:24.233
and as we scroll it loads the images

334
00:12:24.233 --> 00:12:27.200
and pre-fetches the images as well yep

335
00:12:27.200 --> 00:12:28.800
animation works as well

336
00:12:28.800 --> 00:12:32.700
it's awesome but we are composing only

337
00:12:32.700 --> 00:12:36.533
the remote side the Feed API module

338
00:12:36.533 --> 00:12:39.433
with the user interface exactly but we

339
00:12:39.433 --> 00:12:40.466
have the other side

340
00:12:40.466 --> 00:12:42.933
that we like to compose as well so if

341
00:12:42.933 --> 00:12:44.233
the internet connection

342
00:12:44.233 --> 00:12:47.200
fails we can load data from the cache

343
00:12:47.200 --> 00:12:49.433
exactly of course we can't do that yet

344
00:12:49.433 --> 00:12:51.733
because we need a new type that composes

345
00:12:51.733 --> 00:12:52.866
these two

346
00:12:52.866 --> 00:12:55.733
and then inject this composite into the

347
00:12:55.733 --> 00:12:56.933
Feed UI

348
00:12:56.933 --> 00:12:59.333
exactly we need a component that

349
00:12:59.333 --> 00:13:00.233
references

350
00:13:00.233 --> 00:13:02.066
both the RemoteFeedLoader and the

351
00:13:02.066 --> 00:13:03.733
LocalFeedLoader and

352
00:13:03.733 --> 00:13:07.433
it contains the strategy for when to use

353
00:13:07.433 --> 00:13:10.700
the remote and when to use the local

354
00:13:10.700 --> 00:13:12.366
and the same thing for the FeedImage

355
00:13:12.366 --> 00:13:14.800
DataLoader we need to compose

356
00:13:14.800 --> 00:13:17.100
both the remote and the local one into a

357
00:13:17.100 --> 00:13:18.300
new type

358
00:13:18.300 --> 00:13:20.800
with the strategy to decide which one to

359
00:13:20.800 --> 00:13:21.500
use

360
00:13:21.500 --> 00:13:24.800
depending on the case so since we have a

361
00:13:24.800 --> 00:13:26.466
good abstraction in between

362
00:13:26.466 --> 00:13:28.933
those components we can add this

363
00:13:28.933 --> 00:13:30.300
behavior

364
00:13:30.300 --> 00:13:32.466
without having to change the remote

365
00:13:32.466 --> 00:13:34.800
loaders or the local loaders

366
00:13:34.800 --> 00:13:37.200
we can compose them differently with a

367
00:13:37.200 --> 00:13:38.066
new type

368
00:13:38.066 --> 00:13:40.000
and get different behaviors that's the

369
00:13:40.000 --> 00:13:41.100
Open Closed

370
00:13:41.100 --> 00:13:44.300
Principle exactly that's the power

371
00:13:44.300 --> 00:13:47.033
of the Open Close Principle so that's it

372
00:13:47.033 --> 00:13:48.133
the next step

373
00:13:48.133 --> 00:13:50.866
is to create those strategies or those

374
00:13:50.866 --> 00:13:52.933
composite types

375
00:13:52.933 --> 00:13:55.166
fantastic this is going to be the topic

376
00:13:55.166 --> 00:13:56.466
of the next lecture

377
00:13:56.466 --> 00:13:59.666
we'll see you again next time bye y'all

378
00:13:59.666 --> 00:14:03.832
see ya