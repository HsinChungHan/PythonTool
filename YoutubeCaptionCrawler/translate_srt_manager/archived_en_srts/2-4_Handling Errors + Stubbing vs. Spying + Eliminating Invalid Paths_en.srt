1
00:00:01.100 --> 00:00:03.033
Hello Mike, hey Caio

2
00:00:03.033 --> 00:00:04.933
so in the previous episode we moved our

3
00:00:04.933 --> 00:00:07.600
production code out of the test target

4
00:00:07.600 --> 00:00:09.900
then we improved our assertions by not

5
00:00:09.900 --> 00:00:11.266
checking just the value that was

6
00:00:11.266 --> 00:00:11.833
captured

7
00:00:11.833 --> 00:00:14.000
but also how many times they were

8
00:00:14.000 --> 00:00:15.733
captured by using arrays

9
00:00:15.733 --> 00:00:18.533
right okay so now it's time to start

10
00:00:18.533 --> 00:00:20.533
thinking about the client response

11
00:00:20.533 --> 00:00:22.866
because so far we only send the message

12
00:00:22.866 --> 00:00:25.033
get but we don't expect anything back

13
00:00:25.033 --> 00:00:28.000
so let's start from the error case what

14
00:00:28.000 --> 00:00:28.633
happens

15
00:00:28.633 --> 00:00:30.700
when we get an error on the client side

16
00:00:30.700 --> 00:00:31.666
right so

17
00:00:31.666 --> 00:00:34.633
when the client fails we want to send an

18
00:00:34.633 --> 00:00:35.433
error

19
00:00:35.433 --> 00:00:39.033
so delivers error on client error

20
00:00:39.033 --> 00:00:42.300
right because when the HTTPClient fails

21
00:00:42.300 --> 00:00:44.066
it means we have some kind of

22
00:00:44.066 --> 00:00:45.333
connectivity issue

23
00:00:45.333 --> 00:00:48.066
right exactly so if we have our sut and

24
00:00:48.066 --> 00:00:49.900
client

25
00:00:49.900 --> 00:00:52.800
and we call load right we want an output

26
00:00:52.800 --> 00:00:53.600
basically

27
00:00:53.600 --> 00:00:55.600
and since the callback is asynchronous

28
00:00:55.600 --> 00:00:57.100
we're going to pass a completion block

29
00:00:57.100 --> 00:00:59.666
yes to the FeedLoader okay I like that

30
00:00:59.666 --> 00:01:00.533
and we're going to get

31
00:01:00.533 --> 00:01:02.633
let's say an error and we want to

32
00:01:02.633 --> 00:01:03.600
capture this error

33
00:01:03.600 --> 00:01:06.933
so capturedError equals error

34
00:01:06.933 --> 00:01:10.000
so let's define our capturedError so

35
00:01:10.000 --> 00:01:11.333
what's the type here

36
00:01:11.333 --> 00:01:13.266
let's use the Error for now okay and we

37
00:01:13.266 --> 00:01:14.933
have some compiler warnings so why don't

38
00:01:14.933 --> 00:01:16.133
we start solving these

39
00:01:16.133 --> 00:01:18.633
first first of all load doesn't receive

40
00:01:18.633 --> 00:01:20.066
a completion block

41
00:01:20.066 --> 00:01:23.266
so let's do this

42
00:01:23.266 --> 00:01:26.066
and we expect to send an Error back and

43
00:01:26.066 --> 00:01:27.333
since we don't want to break

44
00:01:27.333 --> 00:01:29.600
the other tests let's just give it a

45
00:01:29.600 --> 00:01:31.033
default closure for now

46
00:01:31.033 --> 00:01:34.466
that's a nice Swift feature okay the

47
00:01:34.466 --> 00:01:36.466
compiler errors are gone let's carry on

48
00:01:36.466 --> 00:01:38.400
do we want this Error to be

49
00:01:38.400 --> 00:01:40.066
just a generic protocol or should we

50
00:01:40.066 --> 00:01:42.133
give it a better definition

51
00:01:42.133 --> 00:01:44.533
right I think we should as we said if

52
00:01:44.533 --> 00:01:45.666
the client fails

53
00:01:45.666 --> 00:01:47.266
we are going to define it as a

54
00:01:47.266 --> 00:01:48.700
connectivity error

55
00:01:48.700 --> 00:01:50.866
so why don't we define our own Error

56
00:01:50.866 --> 00:01:53.100
type it could be even inside the

57
00:01:53.100 --> 00:01:56.233
RemoteFeedLoader yeah it can be a

58
00:01:56.233 --> 00:01:59.500
public enum there okay so public enum

59
00:01:59.500 --> 00:02:02.233
Error yeah and I like how this will read

60
00:02:02.233 --> 00:02:02.700
later

61
00:02:02.700 --> 00:02:05.900
it's a RemoteFeedloader.Error type and

62
00:02:05.900 --> 00:02:07.333
it needs to conform to

63
00:02:07.333 --> 00:02:09.033
Error and since they have the same names

64
00:02:09.033 --> 00:02:11.000
we need to give it the namespace

65
00:02:11.000 --> 00:02:14.400
Swift.Error fantastic and the case

66
00:02:14.400 --> 00:02:17.666
name will be connectivity makes sense

67
00:02:17.666 --> 00:02:20.533
it's a connectivity error yep so this

68
00:02:20.533 --> 00:02:24.066
now should be a RemoteFeedLoader.Error

69
00:02:24.066 --> 00:02:28.066
and we expect this to return Error

70
00:02:28.066 --> 00:02:32.300
so we can assert that the capturedError

71
00:02:32.300 --> 00:02:36.133
was a connectivity error and the

72
00:02:36.133 --> 00:02:37.033
compiler is

73
00:02:37.033 --> 00:02:38.866
notifying us that we are never using the

74
00:02:38.866 --> 00:02:40.133
client in this scope

75
00:02:40.133 --> 00:02:41.566
but we have to we need to tell the

76
00:02:41.566 --> 00:02:43.333
client that it failed

77
00:02:43.333 --> 00:02:45.733
well we can stub the client that's one

78
00:02:45.733 --> 00:02:46.800
way of doing it

79
00:02:46.800 --> 00:02:48.233
okay so we don't have this functionality

80
00:02:48.233 --> 00:02:49.800
but we can implement it something like

81
00:02:49.800 --> 00:02:50.933
client.error

82
00:02:50.933 --> 00:02:54.700
equals let's say an NSError just to test

83
00:02:54.700 --> 00:02:59.266
let's say Test code zero

84
00:02:59.266 --> 00:03:02.800
okay you can now set an error here

85
00:03:02.800 --> 00:03:06.233
optional right so this is the

86
00:03:06.233 --> 00:03:08.466
setup we want in our tests but right now

87
00:03:08.466 --> 00:03:10.700
we don't have any method for the HTTP

88
00:03:10.700 --> 00:03:11.666
Client to tell

89
00:03:11.666 --> 00:03:13.200
the RemoteFeedLoader that an error

90
00:03:13.200 --> 00:03:14.933
occurred so let's run this test

91
00:03:14.933 --> 00:03:18.633
and hopefully we see a failing test

92
00:03:18.633 --> 00:03:21.833
we do how can we send an error from the

93
00:03:21.833 --> 00:03:23.566
client to the RemoteFeedLoader and I

94
00:03:23.566 --> 00:03:24.866
think we can use the closure

95
00:03:24.866 --> 00:03:27.833
again yeah the same technique complete

96
00:03:27.833 --> 00:03:29.500
with an Error

97
00:03:29.500 --> 00:03:31.200
but which kind of Error I don't want to

98
00:03:31.200 --> 00:03:33.200
pass the same Error as the RemoteFeed

99
00:03:33.200 --> 00:03:34.866
Loader because this Error now

100
00:03:34.866 --> 00:03:36.633
is in the domain of the implementation

101
00:03:36.633 --> 00:03:38.000
of the HTTPClient

102
00:03:38.000 --> 00:03:41.566
absolutely this error is an HTTP

103
00:03:41.566 --> 00:03:44.066
kind of error so it should have its own

104
00:03:44.066 --> 00:03:44.866
type there

105
00:03:44.866 --> 00:03:46.533
so what the RemoteFeedLoader is doing

106
00:03:46.533 --> 00:03:48.633
is mapping the client errors

107
00:03:48.633 --> 00:03:50.766
to a domain error in this case

108
00:03:50.766 --> 00:03:51.833
connectivity

109
00:03:51.833 --> 00:03:54.933
right an error that comes from the HTTP

110
00:03:54.933 --> 00:03:57.733
domain as we can see here when there's

111
00:03:57.733 --> 00:03:58.866
no connectivity

112
00:03:58.866 --> 00:04:01.266
we deliver an error that's the domain

113
00:04:01.266 --> 00:04:02.800
error no connectivity

114
00:04:05.100 --> 00:04:08.000
so let's make this escaping and this

115
00:04:08.000 --> 00:04:10.700
should be escaping as well

116
00:04:10.700 --> 00:04:13.833
and we now need to pass the closure so

117
00:04:13.833 --> 00:04:15.500
here we get the client

118
00:04:15.500 --> 00:04:18.366
error but we want to complete with our

119
00:04:18.366 --> 00:04:22.066
own domain Error yeah connectivity

120
00:04:22.066 --> 00:04:26.833
but now our spy needs to implement the new

121
00:04:26.833 --> 00:04:28.233
method

122
00:04:28.233 --> 00:04:30.466
and now we can say if we have an error

123
00:04:30.466 --> 00:04:31.333
right

124
00:04:31.333 --> 00:04:34.466
we invoke completion with the error

125
00:04:34.466 --> 00:04:39.900
in the spy that should do it

126
00:04:39.900 --> 00:04:43.033
okay it's passing okay getting there

127
00:04:43.033 --> 00:04:47.266
so let's commit delivers connectivity

128
00:04:47.266 --> 00:04:51.266
error on client error

129
00:04:51.266 --> 00:04:53.833
fantastic I think we can do some cleanup

130
00:04:53.833 --> 00:04:54.300
here

131
00:04:54.300 --> 00:04:56.133
we don't need to define a name for the

132
00:04:56.133 --> 00:04:58.300
error in the closure we can just use the

133
00:04:58.300 --> 00:04:59.333
dollar sign

134
00:04:59.333 --> 00:05:02.866
0 and another improvement we can do is

135
00:05:02.866 --> 00:05:04.066
instead of using

136
00:05:04.066 --> 00:05:05.900
the optional and capturing it we can do

137
00:05:05.900 --> 00:05:07.500
the same technique we did with the

138
00:05:07.500 --> 00:05:09.500
requestedURLs and use an array

139
00:05:09.500 --> 00:05:11.166
of errors to guarantee that we only

140
00:05:11.166 --> 00:05:13.266
received one error

141
00:05:13.266 --> 00:05:16.066
so now we just append the received error

142
00:05:16.066 --> 00:05:18.633
and at the end we can compare

143
00:05:18.633 --> 00:05:21.600
that the capturedErrors is just one error

144
00:05:21.600 --> 00:05:22.866
and it's a connectivity

145
00:05:22.866 --> 00:05:25.833
error yeah that looks good all right

146
00:05:25.833 --> 00:05:26.700
commit

147
00:05:26.700 --> 00:05:29.900
yeah guarantee we

148
00:05:29.900 --> 00:05:33.433
only receive one error

149
00:05:33.433 --> 00:05:36.866
fantastic so we made a choice here

150
00:05:36.866 --> 00:05:39.733
to stub the client even though our

151
00:05:39.733 --> 00:05:40.466
client

152
00:05:40.466 --> 00:05:44.466
is a spy right so we are mixing concepts

153
00:05:44.466 --> 00:05:44.866
now

154
00:05:44.866 --> 00:05:48.066
stubbing and capturing values yes

155
00:05:48.066 --> 00:05:49.833
and from the test point of view here we

156
00:05:49.833 --> 00:05:52.233
stub before we call load but that

157
00:05:52.233 --> 00:05:54.000
doesn't reflect the asynchronous nature

158
00:05:54.000 --> 00:05:56.633
of this behavior exactly so I would

159
00:05:56.633 --> 00:05:58.133
prefer to keep our spy

160
00:05:58.133 --> 00:06:00.933
a spy just capturing data instead of

161
00:06:00.933 --> 00:06:01.900
stubbing it

162
00:06:01.900 --> 00:06:04.300
with some behavior and we can do so by

163
00:06:04.300 --> 00:06:06.133
capturing the completion block and it's

164
00:06:06.133 --> 00:06:06.466
up

165
00:06:06.466 --> 00:06:09.666
to us in the test scope to invoke that

166
00:06:09.666 --> 00:06:12.800
completion block, okay how to do so

167
00:06:12.800 --> 00:06:16.000
so we can do so by creating our client

168
00:06:16.000 --> 00:06:20.000
error and invoking the completion block

169
00:06:20.000 --> 00:06:21.900
that we will capture so for example we

170
00:06:21.900 --> 00:06:23.266
have a completions

171
00:06:23.266 --> 00:06:25.500
array and we want the first one and we

172
00:06:25.500 --> 00:06:27.166
can invoke it with the client

173
00:06:27.166 --> 00:06:30.400
Error yes so let's go to our spy

174
00:06:30.400 --> 00:06:33.333
instead of an error we can add our

175
00:06:33.333 --> 00:06:34.466
completions

176
00:06:34.466 --> 00:06:38.133
array that will hold

177
00:06:38.133 --> 00:06:43.266
all the completion blocks passed

178
00:06:43.266 --> 00:06:45.900
so we append the completion received and we

179
00:06:45.900 --> 00:06:48.133
don't need the error anymore

180
00:06:48.133 --> 00:06:50.400
so we are not stubbing yeah we don't

181
00:06:50.400 --> 00:06:52.133
have behavior we just accumulate

182
00:06:52.133 --> 00:06:54.066
all the properties we received let's run

183
00:06:54.066 --> 00:06:56.133
the test

184
00:06:56.133 --> 00:06:58.133
and it passes and we should definitely

185
00:06:58.133 --> 00:06:59.500
mention here how

186
00:06:59.500 --> 00:07:03.500
the code order changed from the arrange

187
00:07:03.500 --> 00:07:07.066
to the act section previously the

188
00:07:07.066 --> 00:07:09.100
client.error stub

189
00:07:09.100 --> 00:07:12.400
was part of the arrange scope now

190
00:07:12.400 --> 00:07:14.466
the client.completions belongs to

191
00:07:14.466 --> 00:07:15.500
the act part

192
00:07:15.500 --> 00:07:18.300
that's the action and it makes sense

193
00:07:18.300 --> 00:07:19.500
when the client

194
00:07:19.500 --> 00:07:22.066
completes with an error then we want the

195
00:07:22.066 --> 00:07:22.800
load

196
00:07:22.800 --> 00:07:24.800
to complete with an error as well so I

197
00:07:24.800 --> 00:07:26.533
believe this test tells the truth

198
00:07:26.533 --> 00:07:29.033
because the completion happens after you

199
00:07:29.033 --> 00:07:30.066
invoke load

200
00:07:30.066 --> 00:07:32.700
exactly so I'm happy with that but now I

201
00:07:32.700 --> 00:07:34.233
think this is not as readable

202
00:07:34.233 --> 00:07:36.533
it doesn't look as neat as it was before

203
00:07:36.533 --> 00:07:38.400
because we need to get a value from an

204
00:07:38.400 --> 00:07:38.933
array

205
00:07:38.933 --> 00:07:41.100
okay but we can solve it yeah let's

206
00:07:41.100 --> 00:07:44.533
commit and try to solve that

207
00:07:44.533 --> 00:07:47.900
replace stubbing by capturing

208
00:07:47.900 --> 00:07:51.166
values instead let's see if we can

209
00:07:51.166 --> 00:07:51.900
improve this

210
00:07:51.900 --> 00:07:55.266
spy what if we have a method

211
00:07:55.266 --> 00:07:58.466
called complete with and we pass

212
00:07:58.466 --> 00:08:00.533
our client over here yeah that's exactly

213
00:08:00.533 --> 00:08:02.400
what we want we want our spy to

214
00:08:02.400 --> 00:08:04.700
complete with an error so in

215
00:08:04.700 --> 00:08:06.633
the implementation

216
00:08:06.633 --> 00:08:08.933
we pass an error and here we call

217
00:08:08.933 --> 00:08:10.000
completions

218
00:08:10.000 --> 00:08:13.666
at index and invoke with the error

219
00:08:13.666 --> 00:08:15.900
and we can even make the subscript there

220
00:08:15.900 --> 00:08:17.100
dynamic

221
00:08:17.100 --> 00:08:20.233
okay we can have an index and give it a

222
00:08:20.233 --> 00:08:23.566
default value exactly default it to zero

223
00:08:23.566 --> 00:08:26.400
okay so we get the completion block at

224
00:08:26.400 --> 00:08:27.433
the past index

225
00:08:27.433 --> 00:08:29.166
and we invoke it with the error let's

226
00:08:29.166 --> 00:08:32.366
see how it looks now

227
00:08:32.366 --> 00:08:33.833
it's passing and I think it looks

228
00:08:33.833 --> 00:08:35.500
cleaner now absolutely

229
00:08:35.500 --> 00:08:38.866
so let's commit so improve

230
00:08:38.866 --> 00:08:42.133
readability with helper

231
00:08:42.133 --> 00:08:45.200
method, I think we can even go one step

232
00:08:45.200 --> 00:08:45.900
further

233
00:08:45.900 --> 00:08:49.900
and perhaps combine the captured values

234
00:08:49.900 --> 00:08:52.533
since we are capturing the whole message

235
00:08:52.533 --> 00:08:54.366
instead of having two different arrays

236
00:08:54.366 --> 00:08:57.200
we can capture it in a single array of

237
00:08:57.200 --> 00:08:58.366
tuples

238
00:08:58.366 --> 00:09:01.833
for example we can have a messages array

239
00:09:01.833 --> 00:09:04.366
there is a combination of the captured

240
00:09:04.366 --> 00:09:05.200
URL

241
00:09:05.200 --> 00:09:07.500
and the completion block yeah it's the

242
00:09:07.500 --> 00:09:08.700
signature

243
00:09:08.700 --> 00:09:12.066
of the get method basically

244
00:09:12.066 --> 00:09:14.266
now in the get method we can say

245
00:09:14.266 --> 00:09:15.666
message.append

246
00:09:15.666 --> 00:09:18.066
url and the completion block and if in

247
00:09:18.066 --> 00:09:20.133
the future we add more parameters to

248
00:09:20.133 --> 00:09:21.100
this method

249
00:09:21.100 --> 00:09:24.133
we append it to the tuple as well right

250
00:09:24.133 --> 00:09:27.433
so there is no need for completions now

251
00:09:27.433 --> 00:09:30.066
we can just use the messages array at

252
00:09:30.066 --> 00:09:30.633
index

253
00:09:30.633 --> 00:09:33.500
.completion the completion for that

254
00:09:33.500 --> 00:09:34.233
message

255
00:09:34.233 --> 00:09:36.800
and then complete with error exactly and

256
00:09:36.800 --> 00:09:39.333
we can do the same for the requestedURLs

257
00:09:39.333 --> 00:09:41.600
so we can make the requestedURLs a

258
00:09:41.600 --> 00:09:43.033
computed property

259
00:09:43.033 --> 00:09:46.633
yes and we return

260
00:09:46.633 --> 00:09:50.133
messages.map and we get only the

261
00:09:50.133 --> 00:09:50.933
URLs

262
00:09:50.933 --> 00:09:53.500
inside the messages and we don't need to

263
00:09:53.500 --> 00:09:54.066
capture

264
00:09:54.066 --> 00:09:58.000
the URLs anymore and we didn't break

265
00:09:58.000 --> 00:10:00.300
the clients and that's how I implement

266
00:10:00.300 --> 00:10:01.333
spies normally

267
00:10:01.333 --> 00:10:03.733
I like to just capture values I find

268
00:10:03.733 --> 00:10:04.533
this very

269
00:10:04.533 --> 00:10:07.666
nice let's commit so

270
00:10:07.666 --> 00:10:11.833
combine spy captured params

271
00:10:11.833 --> 00:10:15.033
into a single type and it's a tuple

272
00:10:15.033 --> 00:10:19.266
yeah okay looking clean

273
00:10:19.266 --> 00:10:23.333
okay another addition with this test

274
00:10:23.333 --> 00:10:25.033
was the completion block in the load

275
00:10:25.033 --> 00:10:27.266
method that was not used before

276
00:10:27.266 --> 00:10:29.500
in other tests and now to break the

277
00:10:29.500 --> 00:10:30.533
tests we added

278
00:10:30.533 --> 00:10:33.433
a default value to the parameter but

279
00:10:33.433 --> 00:10:34.800
this is not actually the behavior we

280
00:10:34.800 --> 00:10:36.366
want in production we want someone to

281
00:10:36.366 --> 00:10:37.333
always pass

282
00:10:37.333 --> 00:10:39.333
a completion block so now we can move

283
00:10:39.333 --> 00:10:40.700
this default parameter

284
00:10:40.700 --> 00:10:43.733
to the test scope okay

285
00:10:43.733 --> 00:10:46.933
so this enables us to continue with the

286
00:10:46.933 --> 00:10:48.800
load function in the production side

287
00:10:48.800 --> 00:10:50.700
without having to think about this

288
00:10:50.700 --> 00:10:52.633
exactly I think it's a good time to do

289
00:10:52.633 --> 00:10:54.366
it yeah

290
00:10:54.366 --> 00:10:57.900
let's commit it yeah remove default

291
00:10:57.900 --> 00:11:01.033
value for completion block moved it

292
00:11:01.033 --> 00:11:04.533
to the test yep great

293
00:11:04.533 --> 00:11:06.466
so what is the next behavior let's have

294
00:11:06.466 --> 00:11:07.733
a look at the requirements

295
00:11:07.733 --> 00:11:11.733
connectivity is done now invalid data

296
00:11:11.733 --> 00:11:14.133
so what is invalid data so if we take a

297
00:11:14.133 --> 00:11:14.800
look at the

298
00:11:14.800 --> 00:11:17.733
response we see that we are expecting a

299
00:11:17.733 --> 00:11:19.100
200

300
00:11:19.100 --> 00:11:21.433
HTTP response status code from the

301
00:11:21.433 --> 00:11:22.233
server

302
00:11:22.233 --> 00:11:24.133
okay we can start there if it's not a

303
00:11:24.133 --> 00:11:25.433
200 response

304
00:11:25.433 --> 00:11:29.266
it's an error

305
00:11:29.266 --> 00:11:32.066
so I think I'm gonna copy the delivers

306
00:11:32.066 --> 00:11:33.100
error test

307
00:11:33.100 --> 00:11:34.800
because this is also an error test and

308
00:11:34.800 --> 00:11:36.466
we change it okay

309
00:11:36.466 --> 00:11:40.233
yes so delivers error on

310
00:11:40.233 --> 00:11:44.533
non 200 HTTP

311
00:11:44.533 --> 00:11:48.000
response okay so instead of sending a

312
00:11:48.000 --> 00:11:49.666
client ever now

313
00:11:49.666 --> 00:11:51.733
we are going to complete with a status

314
00:11:51.733 --> 00:11:52.700
code

315
00:11:52.700 --> 00:11:55.833
yes and let's say 400 anything that is

316
00:11:55.833 --> 00:11:56.700
not 200

317
00:11:56.700 --> 00:11:58.700
but it's not a connectivity error anymore

318
00:11:58.700 --> 00:12:00.233
is it, no

319
00:12:00.233 --> 00:12:03.266
there will be invalid data

320
00:12:03.266 --> 00:12:06.700
okay so let's add our case invalid

321
00:12:06.700 --> 00:12:09.733
data and we need to implement

322
00:12:09.733 --> 00:12:13.100
the complete with status code right so

323
00:12:13.100 --> 00:12:15.900
our spy now is going to help us complete

324
00:12:15.900 --> 00:12:17.833
with status code

325
00:12:17.833 --> 00:12:20.133
it's an integer and let's also pass an

326
00:12:20.133 --> 00:12:20.866
index

327
00:12:20.866 --> 00:12:24.000
as before for the messages so how can we

328
00:12:24.000 --> 00:12:25.033
create a response

329
00:12:25.033 --> 00:12:27.900
with a status code, Foundation offers the

330
00:12:27.900 --> 00:12:29.833
HTTPURLResponse type

331
00:12:29.833 --> 00:12:32.700
perfect yeah this is the standard type

332
00:12:32.700 --> 00:12:33.833
we can use

333
00:12:33.833 --> 00:12:36.133
so the URL we can grab that from the

334
00:12:36.133 --> 00:12:38.066
requestedURLs okay

335
00:12:38.066 --> 00:12:41.033
requestedURLs at index perfect status

336
00:12:41.033 --> 00:12:41.600
code

337
00:12:41.600 --> 00:12:44.466
is the code passed to this method and

338
00:12:44.466 --> 00:12:45.733
HTTP version

339
00:12:45.733 --> 00:12:47.733
I don't care about this and I also don't

340
00:12:47.733 --> 00:12:49.100
care about the headers

341
00:12:49.100 --> 00:12:52.133
nice let's format that

342
00:12:52.133 --> 00:12:54.633
and then we invoke as before our

343
00:12:54.633 --> 00:12:55.733
messages

344
00:12:55.733 --> 00:12:59.033
at index completion and we need to

345
00:12:59.033 --> 00:12:59.733
complete

346
00:12:59.733 --> 00:13:02.933
with an HTTPURLResponse now right hmm

347
00:13:02.933 --> 00:13:05.500
but we cannot do this yes yet we need to

348
00:13:05.500 --> 00:13:06.000
change some

349
00:13:06.000 --> 00:13:08.800
stuff because so far the client

350
00:13:08.800 --> 00:13:10.300
completes with just an Error

351
00:13:10.300 --> 00:13:13.200
so one way of doing it is to append

352
00:13:13.200 --> 00:13:14.000
another

353
00:13:14.000 --> 00:13:16.300
value after the Error and if I have a

354
00:13:16.300 --> 00:13:17.033
response

355
00:13:17.033 --> 00:13:18.933
I don't have an Error right for example

356
00:13:18.933 --> 00:13:20.300
the Error is nil

357
00:13:20.300 --> 00:13:22.233
yeah but I have a response and in the

358
00:13:22.233 --> 00:13:24.133
error case here I have an error but I

359
00:13:24.133 --> 00:13:25.033
don't have a response

360
00:13:25.033 --> 00:13:27.433
that is correct okay so we are starting

361
00:13:27.433 --> 00:13:29.033
to add some nullables here we might have

362
00:13:29.033 --> 00:13:30.533
to revisit this in the future

363
00:13:30.533 --> 00:13:32.466
but apparently that's the simplest thing

364
00:13:32.466 --> 00:13:34.866
to do right now so let's add a URL

365
00:13:34.866 --> 00:13:35.500
Response

366
00:13:35.500 --> 00:13:38.633
also optional yeah and let's solve the

367
00:13:38.633 --> 00:13:39.900
compiler errors now

368
00:13:39.900 --> 00:13:43.433
we now get error end response

369
00:13:43.433 --> 00:13:46.933
okay this is fixed

370
00:13:46.933 --> 00:13:50.133
in the spy we also get an optional Error

371
00:13:50.133 --> 00:13:54.700
and an optional HTTPURLResponse

372
00:13:54.700 --> 00:13:59.500
and the same in the get method let's run

373
00:13:59.500 --> 00:14:02.700
failing test perfect

374
00:14:02.700 --> 00:14:05.333
and it expected invalid data but it got

375
00:14:05.333 --> 00:14:06.533
connectivity

376
00:14:06.533 --> 00:14:08.933
because we are always completing with a

377
00:14:08.933 --> 00:14:09.733
connectivity

378
00:14:09.733 --> 00:14:12.300
error, so let's add some logic there to

379
00:14:12.300 --> 00:14:13.166
resolve that

380
00:14:13.166 --> 00:14:15.100
I guess it's pretty simple so we can either

381
00:14:15.100 --> 00:14:17.033
check for error or check for response

382
00:14:17.033 --> 00:14:21.433
right so if response is not nil

383
00:14:21.433 --> 00:14:24.866
we complete with invalid data

384
00:14:24.866 --> 00:14:27.733
else we complete with connectivity I

385
00:14:27.733 --> 00:14:29.433
think that should do it

386
00:14:29.433 --> 00:14:32.700
perfect it passes fantastic and

387
00:14:32.700 --> 00:14:34.633
just to show how important it is to

388
00:14:34.633 --> 00:14:36.933
capture all the errors in an array

389
00:14:36.933 --> 00:14:39.166
if I move this connectivity outside the

390
00:14:39.166 --> 00:14:41.166
if statement and I've seen this bug

391
00:14:41.166 --> 00:14:44.300
in many codebases countless times we're

392
00:14:44.300 --> 00:14:45.333
gonna get a failing test

393
00:14:45.333 --> 00:14:48.366
yeah because of the array yes

394
00:14:48.366 --> 00:14:51.666
exactly as you can see we got two errors

395
00:14:51.666 --> 00:14:53.733
I've seen many codebases where we

396
00:14:53.733 --> 00:14:55.733
forget as developers to add the else

397
00:14:55.733 --> 00:14:58.066
and we just complete every single time

398
00:14:58.066 --> 00:14:58.933
exactly

399
00:14:58.933 --> 00:15:00.866
so checking how many times completion

400
00:15:00.866 --> 00:15:02.633
was invoked is important I want it to be

401
00:15:02.633 --> 00:15:03.500
completed

402
00:15:03.500 --> 00:15:06.633
once and only once per request let's run

403
00:15:06.633 --> 00:15:07.433
the tests

404
00:15:07.433 --> 00:15:10.833
and commit

405
00:15:10.833 --> 00:15:14.233
delivers invalid data

406
00:15:14.233 --> 00:15:18.066
error on non 200 HTTP

407
00:15:18.066 --> 00:15:21.733
responses yes and I know what a lot of

408
00:15:21.733 --> 00:15:22.133
people

409
00:15:22.133 --> 00:15:25.900
are thinking right now you have one test

410
00:15:25.900 --> 00:15:28.700
for the 400 case right what about

411
00:15:28.700 --> 00:15:31.733
500 what about 404 yeah

412
00:15:31.733 --> 00:15:36.066
what about 201 what about 199

413
00:15:36.066 --> 00:15:39.166
yeah these are good examples and we can

414
00:15:39.166 --> 00:15:42.533
protect by testing some of these cases

415
00:15:42.533 --> 00:15:44.933
so how much is enough right that's a

416
00:15:44.933 --> 00:15:46.233
good question

417
00:15:46.233 --> 00:15:48.233
when I'm checking integers I like to

418
00:15:48.233 --> 00:15:49.733
check one

419
00:15:49.733 --> 00:15:52.533
less than a value, one more than the

420
00:15:52.533 --> 00:15:53.100
value

421
00:15:53.100 --> 00:15:55.433
in a couple of cases yeah I guess you

422
00:15:55.433 --> 00:15:56.700
can be very thorough

423
00:15:56.700 --> 00:15:59.666
check all the values as well exactly you

424
00:15:59.666 --> 00:16:01.166
can say from

425
00:16:01.166 --> 00:16:04.300
zero to infinity and you invoke these

426
00:16:04.300 --> 00:16:07.266
bazillion times yeah yeah but I think

427
00:16:07.266 --> 00:16:08.633
that's a good set

428
00:16:08.633 --> 00:16:12.233
yeah I think so

429
00:16:12.233 --> 00:16:14.633
so we iterate through all the examples

430
00:16:14.633 --> 00:16:17.100
and we capture the code

431
00:16:17.100 --> 00:16:18.866
and since we are capturing the errors in

432
00:16:18.866 --> 00:16:21.500
an array we want to reset the array

433
00:16:21.500 --> 00:16:25.600
after we are done it's passing

434
00:16:25.600 --> 00:16:27.900
but I think this reset after the test

435
00:16:27.900 --> 00:16:29.600
can be confusing for the readers of the

436
00:16:29.600 --> 00:16:30.233
code

437
00:16:30.233 --> 00:16:32.800
so why instead of resetting it we

438
00:16:32.800 --> 00:16:34.466
execute this

439
00:16:34.466 --> 00:16:37.333
for all the cases and then we want to

440
00:16:37.333 --> 00:16:38.300
complete

441
00:16:38.300 --> 00:16:43.266
the client request at a specific index

442
00:16:43.266 --> 00:16:45.833
and this index can be the index of the

443
00:16:45.833 --> 00:16:46.933
array here

444
00:16:46.933 --> 00:16:51.166
so we can enumerate our sample

445
00:16:51.166 --> 00:16:53.733
and now we get the index and the code so

446
00:16:53.733 --> 00:16:57.333
let's run the test

447
00:16:57.333 --> 00:16:59.666
passes but this is hard to read let's

448
00:16:59.666 --> 00:17:00.866
put this in a constant

449
00:17:00.866 --> 00:17:05.333
and call it samples

450
00:17:05.333 --> 00:17:10.300
let's run the test again fantastic

451
00:17:10.300 --> 00:17:13.333
Add more test assertions

452
00:17:13.333 --> 00:17:18.066
for different HTTP status code

453
00:17:18.066 --> 00:17:20.066
okay anything else we can refactor in

454
00:17:20.066 --> 00:17:21.566
this production code

455
00:17:21.566 --> 00:17:24.633
yes I'm very unhappy with this API with

456
00:17:24.633 --> 00:17:26.400
optional errors

457
00:17:26.400 --> 00:17:30.066
yes, yes, yes, for me the problem is that

458
00:17:30.066 --> 00:17:32.866
we either have an error or an HTTPURL

459
00:17:32.866 --> 00:17:33.500
Response

460
00:17:33.500 --> 00:17:35.833
up to now but we can represent a case

461
00:17:35.833 --> 00:17:37.266
here where both are nil

462
00:17:37.266 --> 00:17:39.033
the error is nil and the HTTPURL

463
00:17:39.033 --> 00:17:40.700
Response is nil well it should never

464
00:17:40.700 --> 00:17:41.200
happen

465
00:17:41.200 --> 00:17:43.033
right if something should never happen

466
00:17:43.033 --> 00:17:45.100
it shouldn't be representable in our

467
00:17:45.100 --> 00:17:45.566
code

468
00:17:45.566 --> 00:17:48.233
exactly we allow a case like this

469
00:17:48.233 --> 00:17:48.866
exactly

470
00:17:48.866 --> 00:17:52.233
because Error has two states nil

471
00:17:52.233 --> 00:17:55.200
or it has a value and HTTPURLResponse

472
00:17:55.200 --> 00:17:55.733
here

473
00:17:55.733 --> 00:17:57.833
since it's optional it has two cases as

474
00:17:57.833 --> 00:18:00.000
well, right, nil or with a value so we can

475
00:18:00.000 --> 00:18:00.866
represent here

476
00:18:00.866 --> 00:18:04.066
four different states why how far

477
00:18:04.066 --> 00:18:06.766
when we can have two exactly so we can

478
00:18:06.766 --> 00:18:07.833
create a new type

479
00:18:07.833 --> 00:18:11.433
let's make it a public enum HTTP

480
00:18:11.433 --> 00:18:15.433
ClientResult it's either success

481
00:18:15.433 --> 00:18:18.466
with the HTTPURLResponse yes

482
00:18:18.466 --> 00:18:21.666
or a failure with the Error that's it

483
00:18:21.666 --> 00:18:25.100
now we have restricted to two branches

484
00:18:25.100 --> 00:18:27.100
we are either going to have a success

485
00:18:27.100 --> 00:18:28.633
with a response or

486
00:18:28.633 --> 00:18:31.100
a failure with an error so now we can

487
00:18:31.100 --> 00:18:32.533
replace the optionals

488
00:18:32.533 --> 00:18:36.300
with our enum type and the code now

489
00:18:36.300 --> 00:18:39.733
gets only a result type instead of using

490
00:18:39.733 --> 00:18:42.133
an if statement we can switch on the

491
00:18:42.133 --> 00:18:43.500
result type

492
00:18:43.500 --> 00:18:46.633
so case success

493
00:18:46.633 --> 00:18:50.000
we complete with invalidData for now

494
00:18:50.000 --> 00:18:52.066
yeah I know it sounds silly but that's

495
00:18:52.066 --> 00:18:53.900
what we need now

496
00:18:53.900 --> 00:18:55.733
and case failure we complete with a

497
00:18:55.733 --> 00:18:58.066
connectivity error

498
00:18:58.066 --> 00:19:00.066
let's change our spy as well so the same

499
00:19:00.066 --> 00:19:01.266
thing in the spy

500
00:19:01.266 --> 00:19:07.600
we should now use our HTTPClientResult

501
00:19:07.600 --> 00:19:09.200
and when we complete now we don't need

502
00:19:09.200 --> 00:19:10.633
to pass nil

503
00:19:10.633 --> 00:19:13.266
we just wrap our response in the right

504
00:19:13.266 --> 00:19:14.233
case

505
00:19:14.233 --> 00:19:17.266
failure for errors and

506
00:19:17.266 --> 00:19:20.766
success for response

507
00:19:20.766 --> 00:19:24.400
fantastic and since the initializer of

508
00:19:24.400 --> 00:19:27.900
HTTPURLResponse returns an optional

509
00:19:27.900 --> 00:19:30.300
as you can see here right let's force

510
00:19:30.300 --> 00:19:32.000
unwrap it because we know that this

511
00:19:32.000 --> 00:19:33.900
hard-coded HTTPURLResponse we are

512
00:19:33.900 --> 00:19:35.200
creating is always valid

513
00:19:35.200 --> 00:19:38.533
so let's run our tests

514
00:19:38.533 --> 00:19:41.733
it passes perfect let's commit so

515
00:19:41.733 --> 00:19:42.766
replace

516
00:19:42.766 --> 00:19:46.233
optional params with

517
00:19:46.233 --> 00:19:49.266
enum with success

518
00:19:49.266 --> 00:19:52.533
and failure cases I think this is much

519
00:19:52.533 --> 00:19:55.100
nicer absolutely and I think we're done

520
00:19:55.100 --> 00:19:56.400
for this episode

521
00:19:56.400 --> 00:19:59.900
let's have a quick recap we've moved on

522
00:19:59.900 --> 00:20:02.000
to checking the behavior of the Remote

523
00:20:02.000 --> 00:20:03.833
FeedLoader that delivers an error

524
00:20:03.833 --> 00:20:06.233
mapping client errors to a domain level

525
00:20:06.233 --> 00:20:08.066
error in this case the connectivity

526
00:20:08.066 --> 00:20:09.266
error and also

527
00:20:09.266 --> 00:20:12.400
when we get a known 200 HTTP response

528
00:20:12.400 --> 00:20:15.833
we also map it to a domain error invalid

529
00:20:15.833 --> 00:20:16.766
data

530
00:20:16.766 --> 00:20:19.833
and finally we showcased a way for

531
00:20:19.833 --> 00:20:20.466
designing

532
00:20:20.466 --> 00:20:24.000
APIs that exclude cases that you

533
00:20:24.000 --> 00:20:27.266
don't want ever to happen in this case

534
00:20:27.266 --> 00:20:30.466
removing the double optional parameters

535
00:20:30.466 --> 00:20:34.000
in favor of an enum so the goal is to

536
00:20:34.000 --> 00:20:34.466
make

537
00:20:34.466 --> 00:20:37.266
invalid paths unrepresentable and in

538
00:20:37.266 --> 00:20:38.700
this case instead of using

539
00:20:38.700 --> 00:20:41.266
two optionals we have an enum with two

540
00:20:41.266 --> 00:20:41.900
cases

541
00:20:41.900 --> 00:20:43.900
so it's either one or the other we

542
00:20:43.900 --> 00:20:46.066
eliminate two invalid states

543
00:20:46.066 --> 00:20:48.933
that was a big win absolutely imagine if

544
00:20:48.933 --> 00:20:49.433
we had

545
00:20:49.433 --> 00:20:52.000
a third optional parameter there then it

546
00:20:52.000 --> 00:20:53.200
would be chaos

547
00:20:53.200 --> 00:20:55.600
yes we would be able to represent eight

548
00:20:55.600 --> 00:20:56.866
possible states

549
00:20:56.866 --> 00:20:59.833
because when we combine optionals the

550
00:20:59.833 --> 00:21:01.833
number of representable states grows

551
00:21:01.833 --> 00:21:02.766
exponentially

552
00:21:02.766 --> 00:21:05.033
and who knows how many of these states

553
00:21:05.033 --> 00:21:06.300
we didn't actually

554
00:21:06.300 --> 00:21:09.600
never want to happen probably most yeah

555
00:21:09.600 --> 00:21:12.700
exactly we also showed how to test

556
00:21:12.700 --> 00:21:15.733
with samples by having a simple array

557
00:21:15.733 --> 00:21:18.000
and the differences between capturing

558
00:21:18.000 --> 00:21:19.600
values in a spy

559
00:21:19.600 --> 00:21:22.000
and stubbing behaviors and in our

560
00:21:22.000 --> 00:21:23.200
current tests

561
00:21:23.200 --> 00:21:25.433
we prefer to capture values to keep our

562
00:21:25.433 --> 00:21:26.233
spy

563
00:21:26.233 --> 00:21:29.433
clean and simple yeah keep it pure

564
00:21:29.433 --> 00:21:32.933
no need to mix those two so coming next

565
00:21:32.933 --> 00:21:35.900
we should start mapping the response

566
00:21:35.900 --> 00:21:36.533
into

567
00:21:36.533 --> 00:21:40.133
FeedItems okay happy path and handling

568
00:21:40.133 --> 00:21:42.466
mapping errors as well the sad path

569
00:21:42.466 --> 00:21:43.500
right

570
00:21:43.500 --> 00:21:45.433
so thanks for watching and we'll see you

571
00:21:45.433 --> 00:21:59.833
next time bye y'all