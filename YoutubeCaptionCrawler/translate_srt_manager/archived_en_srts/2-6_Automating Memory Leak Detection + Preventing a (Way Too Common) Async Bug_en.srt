1
00:00:01.100 --> 00:00:03.666
Hello Mike, hey Caio, so in the previous

2
00:00:03.666 --> 00:00:05.433
episode we promised to start some tidy

3
00:00:05.433 --> 00:00:05.666
up

4
00:00:05.666 --> 00:00:08.400
in the code so it's time yep let's

5
00:00:08.400 --> 00:00:09.566
organize the project

6
00:00:09.566 --> 00:00:11.100
first thing we mentioned is to move

7
00:00:11.100 --> 00:00:12.766
those types into separate files

8
00:00:12.766 --> 00:00:15.266
right so we have the HTTPClient and the

9
00:00:15.266 --> 00:00:17.433
HTTPClientResult so I think

10
00:00:17.433 --> 00:00:20.133
both of these can go to a separate file

11
00:00:20.133 --> 00:00:21.833
exactly since they are related

12
00:00:21.833 --> 00:00:24.466
they're both HTTPClient types let's

13
00:00:24.466 --> 00:00:25.666
keep them together for now

14
00:00:25.666 --> 00:00:28.866
yep let's see if we can still build yeah

15
00:00:28.866 --> 00:00:31.833
perfect and the test is passing let's

16
00:00:31.833 --> 00:00:33.033
commit

17
00:00:33.033 --> 00:00:36.933
move HTTPClient to its own file

18
00:00:36.933 --> 00:00:40.233
that's it what else can we fix here

19
00:00:40.233 --> 00:00:43.200
I think the FeedItemsMapper is a good

20
00:00:43.200 --> 00:00:44.300
candidate

21
00:00:44.300 --> 00:00:47.266
okay it's a private type but our code

22
00:00:47.266 --> 00:00:48.466
could be tidier

23
00:00:48.466 --> 00:00:51.166
if we move it to a separate file right

24
00:00:51.166 --> 00:00:51.833
and

25
00:00:51.833 --> 00:00:54.000
this will become an internal type since

26
00:00:54.000 --> 00:00:55.900
we move it to a new file

27
00:00:55.900 --> 00:00:57.433
and I think it makes sense to be

28
00:00:57.433 --> 00:00:59.166
internal because this Feed

29
00:00:59.166 --> 00:01:02.133
API folder we have it's meant to live in

30
00:01:02.133 --> 00:01:02.633
its own

31
00:01:02.633 --> 00:01:05.666
framework in its own module and the Feed

32
00:01:05.666 --> 00:01:06.766
ItemsMapper

33
00:01:06.766 --> 00:01:09.433
would be internal to this module it will

34
00:01:09.433 --> 00:01:10.633
not be accessible by

35
00:01:10.633 --> 00:01:12.633
any other module so I think that makes

36
00:01:12.633 --> 00:01:14.633
sense for now and we don't have to add

37
00:01:14.633 --> 00:01:16.700
internal here because that's the default

38
00:01:16.700 --> 00:01:19.200
scope right but I think it's nice

39
00:01:19.200 --> 00:01:20.533
definitely I like it

40
00:01:20.533 --> 00:01:22.700
we can also make this class final

41
00:01:22.700 --> 00:01:24.766
exactly this is not meant to

42
00:01:24.766 --> 00:01:27.433
be subclassed so I like the final

43
00:01:27.433 --> 00:01:28.633
attribute as well

44
00:01:28.633 --> 00:01:30.466
and since we're adding the scope

45
00:01:30.466 --> 00:01:31.900
everywhere

46
00:01:31.900 --> 00:01:34.700
should this be internal or private yeah

47
00:01:34.700 --> 00:01:37.033
I think the static var can be private

48
00:01:37.033 --> 00:01:38.866
but the map function is used by the

49
00:01:38.866 --> 00:01:41.033
Loader so it needs to be internal

50
00:01:41.033 --> 00:01:43.100
as well yes but no other module has

51
00:01:43.100 --> 00:01:44.500
access to it perfect

52
00:01:45.733 --> 00:01:49.200
okay test is passing let's commit

53
00:01:49.200 --> 00:01:55.200
move FeedItemsMapper to its own file

54
00:01:55.200 --> 00:01:56.533
let's have a look at the RemoteFeed

55
00:01:56.533 --> 00:01:58.700
Loader I think it's much better now

56
00:01:58.700 --> 00:02:01.833
yeah much shorter only 40 lines of code

57
00:02:01.833 --> 00:02:04.766
in this file but this method looks a bit

58
00:02:04.766 --> 00:02:05.500
messy

59
00:02:05.500 --> 00:02:06.933
right there's a bunch of things going on

60
00:02:06.933 --> 00:02:08.533
here maybe we can extract

61
00:02:08.533 --> 00:02:11.500
some logic into a helper function yeah I

62
00:02:11.500 --> 00:02:12.866
think it makes sense

63
00:02:12.866 --> 00:02:15.166
we can extract the success there with

64
00:02:15.166 --> 00:02:16.000
the mapping

65
00:02:16.000 --> 00:02:21.566
in its own function

66
00:02:21.566 --> 00:02:24.300
so we can move the data and the response

67
00:02:24.300 --> 00:02:26.066
and it should return

68
00:02:26.066 --> 00:02:29.200
Result then we can move this logic

69
00:02:29.200 --> 00:02:32.000
in here instead of completing we just

70
00:02:32.000 --> 00:02:32.533
return

71
00:02:32.533 --> 00:02:36.133
the result

72
00:02:36.133 --> 00:02:39.266
then we just need to complete

73
00:02:39.266 --> 00:02:43.033
by mapping the data from the received

74
00:02:43.033 --> 00:02:48.633
response right let's see if it passes

75
00:02:48.633 --> 00:02:53.266
it is passing however

76
00:02:53.266 --> 00:02:55.733
now we are capturing self in this block

77
00:02:55.733 --> 00:02:56.633
yes

78
00:02:56.633 --> 00:02:59.733
is this what we want probably not we

79
00:02:59.733 --> 00:03:01.266
might have a retained cycle here for

80
00:03:01.266 --> 00:03:02.233
example

81
00:03:02.233 --> 00:03:05.200
depending on how this client is created

82
00:03:05.200 --> 00:03:05.833
right

83
00:03:05.833 --> 00:03:08.000
exactly but all the tests are passing

84
00:03:08.000 --> 00:03:09.433
and that's problematic

85
00:03:09.433 --> 00:03:12.466
yes because we are not covering memory

86
00:03:12.466 --> 00:03:13.666
leaks

87
00:03:13.666 --> 00:03:15.033
so I think we should add some kind of

88
00:03:15.033 --> 00:03:17.100
safeties in our tests to check this

89
00:03:17.100 --> 00:03:19.833
yes exactly let's do it so in every test

90
00:03:19.833 --> 00:03:21.433
here we need to check

91
00:03:21.433 --> 00:03:23.666
for memory leaks because different

92
00:03:23.666 --> 00:03:25.433
actions can generate the memory leak

93
00:03:25.433 --> 00:03:28.400
right so we can either add assertions in

94
00:03:28.400 --> 00:03:29.266
every test

95
00:03:29.266 --> 00:03:31.500
or we can find a place where we can edit

96
00:03:31.500 --> 00:03:32.466
and it's going to cover

97
00:03:32.466 --> 00:03:35.500
all scenarios like the makeSUT

98
00:03:35.500 --> 00:03:38.300
helper yes every test use the makeSUT

99
00:03:38.300 --> 00:03:39.200
function

100
00:03:39.200 --> 00:03:41.333
and yeah I think that's a good place to

101
00:03:41.333 --> 00:03:42.400
edit

102
00:03:42.400 --> 00:03:45.266
so we need to run this assertion after

103
00:03:45.266 --> 00:03:46.233
the test

104
00:03:46.233 --> 00:03:48.466
finished right and we need to make sure

105
00:03:48.466 --> 00:03:49.566
that the sut

106
00:03:49.566 --> 00:03:52.233
was deallocated from memory and one way

107
00:03:52.233 --> 00:03:53.433
we can run

108
00:03:53.433 --> 00:03:55.666
those assertions after a test is passed

109
00:03:55.666 --> 00:03:56.533
is to use the

110
00:03:56.533 --> 00:03:58.466
tearDown method but there's an extra

111
00:03:58.466 --> 00:04:00.933
facility that the exit test case

112
00:04:00.933 --> 00:04:03.900
class give us which is to add a tearDown

113
00:04:03.900 --> 00:04:04.466
block

114
00:04:04.466 --> 00:04:07.833
which is run after each test right so

115
00:04:07.833 --> 00:04:10.633
when every test finishes running then

116
00:04:10.633 --> 00:04:11.900
the tearDown block

117
00:04:11.900 --> 00:04:14.633
is invoked yes yeah that should do it so

118
00:04:14.633 --> 00:04:17.166
what we need to do is to assert

119
00:04:17.166 --> 00:04:20.233
nil sut right we need to make sure

120
00:04:20.233 --> 00:04:23.100
that the instance of the system under

121
00:04:23.100 --> 00:04:23.600
test

122
00:04:23.600 --> 00:04:26.800
is gonna be nil after each test runs

123
00:04:26.800 --> 00:04:29.733
yes and let's set a nice message here so

124
00:04:29.733 --> 00:04:31.033
instance

125
00:04:31.033 --> 00:04:35.166
should have been deallocated potential

126
00:04:35.166 --> 00:04:37.833
memory leak right I like that but now we

127
00:04:37.833 --> 00:04:38.533
are capturing

128
00:04:38.533 --> 00:04:42.066
sut strongly inside this block so this

129
00:04:42.066 --> 00:04:42.933
would never

130
00:04:42.933 --> 00:04:45.166
be nil yeah exactly so we can just

131
00:04:45.166 --> 00:04:46.233
capture it

132
00:04:46.233 --> 00:04:48.533
as weak yep and I expect to see a

133
00:04:48.533 --> 00:04:50.133
failing test now because we introduced

134
00:04:50.133 --> 00:04:50.533
that

135
00:04:50.533 --> 00:04:52.066
strong reference to self inside the

136
00:04:52.066 --> 00:04:53.833
block yeah a bunch of failing tests

137
00:04:53.833 --> 00:04:55.100
actually

138
00:04:55.100 --> 00:04:57.733
yes there there you go so looks like all

139
00:04:57.733 --> 00:04:59.500
the tests are failing that's great

140
00:04:59.500 --> 00:05:01.266
wow that's great but I would like to see

141
00:05:01.266 --> 00:05:02.866
this message in the right

142
00:05:02.866 --> 00:05:05.433
line where it failed so we can use the

143
00:05:05.433 --> 00:05:06.300
same trick

144
00:05:06.300 --> 00:05:08.300
we used in the previous episode and we

145
00:05:08.300 --> 00:05:10.700
can pass the file

146
00:05:10.700 --> 00:05:13.833
and the line to the assertion

147
00:05:13.833 --> 00:05:17.433
okay now we can see the failures

148
00:05:17.433 --> 00:05:21.166
exactly where it happened very nice

149
00:05:21.166 --> 00:05:23.900
but we need to solve it and I think for

150
00:05:23.900 --> 00:05:25.033
now we can just

151
00:05:25.033 --> 00:05:28.800
undo our change here let's run the test

152
00:05:28.800 --> 00:05:32.233
yes it's passing

153
00:05:32.233 --> 00:05:33.600
or should we check for the client as

154
00:05:33.600 --> 00:05:35.833
well yeah I think so

155
00:05:35.833 --> 00:05:38.233
okay so we can either add another weak

156
00:05:38.233 --> 00:05:40.133
reference here to the client

157
00:05:40.133 --> 00:05:42.700
or we can just create a helper function

158
00:05:42.700 --> 00:05:43.833
something like

159
00:05:43.833 --> 00:05:47.333
track for memory leaks

160
00:05:47.333 --> 00:05:49.833
and we can pass the instance and it

161
00:05:49.833 --> 00:05:51.033
needs to be

162
00:05:51.033 --> 00:05:53.733
AnyObject let me pass the file and line

163
00:05:53.733 --> 00:05:54.300
as well

164
00:05:54.300 --> 00:05:57.666
so we can move this logic to this helper

165
00:05:57.666 --> 00:05:58.233
function

166
00:05:58.233 --> 00:06:02.000
and now we weakify the instance

167
00:06:02.000 --> 00:06:04.533
and now we can run for sut and for the

168
00:06:04.533 --> 00:06:05.166
client

169
00:06:05.166 --> 00:06:07.500
as well yeah looks good hopefully it's

170
00:06:07.500 --> 00:06:08.866
going to pass

171
00:06:08.866 --> 00:06:11.600
fantastic let's commit but I don't want

172
00:06:11.600 --> 00:06:12.400
to commit

173
00:06:12.400 --> 00:06:16.066
the production code yet

174
00:06:16.066 --> 00:06:19.666
so add memory leak detection

175
00:06:19.666 --> 00:06:24.400
great now back to the production code

176
00:06:24.400 --> 00:06:27.100
you can put it back but actually we

177
00:06:27.100 --> 00:06:28.633
could make this function static

178
00:06:28.633 --> 00:06:31.833
right so we don't need to have an

179
00:06:31.833 --> 00:06:32.400
instance

180
00:06:32.400 --> 00:06:35.033
to run this code that wouldn't require self

181
00:06:35.033 --> 00:06:36.633
and we won't have to

182
00:06:36.633 --> 00:06:39.733
weakify self exactly

183
00:06:39.733 --> 00:06:42.300
fantastic which even makes me think if

184
00:06:42.300 --> 00:06:43.733
this function should be a static

185
00:06:43.733 --> 00:06:44.400
function

186
00:06:44.400 --> 00:06:47.600
in the FeedItemsMapper right since

187
00:06:47.600 --> 00:06:50.000
it's a mapping function and we already

188
00:06:50.000 --> 00:06:52.133
have a designated place for all the Feed

189
00:06:52.133 --> 00:06:52.933
Items mapping

190
00:06:52.933 --> 00:06:54.800
we perhaps could move it there let's

191
00:06:54.800 --> 00:06:58.066
give it a try

192
00:06:58.066 --> 00:07:00.400
let's make it internal now so the logic

193
00:07:00.400 --> 00:07:01.500
is still the same

194
00:07:01.500 --> 00:07:05.433
we need to check for this status code

195
00:07:05.433 --> 00:07:07.733
so here I think we can return invalid

196
00:07:07.733 --> 00:07:08.633
data yeah

197
00:07:08.633 --> 00:07:11.900
a failure with invalid data oh

198
00:07:11.900 --> 00:07:13.666
and it doesn't know what is the Result

199
00:07:13.666 --> 00:07:16.700
because it needs the namespace yep

200
00:07:16.700 --> 00:07:19.100
RemoteFeedLoader.Result great and I

201
00:07:19.100 --> 00:07:21.266
think we can move this logic

202
00:07:21.266 --> 00:07:25.833
to the do catch block

203
00:07:25.833 --> 00:07:27.566
and we don't need this function anymore

204
00:07:27.566 --> 00:07:29.566
let's see

205
00:07:29.566 --> 00:07:32.066
yeah it's passing but we have this

206
00:07:32.066 --> 00:07:33.566
duplicated failure

207
00:07:33.566 --> 00:07:36.133
we can simplify it using a guard let

208
00:07:36.133 --> 00:07:38.400
let's see

209
00:07:38.400 --> 00:07:40.866
so the response needs to be 200 and we

210
00:07:40.866 --> 00:07:41.733
need to be able

211
00:07:41.733 --> 00:07:44.300
to map the JSON otherwise it's invalid

212
00:07:44.300 --> 00:07:45.333
data

213
00:07:45.333 --> 00:07:47.333
so now we don't need a catch block we

214
00:07:47.333 --> 00:07:49.100
don't need to do block and we don't need

215
00:07:49.100 --> 00:07:50.800
the root

216
00:07:50.800 --> 00:07:53.900
that should do it fantastic and I think

217
00:07:53.900 --> 00:07:55.833
we can even move this mapping logic

218
00:07:55.833 --> 00:07:57.500
to a computed var like we did with the

219
00:07:57.500 --> 00:07:59.900
item right so we can have some kind of

220
00:07:59.900 --> 00:08:04.233
feed which is an array of FeedItems and

221
00:08:04.233 --> 00:08:06.066
we can just move this mapping logic here

222
00:08:06.066 --> 00:08:09.500
so return items.map

223
00:08:09.500 --> 00:08:13.100
so here is just root.feed

224
00:08:13.100 --> 00:08:16.400
beautiful very nice

225
00:08:16.400 --> 00:08:19.433
anything else I don't see anything else

226
00:08:19.433 --> 00:08:22.466
so let's commit move all

227
00:08:22.466 --> 00:08:26.700
mapping logic to the FeedItems

228
00:08:26.700 --> 00:08:30.466
<apper that's it that's much nicer

229
00:08:30.466 --> 00:08:33.733
look at this yeah very clean

230
00:08:33.733 --> 00:08:36.133
and I like the static function there we

231
00:08:36.133 --> 00:08:37.433
don't have to capture self

232
00:08:37.433 --> 00:08:39.566
inside the block well another way we

233
00:08:39.566 --> 00:08:42.133
could do it is to have a weak

234
00:08:42.133 --> 00:08:46.366
self here and use a guard let

235
00:08:46.366 --> 00:08:48.700
if we had the helper method for example

236
00:08:48.700 --> 00:08:50.133
and here we could use self

237
00:08:50.133 --> 00:08:52.233
and not hold a strong reference to it

238
00:08:52.233 --> 00:08:54.366
right or we could also use the unowned

239
00:08:54.366 --> 00:08:56.366
reference which would be implicitly

240
00:08:56.366 --> 00:08:57.733
unwrapped right

241
00:08:57.733 --> 00:09:01.100
but this guard let is very different

242
00:09:01.100 --> 00:09:03.600
than using a static method it looks the

243
00:09:03.600 --> 00:09:05.500
same but it's not

244
00:09:05.500 --> 00:09:08.066
there is more to it than just weakifying

245
00:09:08.066 --> 00:09:08.800
self

246
00:09:08.800 --> 00:09:09.900
there's the problem is when we make

247
00:09:09.900 --> 00:09:12.066
something weak and you return

248
00:09:12.066 --> 00:09:13.833
it means that this block would not be

249
00:09:13.833 --> 00:09:16.000
executed if the instance

250
00:09:16.000 --> 00:09:19.500
has been deallocated but if I'm using

251
00:09:19.500 --> 00:09:22.533
the static method as we are here

252
00:09:22.533 --> 00:09:25.100
even if the instance of the RemoteFeed

253
00:09:25.100 --> 00:09:25.600
Loader

254
00:09:25.600 --> 00:09:28.066
has been deallocated this block may still

255
00:09:28.066 --> 00:09:28.800
be invoked

256
00:09:28.800 --> 00:09:30.233
and we might still call the completion

257
00:09:30.233 --> 00:09:31.733
block right because we don't know the

258
00:09:31.733 --> 00:09:33.100
implementation of the client maybe it's

259
00:09:33.100 --> 00:09:33.900
a Singleton

260
00:09:33.900 --> 00:09:35.666
and it lives longer than the Remote

261
00:09:35.666 --> 00:09:38.233
FeedLoader exactly

262
00:09:38.233 --> 00:09:39.733
and this might be a bug because

263
00:09:39.733 --> 00:09:42.000
consumers of this RemoteFeedLoader

264
00:09:42.000 --> 00:09:43.833
may not expect the completion block to

265
00:09:43.833 --> 00:09:45.600
be invoked after

266
00:09:45.600 --> 00:09:47.733
the instance has been deallocated and that

267
00:09:47.733 --> 00:09:48.633
might be a problem

268
00:09:48.633 --> 00:09:51.033
so we need to instruct the RemoteFeed

269
00:09:51.033 --> 00:09:51.666
Loader

270
00:09:51.666 --> 00:09:54.366
to prevent this behavior from happening

271
00:09:54.366 --> 00:09:55.033
yes

272
00:09:55.033 --> 00:09:56.866
and we can improve this behavior with a

273
00:09:56.866 --> 00:09:59.200
test and I think that's a good idea

274
00:09:59.200 --> 00:10:02.233
yeah definitely so let's create our test

275
00:10:02.233 --> 00:10:02.866
here

276
00:10:02.866 --> 00:10:05.733
load and what is the behavior well it

277
00:10:05.733 --> 00:10:07.033
does not

278
00:10:07.033 --> 00:10:10.133
deliver result after the

279
00:10:10.133 --> 00:10:13.733
sut instance has been deallocated

280
00:10:13.733 --> 00:10:16.933
yeah so what we need is to create an sut

281
00:10:16.933 --> 00:10:18.533
and we're going to have to force its

282
00:10:18.533 --> 00:10:20.533
type to be optional so we can

283
00:10:20.533 --> 00:10:23.600
deallocate it by setting it to nil

284
00:10:23.600 --> 00:10:25.033
so what do we need to create a Remote

285
00:10:25.033 --> 00:10:27.033
FeedLoader we need a URL

286
00:10:27.033 --> 00:10:29.900
and we need our client so let's do this

287
00:10:29.900 --> 00:10:32.233
so the client is an HTTPClientSpy

288
00:10:32.233 --> 00:10:33.200
that's easy

289
00:10:33.200 --> 00:10:36.800
and the URL is any URL

290
00:10:36.800 --> 00:10:40.066
fantastic so this is our setup

291
00:10:40.066 --> 00:10:44.300
our given right and we want to assert

292
00:10:44.300 --> 00:10:47.433
that our capturedResults let's say is

293
00:10:47.433 --> 00:10:48.233
empty

294
00:10:48.233 --> 00:10:50.933
after some action yeah so the action is

295
00:10:50.933 --> 00:10:52.633
you set the sut to nil

296
00:10:52.633 --> 00:10:54.533
first of all which means this is going

297
00:10:54.533 --> 00:10:56.533
to be deallocated it won't be in memory

298
00:10:56.533 --> 00:10:57.433
anymore

299
00:10:57.433 --> 00:10:59.733
and we want our client to complete with

300
00:10:59.733 --> 00:11:00.933
anything right

301
00:11:00.933 --> 00:11:04.066
after the sut has gone away we want the

302
00:11:04.066 --> 00:11:05.600
client to do something

303
00:11:05.600 --> 00:11:08.066
yes it could be an error it could be a

304
00:11:08.066 --> 00:11:08.800
response

305
00:11:08.800 --> 00:11:10.700
with a valid JSON invalid JSON doesn't

306
00:11:10.700 --> 00:11:11.833
matter you should not complete with

307
00:11:11.833 --> 00:11:13.433
errors and you should not complete

308
00:11:13.433 --> 00:11:16.133
with success it should not complete at

309
00:11:16.133 --> 00:11:17.500
all

310
00:11:17.500 --> 00:11:19.733
yeah so we need to capture the results

311
00:11:19.733 --> 00:11:22.300
and I think we can copy these from our

312
00:11:22.300 --> 00:11:24.933
previous setups yeah right here

313
00:11:24.933 --> 00:11:26.533
fantastic

314
00:11:26.533 --> 00:11:28.300
so that's the setup we capture all the

315
00:11:28.300 --> 00:11:29.833
results where we expect

316
00:11:29.833 --> 00:11:34.300
to not have received a result

317
00:11:34.300 --> 00:11:36.866
boom failing test we just proved that

318
00:11:36.866 --> 00:11:38.633
we are always completing regardless if

319
00:11:38.633 --> 00:11:39.266
the instance

320
00:11:39.266 --> 00:11:41.600
has been deallocated or not and I don't

321
00:11:41.600 --> 00:11:42.366
like this behavior

322
00:11:42.366 --> 00:11:45.500
so we can fix it and it's a very easy

323
00:11:45.500 --> 00:11:46.300
fix

324
00:11:46.300 --> 00:11:47.600
for example we can just get a weak

325
00:11:47.600 --> 00:11:49.900
reference to self and check that

326
00:11:49.900 --> 00:11:55.100
self is not nil else you just return

327
00:11:55.100 --> 00:11:57.333
okay problem solved and this is a very

328
00:11:57.333 --> 00:11:59.666
common bug I see in codebases

329
00:11:59.666 --> 00:12:01.833
instances are deallocated right but

330
00:12:01.833 --> 00:12:03.100
unexpected behaviors

331
00:12:03.100 --> 00:12:05.333
start happening for example some UIView

332
00:12:05.333 --> 00:12:07.200
Controller has been deallocated but some

333
00:12:07.200 --> 00:12:08.633
strong reference to a

334
00:12:08.633 --> 00:12:11.100
label or a collection view was inside a

335
00:12:11.100 --> 00:12:12.366
block to get executed

336
00:12:12.366 --> 00:12:14.700
after the fact and it's so hard to debug

337
00:12:14.700 --> 00:12:15.600
this

338
00:12:15.600 --> 00:12:18.533
yeah because I think we are conditioned

339
00:12:18.533 --> 00:12:20.066
to think about the class that we're

340
00:12:20.066 --> 00:12:20.633
building

341
00:12:20.633 --> 00:12:22.133
and we don't think about the

342
00:12:22.133 --> 00:12:24.700
collaborators how they might behave

343
00:12:24.700 --> 00:12:28.133
so it's easy to miss this for sure

344
00:12:28.133 --> 00:12:30.800
and now we left a trail we left a test

345
00:12:30.800 --> 00:12:31.266
that

346
00:12:31.266 --> 00:12:33.033
it's some kind of documentation telling

347
00:12:33.033 --> 00:12:34.933
the next developer that thinks about

348
00:12:34.933 --> 00:12:36.866
removing that line of code to remember

349
00:12:36.866 --> 00:12:37.333
that

350
00:12:37.333 --> 00:12:39.200
it is there for a reason yeah that's my

351
00:12:39.200 --> 00:12:40.466
favorite part of all

352
00:12:40.466 --> 00:12:41.600
that as you said this is

353
00:12:41.600 --> 00:12:43.900
self-documenting right there it says

354
00:12:43.900 --> 00:12:46.066
we are checking we are thinking about

355
00:12:46.066 --> 00:12:48.300
this behavior I really like that

356
00:12:48.300 --> 00:12:51.033
exactly and if we wanted it to complete

357
00:12:51.033 --> 00:12:52.866
after the instance has been deallocated we

358
00:12:52.866 --> 00:12:53.500
could add

359
00:12:53.500 --> 00:12:56.000
the inverse test by checking that even

360
00:12:56.000 --> 00:12:57.666
though the instance was deallocated

361
00:12:57.666 --> 00:13:00.133
we got a result back so in this case we

362
00:13:00.133 --> 00:13:01.333
don't want it to happen

363
00:13:01.333 --> 00:13:02.866
but if you want it to happen you can

364
00:13:02.866 --> 00:13:04.933
also add a test for it I think these are

365
00:13:04.933 --> 00:13:06.000
also the dangers when

366
00:13:06.000 --> 00:13:08.000
you're dealing with asynchronous code

367
00:13:08.000 --> 00:13:09.433
it's the essence

368
00:13:09.433 --> 00:13:12.133
and the element of time basically that

369
00:13:12.133 --> 00:13:13.433
you don't know what's going to happen

370
00:13:13.433 --> 00:13:14.633
you don't control that

371
00:13:14.633 --> 00:13:17.500
so you need to think about all these

372
00:13:17.500 --> 00:13:18.700
edge cases

373
00:13:18.700 --> 00:13:20.866
and you need to prevent them I've dealt

374
00:13:20.866 --> 00:13:22.533
with this bug so many times

375
00:13:22.533 --> 00:13:25.600
that I learned my lesson yep exactly so

376
00:13:25.600 --> 00:13:26.533
let's commit

377
00:13:26.533 --> 00:13:29.900
yep guarantee we do

378
00:13:29.900 --> 00:13:33.033
not deliver a result

379
00:13:33.033 --> 00:13:36.866
or invoke the completion

380
00:13:36.866 --> 00:13:40.300
closure after the Remote

381
00:13:40.300 --> 00:13:44.300
FeedLoader instance has been deallocated

382
00:13:44.300 --> 00:13:48.066
beautiful one last thing I see is the

383
00:13:48.066 --> 00:13:48.866
fact that the

384
00:13:48.866 --> 00:13:51.733
RemoteFeedLoaderTests is alone in the

385
00:13:51.733 --> 00:13:53.333
EssentialFeedTests folder

386
00:13:53.333 --> 00:13:56.466
I think we can encapsulate it in a Feed

387
00:13:56.466 --> 00:13:57.100
API

388
00:13:57.100 --> 00:13:59.100
folder so we can mirror the production

389
00:13:59.100 --> 00:14:00.866
side

390
00:14:00.866 --> 00:14:04.800
okay Feed API good catch

391
00:14:04.800 --> 00:14:07.900
let's run the test okay

392
00:14:07.900 --> 00:14:12.933
let's commit move test file to a group

393
00:14:12.933 --> 00:14:16.300
to denote its module right

394
00:14:16.300 --> 00:14:19.733
and it's the Feed API and this makes me

395
00:14:19.733 --> 00:14:21.266
think also

396
00:14:21.266 --> 00:14:24.133
the difference in file count if you see

397
00:14:24.133 --> 00:14:25.333
the production side

398
00:14:25.333 --> 00:14:27.500
we have three files in the Feed API but

399
00:14:27.500 --> 00:14:28.466
only one file

400
00:14:28.466 --> 00:14:31.266
in the test side in the Feed API folder

401
00:14:31.266 --> 00:14:32.233
yeah and that's

402
00:14:32.233 --> 00:14:34.700
fairly common actually it's never one to

403
00:14:34.700 --> 00:14:35.666
one

404
00:14:35.666 --> 00:14:37.266
but if we check the coverage I'm pretty

405
00:14:37.266 --> 00:14:39.166
sure it's close to 100%

406
00:14:39.166 --> 00:14:41.833
or 100% yep because you don't need to

407
00:14:41.833 --> 00:14:43.666
test things like one by one

408
00:14:43.666 --> 00:14:45.033
for example we are testing the Feed

409
00:14:45.033 --> 00:14:47.333
ItemsMapper in integration

410
00:14:47.333 --> 00:14:49.433
as we mentioned in the previous episode

411
00:14:49.433 --> 00:14:50.366
so I'm pretty happy

412
00:14:50.366 --> 00:14:53.266
with the results so far not only that we

413
00:14:53.266 --> 00:14:54.366
should say that

414
00:14:54.366 --> 00:14:57.500
we started with a one to one ratio right

415
00:14:57.500 --> 00:15:00.533
we had just the RemoteFeedLoader file

416
00:15:00.533 --> 00:15:03.166
and the RemoteFeedLoaderTests file but

417
00:15:03.166 --> 00:15:04.533
as we followed the process

418
00:15:04.533 --> 00:15:07.733
and we started refactoring we then

419
00:15:07.733 --> 00:15:10.133
ended up with these three files there

420
00:15:10.133 --> 00:15:12.133
which I think is a good practice

421
00:15:12.133 --> 00:15:14.233
this is what we needed when we started

422
00:15:14.233 --> 00:15:16.066
out this is what we need right now

423
00:15:16.066 --> 00:15:18.866
so the project always changes and it

424
00:15:18.866 --> 00:15:20.866
changes to facilitate our needs right

425
00:15:20.866 --> 00:15:22.633
we want it to change we want it to be

426
00:15:22.633 --> 00:15:24.066
flexible yep

427
00:15:24.066 --> 00:15:26.533
beautiful okay let's have a look at the

428
00:15:26.533 --> 00:15:28.000
updated diagram

429
00:15:28.000 --> 00:15:30.466
we are done now with the RemoteFeed

430
00:15:30.466 --> 00:15:31.033
Loader

431
00:15:31.033 --> 00:15:33.266
we just need now to implement the

432
00:15:33.266 --> 00:15:34.466
interfaces here

433
00:15:34.466 --> 00:15:36.233
right and since now we have more than

434
00:15:36.233 --> 00:15:38.366
one type in this component

435
00:15:38.366 --> 00:15:40.466
I think we can even call it Feed API from

436
00:15:40.466 --> 00:15:41.600
now on yes

437
00:15:41.600 --> 00:15:43.733
exactly and the FeedLoader can be the

438
00:15:43.733 --> 00:15:45.133
Feed Feature

439
00:15:45.133 --> 00:15:48.800
module yep what do you think

440
00:15:48.800 --> 00:15:52.000
this is a modular view yes

441
00:15:52.000 --> 00:15:54.066
we can have a more granular view later

442
00:15:54.066 --> 00:15:55.733
on by adding all the types

443
00:15:55.733 --> 00:15:58.066
absolutely all right so next episode we

444
00:15:58.066 --> 00:15:59.600
are going to implement the Feed

445
00:15:59.600 --> 00:16:02.233
Loader protocol awesome all right see

446
00:16:02.233 --> 00:16:03.100
you next time

447
00:16:03.100 --> 00:16:14.633
bye y'all