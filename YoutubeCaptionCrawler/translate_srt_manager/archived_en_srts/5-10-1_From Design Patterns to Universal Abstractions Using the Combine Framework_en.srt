1
00:00:00.633 --> 00:00:03.100
Hello Mike, hello everyone, hey

2
00:00:03.100 --> 00:00:06.466
Caio in this lecture you'll learn how to

3
00:00:06.466 --> 00:00:07.266
refactor

4
00:00:07.266 --> 00:00:10.400
this composition from design patterns

5
00:00:10.400 --> 00:00:13.433
to universal abstractions using the

6
00:00:13.433 --> 00:00:14.233
Combine

7
00:00:14.233 --> 00:00:18.466
framework and why would we do that

8
00:00:18.466 --> 00:00:19.733
there's nothing wrong with design

9
00:00:19.733 --> 00:00:22.066
patterns but some design patterns

10
00:00:22.066 --> 00:00:24.933
are equivalent to universal abstractions

11
00:00:24.933 --> 00:00:26.633
from category theory

12
00:00:26.633 --> 00:00:29.900
which means we can seamlessly replace

13
00:00:29.900 --> 00:00:31.100
some design patterns

14
00:00:31.100 --> 00:00:34.300
with built-in Combine operators

15
00:00:34.300 --> 00:00:36.300
that can help us compose our application

16
00:00:36.300 --> 00:00:38.233
in the Composition Root

17
00:00:38.233 --> 00:00:40.233
so you don't need to develop maintain

18
00:00:40.233 --> 00:00:42.000
and test your own

19
00:00:42.000 --> 00:00:45.433
implementations you can use the built-in

20
00:00:45.433 --> 00:00:49.433
operators as building blocks fantastic

21
00:00:49.433 --> 00:00:51.600
let's start okay so the goal is to

22
00:00:51.600 --> 00:00:52.633
replace

23
00:00:52.633 --> 00:00:55.033
those design pattern implementations

24
00:00:55.033 --> 00:00:56.866
with Combine

25
00:00:56.866 --> 00:01:01.900
so let's import Combine

26
00:01:01.900 --> 00:01:03.733
and since we don't want to break our

27
00:01:03.733 --> 00:01:05.033
existing code

28
00:01:05.033 --> 00:01:08.133
let's do things step by step let's

29
00:01:08.133 --> 00:01:10.700
create a factory method to create

30
00:01:10.700 --> 00:01:14.066
remote feed loader with

31
00:01:14.066 --> 00:01:17.500
a local fallback

32
00:01:17.500 --> 00:01:21.033
but instead of returning a FeedLoader

33
00:01:21.033 --> 00:01:24.000
we want to return a Combine Publisher

34
00:01:24.000 --> 00:01:25.100
that produces

35
00:01:25.100 --> 00:01:28.300
exactly what a FeedLoader would so in

36
00:01:28.300 --> 00:01:28.933
this case

37
00:01:28.933 --> 00:01:32.133
the FeedLoader produces results of type

38
00:01:32.133 --> 00:01:35.266
FeedImage or Error right

39
00:01:35.266 --> 00:01:38.000
so let's get this type signature and

40
00:01:38.000 --> 00:01:41.833
let's return here a Combine Publisher

41
00:01:41.833 --> 00:01:44.066
which could be on AnyPublisher that can

42
00:01:44.066 --> 00:01:45.333
produce an array of

43
00:01:45.333 --> 00:01:48.466
FeedImages or an Error

44
00:01:48.466 --> 00:01:53.333
so let's copy the existing code in here

45
00:01:53.333 --> 00:01:55.266
so we need to create a RemoteFeedLoader

46
00:01:55.266 --> 00:01:56.700
with a URL

47
00:01:56.700 --> 00:02:00.066
and a HTTPClient but our RemoteFeed

48
00:02:00.066 --> 00:02:02.366
Loader doesn't know about Combine

49
00:02:02.366 --> 00:02:05.333
so we need to lift this FeedLoader to

50
00:02:05.333 --> 00:02:06.466
the Combine

51
00:02:06.466 --> 00:02:09.900
world so we can wrap our FeedLoader in a

52
00:02:09.900 --> 00:02:10.466
Combine

53
00:02:10.466 --> 00:02:12.633
Publisher and there are many Publishers

54
00:02:12.633 --> 00:02:13.833
you can create

55
00:02:13.833 --> 00:02:16.800
one of those Publishers is a Future that

56
00:02:16.800 --> 00:02:19.200
starts with a completion block

57
00:02:19.200 --> 00:02:20.800
and once you're done with work you call

58
00:02:20.800 --> 00:02:23.266
the completion with some result

59
00:02:23.266 --> 00:02:24.933
what we can do inside this Future is to

60
00:02:24.933 --> 00:02:27.200
actually invoke our RemoteFeedLoader

61
00:02:27.200 --> 00:02:30.533
load operation and complete

62
00:02:30.533 --> 00:02:32.700
with the completion because they have

63
00:02:32.700 --> 00:02:34.933
matching types

64
00:02:34.933 --> 00:02:38.000
remember we are completing with either

65
00:02:38.000 --> 00:02:40.133
an array of FeedImages or Error which

66
00:02:40.133 --> 00:02:41.900
is exactly the same signature

67
00:02:41.900 --> 00:02:44.800
that our RemoteFeedLoader produces but

68
00:02:44.800 --> 00:02:47.100
now the compiler is complaining that

69
00:02:47.100 --> 00:02:50.133
Future is a different type that we

70
00:02:50.133 --> 00:02:50.800
expect

71
00:02:50.800 --> 00:02:52.633
in the return method so here we could

72
00:02:52.633 --> 00:02:54.233
return

73
00:02:54.233 --> 00:02:57.433
a Future the compiler will be happy

74
00:02:57.433 --> 00:02:59.566
but using a Future is an implementation

75
00:02:59.566 --> 00:03:00.633
detail

76
00:03:00.633 --> 00:03:03.033
if you don't want to expose that detail you

77
00:03:03.033 --> 00:03:04.133
can erase

78
00:03:04.133 --> 00:03:06.866
ToAnyPublisher to hide from clients

79
00:03:06.866 --> 00:03:07.433
which

80
00:03:07.433 --> 00:03:09.666
Publisher you are using so when you

81
00:03:09.666 --> 00:03:10.700
don't expose

82
00:03:10.700 --> 00:03:12.866
the specific Publisher you are using you

83
00:03:12.866 --> 00:03:14.800
can use type erasure

84
00:03:14.800 --> 00:03:18.400
with the eraseToAnyPublisher operator

85
00:03:18.400 --> 00:03:21.266
right instead of leaking the

86
00:03:21.266 --> 00:03:22.800
implementation detail of

87
00:03:22.800 --> 00:03:26.233
a Future Publisher that's it but there's

88
00:03:26.233 --> 00:03:26.933
one problem

89
00:03:26.933 --> 00:03:30.000
with Futures, Futures are

90
00:03:30.000 --> 00:03:33.500
eager Publishers which means this block

91
00:03:33.500 --> 00:03:35.733
will be executed as soon as you created

92
00:03:35.733 --> 00:03:37.433
the Future so every time you call this

93
00:03:37.433 --> 00:03:38.400
function

94
00:03:38.400 --> 00:03:41.566
it will fire this block instantly

95
00:03:41.566 --> 00:03:43.200
and this may be fine maybe that's what

96
00:03:43.200 --> 00:03:45.100
you want but what we want here

97
00:03:45.100 --> 00:03:48.000
is to only fire a request when someone

98
00:03:48.000 --> 00:03:49.566
subscribes to it

99
00:03:49.566 --> 00:03:52.766
not on creation of the Publisher so one

100
00:03:52.766 --> 00:03:53.100
way

101
00:03:53.100 --> 00:03:56.766
we can defer the execution of the Future

102
00:03:56.766 --> 00:04:00.533
is to wrap it into a Deferred

103
00:04:00.533 --> 00:04:04.133
Publisher look at that

104
00:04:04.133 --> 00:04:06.866
we are wrapping Publishers into

105
00:04:06.866 --> 00:04:08.066
Publishers

106
00:04:08.066 --> 00:04:11.200
just like we wrap our abstractions

107
00:04:11.200 --> 00:04:14.700
with the decorators, composites, adapters

108
00:04:14.700 --> 00:04:17.666
and etc it's the same principle of

109
00:04:17.666 --> 00:04:18.233
wrapping

110
00:04:18.233 --> 00:04:21.100
the type into another type to change its

111
00:04:21.100 --> 00:04:22.933
behavior

112
00:04:22.933 --> 00:04:24.633
but instead of creating our own

113
00:04:24.633 --> 00:04:26.300
implementations we can use

114
00:04:26.300 --> 00:04:29.266
those universal abstractions they are

115
00:04:29.266 --> 00:04:30.066
built-in

116
00:04:30.066 --> 00:04:32.700
in the framework and since the types

117
00:04:32.700 --> 00:04:33.166
match

118
00:04:33.166 --> 00:04:35.900
between the RemoteFeedLoader completion

119
00:04:35.900 --> 00:04:36.466
block

120
00:04:36.466 --> 00:04:38.700
and the Future completion block we can

121
00:04:38.700 --> 00:04:39.600
just pass

122
00:04:39.600 --> 00:04:41.333
the load function for the completion

123
00:04:41.333 --> 00:04:42.800
parameter

124
00:04:42.800 --> 00:04:46.066
exactly okay so we lifted

125
00:04:46.066 --> 00:04:48.466
our RemoteFeedLoader into the Combine

126
00:04:48.466 --> 00:04:50.000
world we can now load

127
00:04:50.000 --> 00:04:53.166
the feed using Combine Publishers

128
00:04:53.166 --> 00:04:55.033
we can even extract this code into an

129
00:04:55.033 --> 00:04:57.433
extension so we can make it easier to

130
00:04:57.433 --> 00:04:58.700
read

131
00:04:58.700 --> 00:05:00.800
okay so we can extend the RemoteFeed

132
00:05:00.800 --> 00:05:02.066
Loader

133
00:05:02.066 --> 00:05:05.166
with a function transitioning this load

134
00:05:05.166 --> 00:05:06.633
function to the Combine

135
00:05:06.633 --> 00:05:10.866
world so the load function now is a load

136
00:05:10.866 --> 00:05:14.233
Publisher that returns AnyPublisher

137
00:05:14.233 --> 00:05:18.466
of FeedImage or Error

138
00:05:18.466 --> 00:05:22.233
okay but

139
00:05:22.233 --> 00:05:25.166
since the RemoteFeedLoader defines its

140
00:05:25.166 --> 00:05:26.600
own error

141
00:05:28.066 --> 00:05:29.733
the types don't match here because here

142
00:05:29.733 --> 00:05:31.433
we expect Swift

143
00:05:31.433 --> 00:05:34.533
Error but here is the RemoteFeedLoader

144
00:05:34.533 --> 00:05:35.733
Error

145
00:05:35.733 --> 00:05:38.633
but we can use the module name to solve

146
00:05:38.633 --> 00:05:40.133
this problem

147
00:05:40.133 --> 00:05:42.700
that should do it alright so when

148
00:05:42.700 --> 00:05:44.533
using a RemoteFeedLoader we can just

149
00:05:44.533 --> 00:05:46.300
get

150
00:05:46.300 --> 00:05:50.466
a loadPublisher now that will wrap

151
00:05:50.466 --> 00:05:53.666
the load function into Combine

152
00:05:53.666 --> 00:05:56.633
Publishers so we can even create a type

153
00:05:56.633 --> 00:05:58.000
alias here

154
00:05:58.000 --> 00:06:01.600
Publisher of type FeedImage

155
00:06:01.600 --> 00:06:05.333
or Error

156
00:06:05.333 --> 00:06:08.633
okay that looks clean

157
00:06:08.633 --> 00:06:11.600
but this is just the beginning right we

158
00:06:11.600 --> 00:06:12.133
just

159
00:06:12.133 --> 00:06:14.800
wrapped the load function into Combine

160
00:06:14.800 --> 00:06:15.833
Publishers

161
00:06:15.833 --> 00:06:20.533
we still need to perform the composition

162
00:06:20.533 --> 00:06:23.666
with the cache and with the fallback

163
00:06:23.666 --> 00:06:27.833
so let's start with the cache decorator

164
00:06:27.833 --> 00:06:29.733
so this FeedLoaderCacheDecorator we

165
00:06:29.733 --> 00:06:31.833
created in a previous episode

166
00:06:31.833 --> 00:06:35.033
exists just to inject a side-effect into

167
00:06:35.033 --> 00:06:37.333
a FeedLoader

168
00:06:37.333 --> 00:06:39.033
so every time we load something from

169
00:06:39.033 --> 00:06:41.500
this FeedLoader we inject

170
00:06:41.500 --> 00:06:44.633
the cache side-effect using map

171
00:06:44.633 --> 00:06:47.733
so we inject inside-effect with map

172
00:06:47.733 --> 00:06:50.000
and we can do exactly the same thing

173
00:06:50.000 --> 00:06:54.400
with Combine operators

174
00:06:54.400 --> 00:06:56.700
so let's create an extension on

175
00:06:56.700 --> 00:06:57.900
Publisher

176
00:06:57.900 --> 00:07:02.400
where the output is array of

177
00:07:02.400 --> 00:07:05.666
FeedImage let's create a function

178
00:07:05.666 --> 00:07:09.266
let's say caching to

179
00:07:09.266 --> 00:07:15.266
a cache that's what we get here

180
00:07:15.266 --> 00:07:18.466
that should return a Publisher with the

181
00:07:18.466 --> 00:07:19.433
same type

182
00:07:19.433 --> 00:07:22.300
and failure so we're not changing the

183
00:07:22.300 --> 00:07:23.266
types

184
00:07:23.266 --> 00:07:25.433
we just want to inject a side-effect

185
00:07:25.433 --> 00:07:27.166
into the chain

186
00:07:27.166 --> 00:07:30.866
and just like we did here

187
00:07:30.866 --> 00:07:35.266
let's copy and paste the map operation

188
00:07:35.266 --> 00:07:36.800
and in this case we don't need self

189
00:07:36.800 --> 00:07:38.533
because we have access to the cache

190
00:07:38.533 --> 00:07:43.433
directly and again we need to erase

191
00:07:43.433 --> 00:07:46.933
to AnyPublisher okay that's it

192
00:07:46.933 --> 00:07:49.166
this is literally a copy and paste of

193
00:07:49.166 --> 00:07:50.800
what we're doing before

194
00:07:50.800 --> 00:07:53.033
exactly because when you use a decorator

195
00:07:53.033 --> 00:07:54.400
to inject a side-effect

196
00:07:54.400 --> 00:07:56.633
into a polymorphic interface you can

197
00:07:56.633 --> 00:07:58.000
always replace that with

198
00:07:58.000 --> 00:08:00.633
map and in fact since we are not

199
00:08:00.633 --> 00:08:01.500
transforming

200
00:08:01.500 --> 00:08:04.066
the value we are just injecting a side

201
00:08:04.066 --> 00:08:05.166
effect

202
00:08:05.166 --> 00:08:07.666
we can use a different operator that is

203
00:08:07.666 --> 00:08:08.466
built-in

204
00:08:08.466 --> 00:08:13.033
specifically for injecting side-effects

205
00:08:13.033 --> 00:08:17.333
which is the handleEvents operation

206
00:08:17.333 --> 00:08:20.233
where you get an output and you don't

207
00:08:20.233 --> 00:08:22.066
need to return

208
00:08:22.066 --> 00:08:24.633
anything because you're not supposed to

209
00:08:24.633 --> 00:08:25.500
transform

210
00:08:25.500 --> 00:08:29.166
this value that's it look how we can

211
00:08:29.166 --> 00:08:30.066
inject

212
00:08:30.066 --> 00:08:32.466
side-effects with much less lines of

213
00:08:32.466 --> 00:08:33.666
code

214
00:08:33.666 --> 00:08:36.533
that's a built-in operator we don't need

215
00:08:36.533 --> 00:08:37.266
to develop

216
00:08:37.266 --> 00:08:40.300
test and maintain it

217
00:08:40.300 --> 00:08:42.366
okay and since the received output

218
00:08:42.366 --> 00:08:44.700
closure has the same signature

219
00:08:44.700 --> 00:08:47.433
as the saveIgnoringResult function we

220
00:08:47.433 --> 00:08:49.433
can pass it directly

221
00:08:49.433 --> 00:08:52.833
look at that okay

222
00:08:52.833 --> 00:08:56.000
beautiful so this whole class can be

223
00:08:56.000 --> 00:08:57.100
replaced

224
00:08:57.100 --> 00:08:59.666
with this function, a one-liner

225
00:08:59.666 --> 00:09:01.666
basically

226
00:09:01.666 --> 00:09:04.933
okay let's move this

227
00:09:04.933 --> 00:09:08.800
back to the SceneDelegate file

228
00:09:08.800 --> 00:09:12.700
now we can just add it to the chain

229
00:09:12.700 --> 00:09:16.133
caching to a feed cache and what is the

230
00:09:16.133 --> 00:09:17.433
feed cache here

231
00:09:17.433 --> 00:09:22.366
the LocalFeedLoader okay

232
00:09:22.366 --> 00:09:26.466
the cache decorator is done now we need

233
00:09:26.466 --> 00:09:29.733
the fallback logic

234
00:09:29.733 --> 00:09:35.733
let's follow the same idea

235
00:09:35.733 --> 00:09:40.000
and create an extension on Publisher

236
00:09:40.000 --> 00:09:43.833
so what we need here is to load from a

237
00:09:43.833 --> 00:09:45.033
primary

238
00:09:45.033 --> 00:09:48.300
Publisher first and if it fails

239
00:09:48.300 --> 00:09:51.200
we want to try to load from a fallback

240
00:09:51.200 --> 00:09:52.366
Publisher

241
00:09:52.366 --> 00:09:55.500
right so we need a primary and a

242
00:09:55.500 --> 00:09:57.733
fallback

243
00:09:57.733 --> 00:10:00.633
so let's create here our fallback

244
00:10:00.633 --> 00:10:01.266
function

245
00:10:01.266 --> 00:10:05.500
so fallback to fallback publisher

246
00:10:05.500 --> 00:10:09.200
which needs to be a Publisher as well

247
00:10:09.200 --> 00:10:11.333
but the problem is that you cannot use

248
00:10:11.333 --> 00:10:12.933
the Publisher protocol

249
00:10:12.933 --> 00:10:16.000
as a parameter because it has associated

250
00:10:16.000 --> 00:10:19.666
types right so for now let's set it as

251
00:10:19.666 --> 00:10:20.866
an Any

252
00:10:20.866 --> 00:10:25.033
Publisher but let's keep the same

253
00:10:25.033 --> 00:10:29.266
generic types Output and Failure

254
00:10:29.266 --> 00:10:31.900
now we want to listen to errors and if

255
00:10:31.900 --> 00:10:33.266
there's an error

256
00:10:33.266 --> 00:10:35.200
if there's a failure we want to load

257
00:10:35.200 --> 00:10:37.033
from a fallback in this case we want to

258
00:10:37.033 --> 00:10:37.666
replace

259
00:10:37.666 --> 00:10:40.233
the chain with the fallback publisher

260
00:10:40.233 --> 00:10:42.233
and there's an operator for that

261
00:10:42.233 --> 00:10:45.433
which is the catch operator the problem

262
00:10:45.433 --> 00:10:46.066
is that

263
00:10:46.066 --> 00:10:49.200
catch is a keyword in Swift right

264
00:10:49.200 --> 00:10:51.433
so the compiler is a bit confused here

265
00:10:51.433 --> 00:10:52.933
but we can use

266
00:10:52.933 --> 00:10:55.100
self.catch that will help the

267
00:10:55.100 --> 00:10:56.366
compiler understand

268
00:10:56.366 --> 00:10:58.300
we want the catch function not the catch

269
00:10:58.300 --> 00:10:59.666
keyword

270
00:10:59.666 --> 00:11:02.300
and the catch function expects a closure

271
00:11:02.300 --> 00:11:04.000
that receives an Error

272
00:11:04.000 --> 00:11:07.333
and returns a Publisher so we can also

273
00:11:07.333 --> 00:11:08.133
make here

274
00:11:08.133 --> 00:11:12.833
an Error closure and pass to the catch

275
00:11:12.833 --> 00:11:18.533
function and eraseToAnyPublisher

276
00:11:18.533 --> 00:11:21.500
but in our composite we ignore the error

277
00:11:21.500 --> 00:11:24.000
in the failure case

278
00:11:24.000 --> 00:11:27.666
so we can even ignore the error here

279
00:11:27.666 --> 00:11:31.833
like this right

280
00:11:31.833 --> 00:11:34.933
so the catch operator in Publisher is

281
00:11:34.933 --> 00:11:36.366
equivalent

282
00:11:36.366 --> 00:11:39.200
to the fallback composite we created

283
00:11:39.200 --> 00:11:40.466
it's a way of

284
00:11:40.466 --> 00:11:44.533
injecting fallback logic into Publishers

285
00:11:44.533 --> 00:11:47.100
and it's a reusable way of doing so

286
00:11:47.100 --> 00:11:48.533
so again you don't need to implement

287
00:11:48.533 --> 00:11:52.300
maintain and test that logic

288
00:11:52.300 --> 00:11:53.600
okay let's move that to the Scene

289
00:11:53.600 --> 00:11:55.433
Delegate file

290
00:11:55.433 --> 00:12:00.233
and carry on our composition

291
00:12:00.233 --> 00:12:02.233
so now we need to chain here the

292
00:12:02.233 --> 00:12:03.666
fallback

293
00:12:03.666 --> 00:12:07.033
operation and the fallback

294
00:12:07.033 --> 00:12:13.033
is the local feed loader loadPublisher

295
00:12:13.033 --> 00:12:15.333
but the LocalFeedLoader don't have a

296
00:12:15.333 --> 00:12:17.500
loadPublisher

297
00:12:17.500 --> 00:12:19.433
so we can either duplicate this

298
00:12:19.433 --> 00:12:20.933
extension but for the

299
00:12:20.933 --> 00:12:24.000
LocalFeedLoader or we can simply make

300
00:12:24.000 --> 00:12:25.266
this extension

301
00:12:25.266 --> 00:12:28.700
open for any FeedLoader yeah

302
00:12:28.700 --> 00:12:31.733
we can do that look at that now any Feed

303
00:12:31.733 --> 00:12:32.233
Loader

304
00:12:32.233 --> 00:12:35.433
can be wrapped into Combine Publishers

305
00:12:35.433 --> 00:12:37.500
which means we don't need this Swift.

306
00:12:37.500 --> 00:12:40.066
Error anymore

307
00:12:40.066 --> 00:12:42.700
and that's it that's the composition

308
00:12:42.700 --> 00:12:45.600
with Combine

309
00:12:45.600 --> 00:12:48.233
those chained operators are equivalent

310
00:12:48.233 --> 00:12:49.733
to this composition

311
00:12:49.733 --> 00:12:52.233
with the fallback composite and the

312
00:12:52.233 --> 00:12:53.733
cache decorator

313
00:12:53.733 --> 00:12:56.800
injecting the cache side-effect so now

314
00:12:56.800 --> 00:12:57.333
we can

315
00:12:57.333 --> 00:12:58.366
replace the design pattern

316
00:12:58.366 --> 00:13:00.633
implementations with Combine

317
00:13:00.633 --> 00:13:03.433
in the composer as well so instead of

318
00:13:03.433 --> 00:13:04.133
passing

319
00:13:04.133 --> 00:13:08.000
a FeedLoader we can pass a function

320
00:13:08.000 --> 00:13:11.600
that creates Feedloader Publishers

321
00:13:11.600 --> 00:13:13.833
but before we can do that we need to

322
00:13:13.833 --> 00:13:14.700
create one more

323
00:13:14.700 --> 00:13:17.600
operator an operator that dispatches

324
00:13:17.600 --> 00:13:18.366
work

325
00:13:18.366 --> 00:13:21.900
in the main thread so let's undo

326
00:13:21.900 --> 00:13:26.133
let's check the main dispatch decorator

327
00:13:26.133 --> 00:13:29.100
again let's import Combine here and

328
00:13:29.100 --> 00:13:29.500
let's

329
00:13:29.500 --> 00:13:32.833
replicate this logic using Combine

330
00:13:32.833 --> 00:13:35.666
operators so the logic is when

331
00:13:35.666 --> 00:13:36.800
dispatching work

332
00:13:36.800 --> 00:13:39.033
if we are already on the main thread

333
00:13:39.033 --> 00:13:40.866
complete immediately

334
00:13:40.866 --> 00:13:43.433
otherwise dispatch to the main queue

335
00:13:43.433 --> 00:13:46.133
asynchronously

336
00:13:46.133 --> 00:13:49.600
so extension Publisher

337
00:13:49.600 --> 00:13:53.500
let's call it dispatchOnMainQueue

338
00:13:53.500 --> 00:13:57.033
that should return AnyPublisher

339
00:13:57.033 --> 00:13:59.500
with the same Output and Failure it should

340
00:13:59.500 --> 00:14:00.700
not change the types

341
00:14:00.700 --> 00:14:03.433
should only inject this dispatch

342
00:14:03.433 --> 00:14:04.866
decorator

343
00:14:04.866 --> 00:14:07.333
and there is an operator for dispatching

344
00:14:07.333 --> 00:14:08.533
on any queue

345
00:14:08.533 --> 00:14:11.666
in Combine which is receive on a

346
00:14:11.666 --> 00:14:13.033
scheduler

347
00:14:13.033 --> 00:14:15.833
and DipatchQueue implements the

348
00:14:15.833 --> 00:14:17.033
Scheduler protocol

349
00:14:17.033 --> 00:14:19.600
so we can use the dispatch queue main

350
00:14:19.600 --> 00:14:20.366
scheduler

351
00:14:20.366 --> 00:14:23.433
to dispatch work to the main queue

352
00:14:23.433 --> 00:14:26.466
but there is a problem this operator the

353
00:14:26.466 --> 00:14:27.500
dispatch queue main

354
00:14:27.500 --> 00:14:29.733
scheduler will always dispatch

355
00:14:29.733 --> 00:14:31.333
asynchronously

356
00:14:31.333 --> 00:14:33.033
it will not check if you are already on

357
00:14:33.033 --> 00:14:35.733
the main thread and complete immediately

358
00:14:35.733 --> 00:14:38.133
so the behavior is different when using

359
00:14:38.133 --> 00:14:39.433
the dispatch queue main

360
00:14:39.433 --> 00:14:42.533
scheduler and we want to keep the same

361
00:14:42.533 --> 00:14:43.600
behavior

362
00:14:43.600 --> 00:14:45.900
right if we are already on the main

363
00:14:45.900 --> 00:14:47.600
queue we want to complete

364
00:14:47.600 --> 00:14:50.633
immediately so we can do is to wrap the

365
00:14:50.633 --> 00:14:51.666
dispatch queue

366
00:14:51.666 --> 00:14:55.266
main scheduler into our own

367
00:14:55.266 --> 00:14:58.300
scheduler okay so let's create

368
00:14:58.300 --> 00:15:01.433
our ImmediateWhenOn

369
00:15:01.433 --> 00:15:04.633
MainQueueScheduler which needs to

370
00:15:04.633 --> 00:15:05.333
implement

371
00:15:05.333 --> 00:15:08.366
the Scheduler protocol that is defined

372
00:15:08.366 --> 00:15:10.833
in the Combine framework let's have a

373
00:15:10.833 --> 00:15:12.000
look

374
00:15:12.000 --> 00:15:13.600
so we need to define some associated

375
00:15:13.600 --> 00:15:16.133
types and we need to provide those

376
00:15:16.133 --> 00:15:22.133
implementations

377
00:15:22.133 --> 00:15:25.033
okay so since we are wrapping the

378
00:15:25.033 --> 00:15:26.366
dispatch queue main

379
00:15:26.366 --> 00:15:29.433
into this type we can literally use the

380
00:15:29.433 --> 00:15:30.066
same

381
00:15:30.066 --> 00:15:33.100
DispatchQueue types

382
00:15:33.100 --> 00:15:35.733
so now it's going to be this DispatchQueue

383
00:15:35.733 --> 00:15:36.633
main

384
00:15:36.633 --> 00:15:39.666
now the minimum tolerance

385
00:15:39.666 --> 00:15:42.866
is the dispatch queue tolerance and here

386
00:15:42.866 --> 00:15:44.000
is the method

387
00:15:44.000 --> 00:15:47.033
we care about the schedule method that

388
00:15:47.033 --> 00:15:48.000
performs

389
00:15:48.000 --> 00:15:51.333
the work right so here we want to add

390
00:15:51.333 --> 00:15:54.800
our logic if we are

391
00:15:54.800 --> 00:15:58.000
already on the main thread we complete

392
00:15:58.000 --> 00:16:01.166
immediately otherwise

393
00:16:01.166 --> 00:16:04.366
we schedule using the DispatchQueue

394
00:16:04.366 --> 00:16:09.666
main thread scheduler that's it

395
00:16:09.666 --> 00:16:11.833
now if we're using the scheduler to

396
00:16:11.833 --> 00:16:12.933
schedule something

397
00:16:12.933 --> 00:16:15.500
after a specific date we cannot execute

398
00:16:15.500 --> 00:16:17.266
it immediately

399
00:16:17.266 --> 00:16:19.033
so we just forward the message to the

400
00:16:19.033 --> 00:16:23.500
main queue scheduler

401
00:16:23.500 --> 00:16:27.166
okay let's now create a static immediate

402
00:16:27.166 --> 00:16:32.233
WhenOnMainQueueScheduler

403
00:16:32.233 --> 00:16:33.900
and we can use it now to make sure we

404
00:16:33.900 --> 00:16:35.900
keep the same behavior we have in the

405
00:16:35.900 --> 00:16:36.233
app

406
00:16:36.233 --> 00:16:39.733
right now so that's it a MainQueue

407
00:16:39.733 --> 00:16:41.266
DispatchDecorator

408
00:16:41.266 --> 00:16:44.366
can be replaced seamlessly with the

409
00:16:44.366 --> 00:16:45.033
receive

410
00:16:45.033 --> 00:16:48.466
on scheduler operation

411
00:16:48.466 --> 00:16:50.466
so again let's move that to the Scene

412
00:16:50.466 --> 00:16:52.366
Delegate

413
00:16:52.366 --> 00:16:58.000
keep all operators in one place for now

414
00:16:58.000 --> 00:16:59.500
now we have everything we need to

415
00:16:59.500 --> 00:17:01.166
replace the FeedLoader with the

416
00:17:01.166 --> 00:17:01.900
Publisher

417
00:17:01.900 --> 00:17:05.333
in the Composition Root so here instead

418
00:17:05.333 --> 00:17:05.666
of

419
00:17:05.666 --> 00:17:07.900
wrapping the FeedLoader in a decorator

420
00:17:07.900 --> 00:17:09.433
we're going to dispatch

421
00:17:09.433 --> 00:17:13.500
on the main queue

422
00:17:13.500 --> 00:17:16.766
look at that fantastic

423
00:17:16.766 --> 00:17:18.400
so the presentation adapter don't get

424
00:17:18.400 --> 00:17:20.000
FeedLoaders anymore

425
00:17:20.000 --> 00:17:23.433
it gets Publishers so we need to replace

426
00:17:23.433 --> 00:17:25.166
this code with the Publisher

427
00:17:25.166 --> 00:17:28.233
syntax which we can use

428
00:17:28.233 --> 00:17:31.266
sink to subscribe to the Publisher and

429
00:17:31.266 --> 00:17:33.833
start the operation

430
00:17:33.833 --> 00:17:37.100
so if we receive a completion

431
00:17:37.100 --> 00:17:40.533
or if we receive values

432
00:17:40.533 --> 00:17:42.700
we need to perform exactly the same

433
00:17:42.700 --> 00:17:45.333
logic

434
00:17:45.333 --> 00:17:48.533
so when we receive a successful value

435
00:17:48.533 --> 00:17:50.866
we tell the presenter that we finish

436
00:17:50.866 --> 00:17:52.400
loading the feed

437
00:17:52.400 --> 00:17:55.433
and if the publisher completes it either

438
00:17:55.433 --> 00:17:56.133
completes

439
00:17:56.133 --> 00:17:59.566
with a finished case which in this case

440
00:17:59.566 --> 00:18:00.466
we don't want to do

441
00:18:00.466 --> 00:18:03.566
anything or

442
00:18:03.566 --> 00:18:07.100
a failure case with an error

443
00:18:07.100 --> 00:18:09.333
where we want to tell the presenter

444
00:18:09.333 --> 00:18:11.500
about the error

445
00:18:11.500 --> 00:18:14.633
so we need to weakify self okay

446
00:18:14.633 --> 00:18:17.666
so we don't need this load anymore

447
00:18:17.666 --> 00:18:20.400
last thing we need to hold the result of

448
00:18:20.400 --> 00:18:23.200
the subscription which is a Cancellable

449
00:18:23.200 --> 00:18:25.100
because if you don't hold the Cancellable

450
00:18:25.100 --> 00:18:26.633
it will be deallocated

451
00:18:26.633 --> 00:18:28.300
and when the Cancellable is deallocated

452
00:18:28.300 --> 00:18:34.466
it cancels the whole subscription

453
00:18:34.466 --> 00:18:37.733
alright now we just need to update

454
00:18:37.733 --> 00:18:40.833
our Composition Root with the Publisher

455
00:18:40.833 --> 00:18:44.400
chain

456
00:18:44.400 --> 00:18:47.733
so we don't need the RemoteFeedLoader

457
00:18:47.733 --> 00:18:51.433
or the URL in this function anymore okay

458
00:18:51.433 --> 00:18:54.833
last build error we need to import

459
00:18:54.833 --> 00:18:57.600
Combine

460
00:18:57.600 --> 00:19:00.400
let's run the tests and we got a build

461
00:19:00.400 --> 00:19:02.233
error

462
00:19:02.233 --> 00:19:05.100
because we now need to inject the load

463
00:19:05.100 --> 00:19:06.133
Publisher

464
00:19:06.133 --> 00:19:08.633
instead of injecting FeedLoaders that's

465
00:19:08.633 --> 00:19:12.700
all you need to change in the tests

466
00:19:12.700 --> 00:19:16.066
let's run the tests

467
00:19:16.066 --> 00:19:18.633
it's passing which means the composition

468
00:19:18.633 --> 00:19:19.600
works

469
00:19:19.600 --> 00:19:22.766
okay and how easy was it to replace

470
00:19:22.766 --> 00:19:24.233
decorators and composites

471
00:19:24.233 --> 00:19:27.100
with Combine without breaking tests

472
00:19:27.100 --> 00:19:29.666
without breaking other modules

473
00:19:29.666 --> 00:19:31.433
so we don't need the FeedLoaderWith

474
00:19:31.433 --> 00:19:32.866
FallbackComposite

475
00:19:32.866 --> 00:19:36.233
if we are using Combine yeah we also

476
00:19:36.233 --> 00:19:37.500
don't need the FeedLoader

477
00:19:37.500 --> 00:19:40.533
CacheDecorator

478
00:19:40.533 --> 00:19:42.933
and we don't need the FeedLoader Main

479
00:19:42.933 --> 00:19:44.466
QueueDispatchDecorator

480
00:19:44.466 --> 00:19:49.733
extension as well

481
00:19:49.733 --> 00:19:54.933
so we don't need the tests as well right

482
00:19:54.933 --> 00:19:58.400
much less work using these built-in

483
00:19:58.400 --> 00:20:01.733
universal abstractions with Combine

484
00:20:01.733 --> 00:20:05.333
okay let's commit okay

485
00:20:05.333 --> 00:20:07.600
replace FeedLoader composition with

486
00:20:07.600 --> 00:20:08.700
Combine

487
00:20:08.700 --> 00:20:13.433
operators and let's do the same thing

488
00:20:13.433 --> 00:20:16.633
for the FeedImageDataLoader

489
00:20:16.633 --> 00:20:19.333
so the FeedImageDataLoader produces

490
00:20:19.333 --> 00:20:20.466
either

491
00:20:20.466 --> 00:20:24.633
Data or Error and it needs a URL

492
00:20:24.633 --> 00:20:27.733
to perform the requests so again we wrap

493
00:20:27.733 --> 00:20:30.933
the operation in a Deferred Future

494
00:20:30.933 --> 00:20:33.266
and we execute the loadImageData from

495
00:20:33.266 --> 00:20:34.066
URL

496
00:20:34.066 --> 00:20:37.433
with the completion block of the Future

497
00:20:37.433 --> 00:20:40.400
but the loadImageData can be cancelled

498
00:20:40.400 --> 00:20:41.333
right

499
00:20:41.333 --> 00:20:44.400
so we hold a reference to that task

500
00:20:44.400 --> 00:20:48.066
and if you receive a cancel event we

501
00:20:48.066 --> 00:20:48.533
cancel

502
00:20:48.533 --> 00:20:50.400
the task so again we are using the

503
00:20:50.400 --> 00:20:51.600
handleEvents

504
00:20:51.600 --> 00:20:55.200
to inject a side-effect into the chain

505
00:20:55.200 --> 00:20:57.833
and the side-effect in this case when

506
00:20:57.833 --> 00:20:58.866
there is a cancel

507
00:20:58.866 --> 00:21:02.700
event is to cancel the running task

508
00:21:02.700 --> 00:21:05.333
that's it and we also need to inject the

509
00:21:05.333 --> 00:21:06.233
caching

510
00:21:06.233 --> 00:21:10.633
side-effect into a FeedImageDataCache

511
00:21:10.633 --> 00:21:12.533
so again we use the handle events to

512
00:21:12.533 --> 00:21:13.833
inject side-effect

513
00:21:13.833 --> 00:21:17.266
into the chain

514
00:21:17.266 --> 00:21:20.466
and we can now create a makeLocal

515
00:21:20.466 --> 00:21:23.600
ImageLoaderWithRemote

516
00:21:23.600 --> 00:21:28.866
Fallback function that takes a URL

517
00:21:28.866 --> 00:21:33.200
and returns a FeedImageDataLoader

518
00:21:33.200 --> 00:21:36.866
Publisher so here we need

519
00:21:36.866 --> 00:21:43.100
the remote and local image loaders

520
00:21:43.100 --> 00:21:46.400
and the logic is to first

521
00:21:46.400 --> 00:21:49.033
load from local image loader and

522
00:21:49.033 --> 00:21:49.833
fallback

523
00:21:49.833 --> 00:21:52.533
to the remote loader right so it's the

524
00:21:52.533 --> 00:21:53.266
inverse

525
00:21:53.266 --> 00:21:55.833
of the FeedLoader where we first load

526
00:21:55.833 --> 00:21:58.133
the remote and then the local

527
00:21:58.133 --> 00:22:00.633
so load first from the local with the

528
00:22:00.633 --> 00:22:02.300
load image data

529
00:22:02.300 --> 00:22:05.600
from URL Publisher

530
00:22:05.600 --> 00:22:08.133
and we fall back to the remote image

531
00:22:08.133 --> 00:22:09.500
loader

532
00:22:09.500 --> 00:22:12.933
load image Publisher

533
00:22:12.933 --> 00:22:16.766
caching to the local image loader using

534
00:22:16.766 --> 00:22:19.900
the URL and that's it the same

535
00:22:19.900 --> 00:22:21.200
composition

536
00:22:21.200 --> 00:22:24.633
with Combine as we have with the

537
00:22:24.633 --> 00:22:28.866
composite and decorators

538
00:22:28.866 --> 00:22:31.833
so now we can inject a closure receiving

539
00:22:31.833 --> 00:22:33.200
a URL

540
00:22:33.200 --> 00:22:36.133
that produces FeedImageDataLoader

541
00:22:36.133 --> 00:22:38.933
Publishers

542
00:22:38.933 --> 00:22:40.933
again we need to decorate with the main

543
00:22:40.933 --> 00:22:42.633
queue

544
00:22:42.633 --> 00:22:45.666
we can reuse the dispatchOnMainQueue

545
00:22:45.666 --> 00:22:51.433
operation

546
00:22:51.433 --> 00:22:56.000
let's import Combine and Foundation

547
00:22:56.000 --> 00:22:59.033
and replace the imageLoader with

548
00:22:59.033 --> 00:23:01.600
a subscription to the Publisher using

549
00:23:01.600 --> 00:23:03.333
sink

550
00:23:03.333 --> 00:23:06.533
so if the completion is just

551
00:23:06.533 --> 00:23:10.300
a finished case we break

552
00:23:10.300 --> 00:23:13.333
but if it's a failure we pass the

553
00:23:13.333 --> 00:23:13.833
failure

554
00:23:13.833 --> 00:23:18.866
to the presenter

555
00:23:18.866 --> 00:23:22.300
and if it's successful value result

556
00:23:22.300 --> 00:23:25.200
data we also pass the value to the

557
00:23:25.200 --> 00:23:29.033
presenter

558
00:23:29.033 --> 00:23:30.933
of course we also need to hold the

559
00:23:30.933 --> 00:23:32.933
cancellable

560
00:23:32.933 --> 00:23:42.933
which previously was a task

561
00:23:42.933 --> 00:23:46.400
now we need to fix the test

562
00:23:46.400 --> 00:23:49.333
by passing the Publisher instead of the

563
00:23:49.333 --> 00:23:51.266
loader

564
00:23:51.266 --> 00:23:54.466
so from the tests it's passing

565
00:23:54.466 --> 00:23:57.733
fantastic which means we don't need

566
00:23:57.733 --> 00:24:00.000
the fallback composite for the image

567
00:24:00.000 --> 00:24:01.733
data loader as well

568
00:24:01.733 --> 00:24:04.933
and we don't need the ImageDataLoader

569
00:24:04.933 --> 00:24:06.000
CacheDecorator

570
00:24:06.000 --> 00:24:09.100
as well so we can delete the MainQueue

571
00:24:09.100 --> 00:24:12.133
DispatchDecorator too

572
00:24:12.133 --> 00:24:14.533
we get all this behavior for free with

573
00:24:14.533 --> 00:24:15.266
universal

574
00:24:15.266 --> 00:24:18.300
abstractions that Combine give us for

575
00:24:18.300 --> 00:24:20.466
free

576
00:24:20.466 --> 00:24:23.600
look at that so much cleaner let's run

577
00:24:23.600 --> 00:24:25.100
the test again

578
00:24:25.100 --> 00:24:29.033
passing let's commit

579
00:24:29.033 --> 00:24:31.333
so replace FeedImageDataLoader

580
00:24:31.333 --> 00:24:32.400
composition

581
00:24:32.400 --> 00:24:36.866
with Combine operators

582
00:24:36.866 --> 00:24:39.033
okay now we can move these Combine

583
00:24:39.033 --> 00:24:45.266
helpers to a separate file

584
00:24:45.266 --> 00:24:50.866
let's run the tests passing let's commit

585
00:24:50.866 --> 00:24:54.533
move Combine helpers to a new

586
00:24:54.533 --> 00:24:59.733
file so all the tests are passing

587
00:24:59.733 --> 00:25:03.266
let's run the application

588
00:25:03.266 --> 00:25:07.033
and it still works fantastic

589
00:25:07.033 --> 00:25:09.600
that's how we can use Combine to compose

590
00:25:09.600 --> 00:25:10.933
your application

591
00:25:10.933 --> 00:25:13.266
with universal abstractions in the

592
00:25:13.266 --> 00:25:14.466
Composition

593
00:25:14.466 --> 00:25:17.600
Root and the idea is similar to some

594
00:25:17.600 --> 00:25:18.633
design patterns

595
00:25:18.633 --> 00:25:20.933
where you wrap your types using a

596
00:25:20.933 --> 00:25:21.733
polymorphic

597
00:25:21.733 --> 00:25:24.766
interface so some design patterns are

598
00:25:24.766 --> 00:25:25.666
equivalent

599
00:25:25.666 --> 00:25:28.933
to built-in universal abstractions like

600
00:25:28.933 --> 00:25:33.033
map, flatMap, catch, handleEvents

601
00:25:33.033 --> 00:25:36.766
and etc so you don't need to reinvent

602
00:25:36.766 --> 00:25:39.733
the wheel okay this is going to do it

603
00:25:39.733 --> 00:25:40.866
for this lecture

604
00:25:40.866 --> 00:25:43.500
we'll see you again next time bye y'all

605
00:25:43.500 --> 00:25:57.500
see ya