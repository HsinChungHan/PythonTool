1. 此講座專注於 CodableFeedStore 的副作用及確保它們串行運行。
2. 講者強調需要保證操作按順序完成的必要性；例如，插入操作總應在刪除操作之前結束。
3. 通過在陣列中捕獲操作，可以斷言它們以正確的順序結束。
4. 講座強調檢查操作執行順序的測試的重要性。
5. 他們討論如何將線程引入物件的程式碼中，而不中斷串行執行。
6. 接著的討論圍繞確保程式碼不會阻擋客戶。因此，他們將操作分派給在後臺運行的共享隊列。
7. 有觀察到，這種切換到後臺使得操作的順序變得無法預測，這對於數據一致性並不理想。
8. 通過引入系統使用的共享隊列代替全局隊列，他們重新對操作的執行順序獲得控制。這一事實通過測試成功確認。
9. 講者強調，副作用與並發是相對立的力量；因此，最好創建無副作用的函數以方便實現並發。
10. 對於沒有副作用的操作，例如'retrieve'方法，認為可能平行執行，而帶有副作用的操作仍然串行執行。這種設定維護了一致的數據庫管理。
11. 對操作執行的變更得到測試的支持；否則，問題可能只在客戶抱怨數據被破壞時才會浮現出來。
12. 講座以在網絡模組中引入另一個邊界——HTTPClient為結，他們為客戶的利益而將此文檔化。這個邊界將決定何時以及分派到哪個線程。
13. 最後，講師建議創建可重用的規格以方便實現任何在下一個會議中討論的FeedStore解決方案。