1. The lecture covers refactoring large Model-View-Controller (MVC) controllers into smaller MVCs.
2. The focus is on a specific example, the FeedViewController, which manages feed loading and updates a UIRefreshControl view, handles feed state and populates a table view, creates and configures FeedImageCells with their related data, and deals with the loading state of image requests.
3. An important principle in this refactoring process is that models and views should be lean, single-responsibility entities that do not depend on each other. Actions within each MVC group are mediated through the controller.
4. Despite clean coding, the FeedViewController faces issues with increasing dependencies and responsibilities as new features are added, which necessitates smart dependency and responsibility management.
5. The first step in the refactoring process is creating new controllers for different parts of the FeedViewController. For instance, a new controller, FeedRefreshViewController is created to manage the FeedLoader state and another, FeedImageCellController, covers the creation, configuration and management of feed image states for each cell.
6. With the distribution of responsibilities, the FeedViewController becomes leaner. However, it gains new responsibilities of creating and communicating with the newly made controllers. This results in more dependencies and does not solve the initial problem.
7. To address this, a FeedUIComposer class is created to move the responsibility of creating dependencies from the FeedViewController. The FeedViewController then simply uses its dependencies instead of creating them.
8. With such changes to the architectural design, the dependencies of the FeedViewController like FeedLoader, FeedImage, FeedImageDataLoader, DataLoaderTask, are moved to the FeedUIComposer. 
9. An important note from the lecture is that the tests checking the expected behaviour of the program were kept untouched throughout the process.
10. The lecture concludes by mentioning potential further steps to split responsibilities, such as creating more specific controllers, and by introducing the next lecture topic: the Model-View-ViewModel (MVVM) design pattern.